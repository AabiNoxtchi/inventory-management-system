{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\Filters\\\\CategoryFilter.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport CustomSelect from './CustomSelect';\nimport './Filter.css';\nimport Functions from './Functions';\n\nclass CategoryFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: props.name,\n      names: props.names,\n      filteredNames: this.filter([], props.names, props.productType),\n      productType: props.productType,\n      productTypes: props.productTypes,\n      prefix: props.prefix\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  onSubmit(values) {\n    let path = window.location.pathname;\n    let search = window.location.search;\n    Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch);\n  }\n\n  resetForm() {\n    this.props.onNewSearch ? this.props.onNewSearch('') : window.location.href = window.location.pathname;\n  }\n\n  filter(subs, names, value) {\n    subs = [];\n    if (value == null) subs = names;else {\n      for (let i = 0; i < names.length; i++) {\n        if (names[i].filterBy == value || !names[i].value || names[i].value == 'undefined') {\n          subs.push(names[i]);\n        }\n      }\n    }\n    return subs;\n  }\n\n  render() {\n    let {\n      name,\n      names,\n      productType,\n      productTypes,\n      filteredNames\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name,\n        names,\n        productType,\n        productTypes,\n        filteredNames\n      },\n      onSubmit: this.onSubmit,\n      enableReinitialize: true,\n      children: ({\n        props,\n        setFieldValue,\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-form\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline px-2 mx-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"product type :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }, this), productTypes && productTypes.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inline\",\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: \"mx-2\",\n                type: \"checkbox\",\n                name: \"productType\",\n                value: type.value,\n                checked: type.name === values.productType,\n                onChange: value => {\n                  if (value.target.value == values.productType) value = null;\n                  let subs = values.filteredNames;\n                  subs = this.filter(subs, values.names, value ? value.target.value : null);\n                  setFieldValue(\"productType\", value ? value.target.value : null);\n                  setFieldValue(\"filteredNames\", subs);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 45\n              }, this), type.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"category\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4\",\n              items: values.filteredNames || filteredNames || names,\n              value: values.name || '',\n              onChange: selected => setFieldValue(\"name\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button px-5\",\n              type: \"submit\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button btn-delete\",\n              type: \"button\",\n              onClick: this.resetForm,\n              children: \"reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CategoryFilter;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/Filters/CategoryFilter.jsx"],"names":["React","Component","Formik","Form","Field","CustomSelect","Functions","CategoryFilter","constructor","props","state","name","names","filteredNames","filter","productType","productTypes","prefix","onSubmit","bind","resetForm","values","path","window","location","pathname","search","getSubmitPath","onNewSearch","href","subs","value","i","length","filterBy","push","render","setFieldValue","map","type","target","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nclass CategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {  \r\n      \r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n\r\n       }\r\n\r\n    resetForm() {      \r\n        this.props.onNewSearch ?\r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n         else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value || !names[i].value || names[i].value == 'undefined' ) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n       \r\n        let { name, names, productType, productTypes, filteredNames } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ name, names, productType, productTypes, filteredNames }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes&&productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                   if (value.target.value == values.productType) value = null;                                                   \r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value ? value.target.value : null);                                                   \r\n                                                    setFieldValue(\"productType\", value ? value.target.value : null);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.name || ''}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryFilter"]},"metadata":{},"sourceType":"module"}