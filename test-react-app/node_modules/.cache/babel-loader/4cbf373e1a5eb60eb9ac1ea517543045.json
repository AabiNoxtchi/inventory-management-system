{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\Filters\\\\PendingUserFilter.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CustomSelect from './CustomSelect';\nimport './Filter.css';\n\nclass PendingUserFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newCity: props.newCity,\n      countries: props.countries,\n      countryId: props.countryId,\n      prefix: props.prefix\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  onSubmit(values) {\n    console.log(\"values.countryId = \" + values.countryId);\n    let path = window.location.pathname;\n    let search = window.location.search;\n    let newPath = ``;\n\n    if (search.length > 1) {\n      while (search.charAt(0) === '?') {\n        search = search.substring(1);\n      }\n\n      let searchItems = search.split('&');\n\n      for (let i = 0; i < searchItems.length; i++) {\n        if (searchItems[i].startsWith('Pager.itemsPerPage=')) newPath += searchItems[i] + '&';\n      }\n    }\n\n    let prefix = this.state.prefix;\n    Object.entries(values).map(([key, value]) => {\n      if (!key.endsWith(\"s\") && value && value.length > 0 && value != 'undefined') {\n        newPath += prefix + '.' + key + '=' + value + '&';\n      }\n    });\n    newPath = newPath.substring(0, newPath.length - 1); // newPath = path + '?' + newPath;\n\n    newPath = '?' + newPath;\n    newPath = this.props.onNewSearch ? newPath : path + newPath;\n    console.log('newPath =' + newPath);\n    console.log(\"this.props.onNewSearch = \" + this.props.onNewSearch != null); // window.location.href = newPath;\n\n    this.props.onNewSearch ? this.props.onNewSearch(newPath) : window.location.href = newPath;\n  }\n\n  resetForm() {\n    /* this.setState({\r\n         all: '',\r\n         firstName: '',\r\n         lastName: '',\r\n         userName: '',\r\n         email: '',\r\n     });\r\n     console.log('in reset form ');*/\n    //  window.location.href = window.location.pathname;\n    this.props.onNewSearch ? this.props.onNewSearch('') : window.location.href = window.location.pathname;\n  }\n\n  render() {\n    let {\n      newCity,\n      countryId\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        newCity,\n        countryId\n      },\n      onSubmit: this.onSubmit,\n      enableReinitialize: true,\n      children: ({\n        props,\n        setFieldValue,\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-form\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"country\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-2-5\",\n              items: this.state.countries,\n              value: values.countryId,\n              onChange: selected => setFieldValue(\"countryId\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"mb-1 fw-s\",\n            children: \"city name\\xA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            className: \"form-control in-inline inline-1-5\",\n            type: \"text\",\n            name: \"newCity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button px-5\",\n              type: \"submit\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button btn-delete\",\n              type: \"button\",\n              onClick: this.resetForm,\n              children: \"reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PendingUserFilter;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/Filters/PendingUserFilter.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","CustomSelect","PendingUserFilter","constructor","props","state","newCity","countries","countryId","prefix","onSubmit","bind","resetForm","values","console","log","path","window","location","pathname","search","newPath","length","charAt","substring","searchItems","split","i","startsWith","Object","entries","map","key","value","endsWith","onNewSearch","href","render","setFieldValue","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nclass PendingUserFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            newCity: props.newCity,\r\n            countries: props.countries,\r\n            countryId: props.countryId,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values.countryId = \" + values.countryId)\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            if (!key.endsWith(\"s\") && value && value.length > 0 && value != 'undefined') {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n       // newPath = path + '?' + newPath;\r\n        newPath = '?' + newPath;\r\n        newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        console.log(\"this.props.onNewSearch = \" + this.props.onNewSearch != null)\r\n       // window.location.href = newPath;\r\n        this.props.onNewSearch ? this.props.onNewSearch(newPath)\r\n            : window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        /* this.setState({\r\n             all: '',\r\n             firstName: '',\r\n             lastName: '',\r\n             userName: '',\r\n             email: '',\r\n         });\r\n         console.log('in reset form ');*/\r\n\r\n      //  window.location.href = window.location.pathname;\r\n        this.props.onNewSearch ? this.props.onNewSearch('') : window.location.href = window.location.pathname;\r\n    }\r\n\r\n    render() {\r\n\r\n        let { newCity, countryId } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ newCity, countryId }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>country&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={this.state.countries}\r\n                                    value={values.countryId}\r\n                                    onChange={(selected) => setFieldValue(\"countryId\", selected.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <label className=\"mb-1 fw-s\">city name&nbsp;</label>\r\n                            <Field className=\"form-control in-inline inline-1-5\" type=\"text\" \r\n                                name=\"newCity\" />\r\n                            \r\n                            \r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PendingUserFilter"]},"metadata":{},"sourceType":"module"}