{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\CityInnerComponent.jsx\";\nimport React, { Component } from 'react';\nimport CountryDataService from '../service/CountryDataService';\nimport '../myStyles/Style.css';\nimport CustomSelect from './Filters/CustomSelect';\nimport Function from './Shared/Function';\n\nclass CityInnerComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveUpdated = () => {\n      let item = this.state.cityUpdateShow.city;\n      item.name = item.name ? item.name.trim() : item.name;\n\n      if (!item.name || item.name.length < 1 || !item.timeZone || item.timeZone == \"undefined\" || !item.countryId || item.countryId == \"undefined\") {\n        let show = this.state.cityUpdateShow;\n        show.error = \"All fields are required\";\n        this.setState({\n          cityUpdateShow: show\n        });\n      } else if (original.name == item.name && original.countryId == item.countryId && original.timeZone == item.timeZone) {\n        let show = this.state.cityUpdateShow;\n        show.error = \"item hasn't changed !!!\";\n        this.setState({\n          cityUpdateShow: show\n        });\n      } else {\n        CountryDataService.saveChild(item).then(response => {\n          let msg = this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? `Update successful` : `Save successful`;\n          this.props.updateClickedInnerChild(null);\n          this.props.setMessage(msg);\n          if (this.props.refresh) this.props.refresh();\n          if (this.props.updatedCity) this.props.updatedCity(response.data, item);\n        }).catch(error => {\n          /*let errormsg = error.response && error.response.data ?\r\n              error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\n          let msg = Function.getErrorMsg(error);\n          let show = this.state.cityUpdateShow;\n          show.error = msg;\n          this.setState({\n            cityUpdateShow: show\n          });\n        });\n      }\n    };\n\n    this.state = {\n      cityUpdateShow: props.cityUpdateShow,\n      original: JSON.parse(JSON.stringify(props.cityUpdateShow.city)),\n      countries: [],\n      zones: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"item recieved = \" + JSON.stringify(this.state.cityUpdateShow));\n    this.refresh();\n  }\n  /*  refresh(search) {\r\n        // console.log(\"search = \" + search);\r\n        CountryDataService.retrieveChild(this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.id || -1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    countries: response.data.countries,\r\n                    zones: response.data.zones\r\n                })\r\n                // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n            )\r\n    }*/\n\n\n  refresh(search) {\n    // console.log(\"search = \" + search);\n    CountryDataService.retrieveChild(this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.id || -1, this.state.cityUpdateShow.city.countryId && this.state.cityUpdateShow.city.countryId || -1).then(response => {\n      console.log(\"got response = \" + JSON.stringify(response));\n      this.setState({\n        countries: response.data.countries,\n        zones: response.data.zones\n      }); // console.log(\"data length = \" + this.state.filteredNumbers.length);\n    }).catch(error => console.log(\"error = \" + error));\n  }\n\n  onNameChange(value) {\n    let c = this.state.cityUpdateShow;\n    c.city.name = value.target.value; //.replace(/\\s/g, '');\n\n    this.setState({\n      cityUpdateShow: c\n    });\n  }\n\n  onZoneChange(selected) {\n    let c = this.state.cityUpdateShow;\n    c.city.timeZone = selected.value;\n    this.setState({\n      cityUpdateShow: c\n    });\n  }\n\n  onCountryChange(selected) {\n    let c = this.state.cityUpdateShow;\n    c.city.countryId = selected.value;\n    this.setState({\n      cityUpdateShow: c\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.cityUpdateShow.show ? \"overlay d-block\" : \"d-none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.cityUpdateShow.show ? \"modal d-block\" : \"d-none\",\n        style: {\n          width: \"40%\",\n          height: \"75%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"close\",\n          onClick: () => this.props.updateClickedInnerChild(null),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? \"update\" : \"add\", \" city\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-warning d-flex\",\n          children: [this.state.cityUpdateShow.error, /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"fa fa-close ml-auto pr-3 pt-1\",\n            onClick: () => {\n              let show = this.state.cityUpdateShow;\n              show.error = '';\n              this.setState({\n                cityUpdateShow: show\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 ? \"required-field\" : \"mt-5 required-field\",\n          children: \"country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n          items: this.state.countries,\n          value: this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.countryId,\n          onChange: selected => this.onCountryChange(selected)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"required-field\",\n          children: \"city name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control pt-2 pb-2\",\n          value: this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.name,\n          onChange: value => {\n            this.onNameChange(value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"required-field\",\n          children: \"time zone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n          items: this.state.zones,\n          value: this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.timeZone,\n          onChange: selected => this.onZoneChange(selected)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-mybtn p-x-5\",\n          onClick: this.saveUpdated,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-mybtn btn-delete px-5\",\n          onClick: () => this.props.updateClickedInnerChild(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default CityInnerComponent;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/CityInnerComponent.jsx"],"names":["React","Component","CountryDataService","CustomSelect","Function","CityInnerComponent","constructor","props","saveUpdated","item","state","cityUpdateShow","city","name","trim","length","timeZone","countryId","show","error","setState","original","saveChild","then","response","msg","id","updateClickedInnerChild","setMessage","refresh","updatedCity","data","catch","getErrorMsg","JSON","parse","stringify","countries","zones","componentDidMount","console","log","search","retrieveChild","onNameChange","value","c","target","onZoneChange","selected","onCountryChange","render","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass CityInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n            cityUpdateShow: props.cityUpdateShow,\r\n            original: JSON.parse(JSON.stringify(props.cityUpdateShow.city)),\r\n                countries: [],\r\n                zones: []\r\n            }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"item recieved = \" + JSON.stringify(this.state.cityUpdateShow));\r\n        this.refresh()\r\n    }\r\n\r\n  /*  refresh(search) {\r\n        // console.log(\"search = \" + search);\r\n        CountryDataService.retrieveChild(this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.id || -1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    countries: response.data.countries,\r\n                    zones: response.data.zones\r\n                })\r\n                // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n            )\r\n    }*/\r\n\r\n    refresh(search) {\r\n        // console.log(\"search = \" + search);\r\n        CountryDataService.retrieveChild(this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.id || -1,\r\n            this.state.cityUpdateShow.city.countryId && this.state.cityUpdateShow.city.countryId || -1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    countries: response.data.countries,\r\n                    zones: response.data.zones\r\n                })\r\n                // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n            )\r\n    }\r\n\r\n\r\n    saveUpdated = () => {\r\n\r\n        let item = this.state.cityUpdateShow.city;\r\n        item.name = item.name?item.name.trim():item.name;\r\n        if (!item.name || item.name.length < 1 || !item.timeZone || item.timeZone == \"undefined\" || !item.countryId || item.countryId == \"undefined\") {\r\n            let show = this.state.cityUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ cityUpdateShow: show })\r\n        } else if (original.name == item.name && original.countryId == item.countryId && original.timeZone == item.timeZone) {\r\n            let show = this.state.cityUpdateShow;\r\n            show.error = \"item hasn't changed !!!\";\r\n            this.setState({ cityUpdateShow: show })\r\n        }\r\n        else {\r\n            CountryDataService.saveChild(item)\r\n                .then(response => {\r\n                    let msg = this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInnerChild(null);\r\n                    this.props.setMessage(msg);\r\n                    if(this.props.refresh) this.props.refresh();\r\n                    if(this.props.updatedCity) this.props.updatedCity(response.data, item);\r\n                }).catch(error => {\r\n                    /*let errormsg = error.response && error.response.data ?\r\n                        error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n                    let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.cityUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ cityUpdateShow: show })\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    onNameChange(value) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.name = value.target.value;//.replace(/\\s/g, '');\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n    onZoneChange(selected) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.timeZone = selected.value;\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n    onCountryChange(selected) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.countryId = selected.value;\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.cityUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.cityUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"75%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInnerChild(null)}>&times;</span>\r\n                    <h2>{this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? \"update\" : \"add\"} city</h2>\r\n                    {this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.cityUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.cityUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ cityUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n\r\n                    <h6 className={this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 ?\r\n                        \"required-field\" : \"mt-5 required-field\"}>country</h6>\r\n                    <CustomSelect\r\n                        items={this.state.countries}\r\n                        value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.countryId}\r\n                        onChange={(selected) => this.onCountryChange(selected)}\r\n                    />\r\n                    <h6 className=\"required-field\">city name</h6>\r\n                    <input type=\"text\" className=\"form-control pt-2 pb-2\" value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.name}\r\n                        onChange={(value) => { this.onNameChange(value) }} />\r\n                    <h6 className=\"required-field\">time zone</h6>\r\n                    <CustomSelect\r\n                        items={this.state.zones}\r\n                        value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.timeZone}\r\n                        onChange={(selected) => this.onZoneChange(selected)}\r\n                    />\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInnerChild(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityInnerComponent"]},"metadata":{},"sourceType":"module"}