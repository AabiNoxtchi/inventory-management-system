{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\nconst AUTH_API_URL = `${API_URL}/api/inventory/auth/signin`;\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUserName';\nexport const USER_ROLE_SESSION_ATTRIBUTE_NAME = 'authenticatedUserRole';\nexport const USER_TOKEN_SESSION_ATTRIBUTE_NAME = 'authenticatedUserToken';\n\nclass AuthenticationService {\n  executeAuthentication(username, password) {\n    return axios.post(`${AUTH_API_URL}`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLogin(username, token, role) {\n    console.log('registerSuccessfull login username = ' + username + 'token = ' + token);\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(USER_ROLE_SESSION_ATTRIBUTE_NAME, role);\n    sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, this.createToken(token));\n    console.log('registerSuccessfull login = ' + sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME));\n    this.setupAxiosInterceptors(this.createToken(token));\n  }\n\n  createToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(USER_ROLE_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedUerName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  getLoggedUerRole() {\n    let role = sessionStorage.getItem(USER_ROLE_SESSION_ATTRIBUTE_NAME);\n    if (role === null) return '';\n    return role;\n  }\n\n  getLoggedUerRole() {\n    let token = sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\n    if (token === null) return '';\n    return token;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/service/AuthenticationService.js"],"names":["axios","API_URL","AUTH_API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","USER_ROLE_SESSION_ATTRIBUTE_NAME","USER_TOKEN_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeAuthentication","username","password","post","registerSuccessfulLogin","token","role","console","log","sessionStorage","setItem","createToken","getItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getLoggedUerName","getLoggedUerRole","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,YAAY,GAAI,GAAED,OAAQ,4BAAhC;AAEA,OAAO,MAAME,gCAAgC,GAAG,uBAAzC;AACP,OAAO,MAAMC,gCAAgC,GAAG,uBAAzC;AACP,OAAO,MAAMC,iCAAiC,GAAG,wBAA1C;;AAGP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACtC,WAAOT,KAAK,CAACU,IAAN,CAAY,GAAER,YAAa,EAA3B,EAA8B;AACjCM,MAAAA,QADiC;AAEjCC,MAAAA;AAFiC,KAA9B,CAAP;AAIH;;AAEDE,EAAAA,uBAAuB,CAACH,QAAD,EAAWI,KAAX,EAAkBC,IAAlB,EAAwB;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAA0CP,QAA1C,GAAqD,UAArD,GAAgEI,KAA5E;AAEAI,IAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDK,QAAzD;AACAQ,IAAAA,cAAc,CAACC,OAAf,CAAuBb,gCAAvB,EAAyDS,IAAzD;AACAG,IAAAA,cAAc,CAACC,OAAf,CAAuBZ,iCAAvB,EAA0D,KAAKa,WAAL,CAAiBN,KAAjB,CAA1D;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCC,cAAc,CAACG,OAAf,CAAuBhB,gCAAvB,CAA7C;AAEA,SAAKiB,sBAAL,CAA4B,KAAKF,WAAL,CAAiBN,KAAjB,CAA5B;AAEH;;AAEDM,EAAAA,WAAW,CAACN,KAAD,EAAQ;AACf,WAAO,YAAYA,KAAnB;AACH;;AAEDS,EAAAA,MAAM,GAAG;AACLL,IAAAA,cAAc,CAACM,UAAf,CAA0BnB,gCAA1B;AACAa,IAAAA,cAAc,CAACM,UAAf,CAA0BlB,gCAA1B;AACAY,IAAAA,cAAc,CAACM,UAAf,CAA0BjB,iCAA1B;AACH;;AAEDkB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGR,cAAc,CAACG,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAIqB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDC,EAAAA,gBAAgB,GAAG;AACf,QAAID,IAAI,GAAGR,cAAc,CAACG,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAIqB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDE,EAAAA,gBAAgB,GAAG;AACf,QAAIb,IAAI,GAAGG,cAAc,CAACG,OAAf,CAAuBf,gCAAvB,CAAX;AACA,QAAIS,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDa,EAAAA,gBAAgB,GAAG;AACf,QAAId,KAAK,GAAGI,cAAc,CAACG,OAAf,CAAuBd,iCAAvB,CAAZ;AACA,QAAIO,KAAK,KAAK,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,KAAP;AACH;;AAEDQ,EAAAA,sBAAsB,CAACR,KAAD,EAAQ;AAC1BZ,IAAAA,KAAK,CAAC2B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BpB,KAA/B;AACH;;AACD,aAAOkB,MAAP;AACH,KANL;AAQH;;AAhEuB;;AAmE5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080'\r\nconst AUTH_API_URL = `${API_URL}/api/inventory/auth/signin`\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUserName'\r\nexport const USER_ROLE_SESSION_ATTRIBUTE_NAME = 'authenticatedUserRole'\r\nexport const USER_TOKEN_SESSION_ATTRIBUTE_NAME = 'authenticatedUserToken'\r\n\r\n\r\nclass AuthenticationService {\r\n\r\n    executeAuthentication(username, password) {\r\n        return axios.post(`${AUTH_API_URL}`, {\r\n            username,\r\n            password\r\n        });\r\n    }\r\n\r\n    registerSuccessfulLogin(username, token, role) {\r\n        console.log('registerSuccessfull login username = ' + username + 'token = '+token)\r\n\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        sessionStorage.setItem(USER_ROLE_SESSION_ATTRIBUTE_NAME, role)\r\n        sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, this.createToken(token))\r\n        console.log('registerSuccessfull login = ' + sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME))\r\n\r\n        this.setupAxiosInterceptors(this.createToken(token))\r\n       \r\n    }\r\n\r\n    createToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_ROLE_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedUerName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    getLoggedUerRole() {\r\n        let role = sessionStorage.getItem(USER_ROLE_SESSION_ATTRIBUTE_NAME)\r\n        if (role === null) return ''\r\n        return role\r\n    }\r\n\r\n    getLoggedUerRole() {\r\n        let token = sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME)\r\n        if (token === null) return ''\r\n        return token\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()\r\n\r\n"]},"metadata":{},"sourceType":"module"}