{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\EventListner.jsx\",\n    _s = $RefreshSig$();\n\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport authHeader from '../service/AuthHeader';\nimport React, { useEffect, useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\n\nfunction EventListner() {\n  _s();\n\n  const [listening, setListening] = useState(false);\n  const [data, setData] = useState([]);\n  let eventSource = undefined;\n  useEffect(() => {\n    if (!listening) {\n      var EventSource = EventSourcePolyfill;\n      eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribe\", {\n        headers: authHeader()\n      });\n\n      eventSource.onopen = event => {\n        console.log(\"connection opened\");\n      };\n\n      eventSource.onmessage = event => {\n        console.log(\"result\", event.data);\n        toast(event.data, {\n          position: \"bottom-right\",\n          hideProgressBar: true\n        }); // setData(old => [...old, event.data])\n      };\n\n      eventSource.onerror = event => {\n        console.log(event.target.readyState);\n\n        if (event.target.readyState === EventSource.CLOSED) {\n          console.log('eventsource closed (' + event.target.readyState + ')');\n        }\n\n        eventSource.close();\n      };\n\n      setListening(true);\n    }\n\n    return () => {\n      eventSource.close();\n      console.log(\"eventsource closed\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n  {\n    /* <div >\r\n         <AppInstructor/>\r\n     </div>*/\n  } //);\n}\n\n_s(EventListner, \"pPhG6bgkdMd/wcIrmeoar7uJYNI=\");\n\n_c = EventListner;\nexport default EventListner;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventListner\");","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/EventListner.jsx"],"names":["EventSourcePolyfill","authHeader","React","useEffect","useState","ToastContainer","toast","EventListner","listening","setListening","data","setData","eventSource","undefined","EventSource","headers","onopen","event","console","log","onmessage","position","hideProgressBar","onerror","target","readyState","CLOSED","close"],"mappings":";;;;;AAAA,SAASA,mBAAT,QAAoC,uBAApC;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAEpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAIQ,WAAW,GAAGC,SAAlB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACK,SAAL,EAAgB;AACZ,UAAIM,WAAW,GAAGd,mBAAlB;AACAY,MAAAA,WAAW,GAAG,IAAIE,WAAJ,CAAgB,uDAAhB,EAAyE;AAAEC,QAAAA,OAAO,EAAEd,UAAU;AAArB,OAAzE,CAAd;;AAEAW,MAAAA,WAAW,CAACI,MAAZ,GAAsBC,KAAD,IAAW;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,OAFD;;AAIAP,MAAAA,WAAW,CAACQ,SAAZ,GAAyBH,KAAD,IAAW;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAK,CAACP,IAA5B;AACAJ,QAAAA,KAAK,CAACW,KAAK,CAACP,IAAP,EAAa;AAAEW,UAAAA,QAAQ,EAAE,cAAZ;AAA4BC,UAAAA,eAAe,EAAE;AAA7C,SAAb,CAAL,CAF+B,CAGhC;AACF,OAJD;;AAMAV,MAAAA,WAAW,CAACW,OAAZ,GAAuBN,KAAD,IAAW;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACO,MAAN,CAAaC,UAAzB;;AACA,YAAIR,KAAK,CAACO,MAAN,CAAaC,UAAb,KAA4BX,WAAW,CAACY,MAA5C,EAAoD;AAChDR,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBF,KAAK,CAACO,MAAN,CAAaC,UAAtC,GAAmD,GAA/D;AACH;;AACDb,QAAAA,WAAW,CAACe,KAAZ;AACH,OAND;;AAQAlB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAAO,MAAM;AACTG,MAAAA,WAAW,CAACe,KAAZ;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,KAHD;AAKH,GA/BQ,EA+BN,EA/BM,CAAT;AAiCA,sBACI;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADJ;AAMA;AAAC;AACL;AACA;AAAe,GA/CS,CAgDpB;AACH;;GAjDQZ,Y;;KAAAA,Y;AAmDT,eAAeA,YAAf","sourcesContent":["import { EventSourcePolyfill } from 'event-source-polyfill';\r\nimport authHeader from '../service/AuthHeader';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nfunction EventListner() {\r\n   \r\n    const [listening, setListening] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    let eventSource = undefined;\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            var EventSource = EventSourcePolyfill; \r\n            eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribe\", { headers: authHeader() });\r\n\r\n            eventSource.onopen = (event) => {\r\n                console.log(\"connection opened\")\r\n            }\r\n\r\n            eventSource.onmessage = (event) => {\r\n                console.log(\"result\", event.data);\r\n                toast(event.data, { position: \"bottom-right\", hideProgressBar: true });\r\n               // setData(old => [...old, event.data])\r\n            }\r\n\r\n            eventSource.onerror = (event) => {\r\n                console.log(event.target.readyState)\r\n                if (event.target.readyState === EventSource.CLOSED) {\r\n                    console.log('eventsource closed (' + event.target.readyState + ')')\r\n                }\r\n                eventSource.close();\r\n            }\r\n\r\n            setListening(true);\r\n        }\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            console.log(\"eventsource closed\")\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"\">\r\n            \r\n        </div>\r\n    );\r\n\r\n    {/* <div >\r\n          <AppInstructor/>\r\n      </div>*/}\r\n    //);\r\n}\r\n\r\nexport default EventListner;\r\n"]},"metadata":{},"sourceType":"module"}