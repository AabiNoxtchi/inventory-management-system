{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\EventListner.jsx\",\n    _s = $RefreshSig$();\n\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport authHeader from '../service/AuthHeader';\nimport React, { useEffect, useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Link, withRouter } from 'react-router-dom';\n\nfunction EventListner() {\n  _s();\n\n  const [listening, setListening] = useState(false);\n  let eventSource = undefined;\n\n  const ToastWithLink = (title, msg, link) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: link,\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 11\n  }, this);\n\n  const getListString = list => {\n    let str = list.toString();\n    str = str.substring(1, str.length - 1);\n    return str;\n  };\n\n  useEffect(() => {\n    if (!listening) {\n      var EventSource = EventSourcePolyfill;\n      eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribeWebClient\", {\n        headers: authHeader()\n      });\n\n      eventSource.onopen = event => {};\n\n      eventSource.onmessage = event => {\n        toast(event.data, {\n          position: \"bottom-right\",\n          hideProgressBar: true,\n          autoClose: false\n        });\n      }; //keep alive pings\n\n\n      eventSource.addEventListener(\"keepalive\", event => {}); //Amortized\n\n      eventSource.addEventListener(\"amortized\", event => {\n        toast(ToastWithLink(\"Inventories\", \"fully amortized inventories\", \"/productdetails?Filter.ids=\" + getListString(event.data)), {\n          position: \"bottom-right\",\n          autoClose: false\n        });\n      }); // UpdatedAmortizations\n\n      eventSource.addEventListener(\"updatedamortizations\", event => {\n        toast(ToastWithLink(\"Inventories\", \"total amortization updated for inventories\", \"/productdetails?Filter.ids=\" + getListString(event.data)), {\n          position: \"bottom-right\",\n          autoClose: false\n        });\n      }); //AllDiscarded\n\n      eventSource.addEventListener(\"alldiscarded\", event => {\n        toast(ToastWithLink(\"Deliveries\", \"all discarded deliveries\", \"/deliveries?Filter.discarded=true&Filter.ids=\" + getListString(event.data)), {\n          position: \"bottom-right\",\n          autoClose: false\n        });\n      }); //EmptyDeliveries\n\n      eventSource.addEventListener(\"emptydeliveries\", event => {\n        toast(ToastWithLink(\"Deliveries\", \"empty deliveries\", \"/deliveries?Filter.empty=true&Filter.ids=\" + getListString(event.data)), {\n          position: \"bottom-right\",\n          autoClose: false\n        });\n      }); //cityRequest\n\n      eventSource.addEventListener(\"cityrequest\", event => {\n        toast(ToastWithLink(\"City Request\", \"new Register with city Request\", \"/pendingrequests?refresh\"), {\n          position: \"bottom-right\",\n          autoClose: false\n        });\n      });\n\n      eventSource.onerror = event => {\n        if (event.target.readyState === EventSource.CLOSED) {}\n      };\n\n      setListening(true);\n    }\n\n    return () => {\n      eventSource.close();\n      console.log(\"eventsource closed\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(EventListner, \"WzZv0xKGdAOpCR7XZ1RH2ZldfVA=\");\n\n_c = EventListner;\nexport default EventListner;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventListner\");","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/EventListner.jsx"],"names":["EventSourcePolyfill","authHeader","React","useEffect","useState","ToastContainer","toast","Link","withRouter","EventListner","listening","setListening","eventSource","undefined","ToastWithLink","title","msg","link","getListString","list","str","toString","substring","length","EventSource","headers","onopen","event","onmessage","data","position","hideProgressBar","autoClose","addEventListener","onerror","target","readyState","CLOSED","close","console","log"],"mappings":"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","sourcesContent":["import { EventSourcePolyfill } from 'event-source-polyfill';\r\nimport authHeader from '../service/AuthHeader';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Link, withRouter } from 'react-router-dom'\r\n\r\nfunction EventListner() {\r\n   \r\n    const [listening, setListening] = useState(false);   \r\n    let eventSource = undefined;\r\n\r\n    const ToastWithLink = (title, msg, link) => (\r\n          <div>\r\n              <h5>{title}</h5>\r\n           <Link to={link}>{msg}</Link>\r\n        </div>\r\n    );\r\n\r\n    const getListString = (list) => {\r\n        let str = list.toString();\r\n        str = str.substring(1, str.length - 1)\r\n        return str\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            var EventSource = EventSourcePolyfill; \r\n            eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribeWebClient\", { headers: authHeader() });\r\n\r\n            eventSource.onopen = (event) => {                \r\n            }\r\n\r\n            eventSource.onmessage = (event) => {              \r\n                toast(event.data, { position: \"bottom-right\", hideProgressBar: true, autoClose: false});\r\n              \r\n            }\r\n\r\n            //keep alive pings\r\n            eventSource.addEventListener(\"keepalive\", (event) => {               \r\n            })\r\n\r\n            //Amortized\r\n            eventSource.addEventListener(\"amortized\", (event) => {\r\n                toast(ToastWithLink(\"Inventories\", \"fully amortized inventories\", \"/productdetails?Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            // UpdatedAmortizations\r\n            eventSource.addEventListener(\"updatedamortizations\", (event) => {\r\n                toast(ToastWithLink(\"Inventories\", \"total amortization updated for inventories\", \"/productdetails?Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            //AllDiscarded\r\n            eventSource.addEventListener(\"alldiscarded\", (event) => {\r\n                toast(ToastWithLink(\"Deliveries\", \"all discarded deliveries\", \"/deliveries?Filter.discarded=true&Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            //EmptyDeliveries\r\n            eventSource.addEventListener(\"emptydeliveries\", (event) => {\r\n                toast(ToastWithLink(\"Deliveries\", \"empty deliveries\", \"/deliveries?Filter.empty=true&Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            //cityRequest\r\n            eventSource.addEventListener(\"cityrequest\", (event) => {\r\n                toast(ToastWithLink(\"City Request\", \"new Register with city Request\", \"/pendingrequests?refresh\"),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            eventSource.onerror = (event) => {\r\n                if (event.target.readyState === EventSource.CLOSED) {\r\n                }\r\n            }\r\n\r\n            setListening(true);\r\n        }\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            console.log(\"eventsource closed\")\r\n        }\r\n\r\n    }, [])\r\n  \r\n\r\n    return (\r\n        <></>\r\n    );\r\n  \r\n}\r\n\r\nexport default EventListner;\r\n"]},"metadata":{},"sourceType":"module"}