{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\UserProfileInnerComponent.jsx\";\nimport React, { Component } from 'react';\nimport ProductDetailDataService from '../service/ProductDetailDataService';\nimport UserProfileDataService from '../service/UserProfileDataService';\nimport '../myStyles/Style.css';\nimport DatePicker from \"react-datepicker\";\nimport CustomSelect from './Filters/CustomSelect';\nimport ProductDetailFilter from './Filters/ProductDetailFilter';\n\nclass UserProfileInnerComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveUpdated = () => {\n      /*  let x = this.state.deliveryUpdateShow.x;\r\n        let items = this.state.items;\r\n        let item = items[x];\r\n          let show = this.state.deliveryUpdateShow;\r\n        let supplierId = show.delivery.supplierId;\r\n        let date = show.delivery.date;\r\n          // console.log(\"date.toISOString() = \" + date.toISOString());\r\n        // console.log(\"date = \" + date);\r\n        // console.log(\"new Date(item.date) = \" + new Date(item.date));\r\n        //console.log(\"new Date(item.date) === date \" +(new Date(item.date) === date ));\r\n          if (!date || !supplierId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else if (supplierId == item.supplierId && this.isDateEqual(date, item.date)) {\r\n            show.error = \"delivery hasn't changed\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else {\r\n            console.log(\"all good\");\r\n            let item = show.delivery;\r\n            //console.log(\"in submit delivery item = \" + JSON.stringify(item));\r\n            DeliveryDataService.save(item)\r\n                .then((response) => {\r\n                    console.log(\"delivery submit response = \" + response.data);\r\n                    //item.supplierName = (this.state.suppliers.filter(s => s.value == item.supplierId))[0].name;\r\n                    items[x] = item;\r\n                    //message = \"update successful\"\r\n                    this.props.setItems(items);\r\n                    this.props.updateClickedInner(null);\r\n                    let msg = this.state.message;\r\n                    msg = \"update successful\";\r\n                    this.props.setMessage(msg);\r\n                    //this.props.setdeliveryUpdateShow(null)\r\n                        //let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n                    // this.props.history.push(path)\r\n                }).catch((error) => {\r\n                    console.log(\"delivery submit error= \" + error.data);\r\n                    show.error = \"errors occured : \" + error + \" !!!\";\r\n                    this.setState({ deliveryUpdateShow: show })\r\n                })\r\n        }*/\n    };\n\n    this.onProductChange = selected => {\n      console.log(\"selected.value = \" + selected.value);\n      this.getNewSearch('productId', selected.value); // let search = this.getNewSearch('productId', selected.value);\n      //this.refresh(search)\n    };\n\n    this.getNewSearch = (name, value) => {\n      let search = this.state.lastSearch;\n      let newPath = ``;\n\n      if (search.length > 1) {\n        while (search.charAt(0) === '?') {\n          search = search.substring(1);\n        }\n\n        let searchItems = search.split('&');\n\n        for (let i = 0; i < searchItems.length; i++) {\n          if (!searchItems[i].startsWith(name)) newPath += searchItems[i] + '&';\n        }\n      }\n\n      if (value && value != 'undefined') newPath = '?' + newPath + name + '=' + value;else newPath = newPath.substring(0, newPath.length - 1);\n      console.log('newPath =' + newPath);\n      this.setState({\n        lastSearch: newPath\n      });\n      this.refresh(newPath); // return newPath;\n    };\n\n    this.oninventoryChange = selected => {};\n\n    this.onDateChange = date => {\n      console.log(\"selected = \" + date);\n\n      if (date) {\n        date = date.toISOString();\n        date = date.substring(0, date.indexOf('T'));\n      }\n      /*date = new Intl.DateTimeFormat(\"en-GB\", {\r\n          month: \"numeric\",\r\n          day: \"2-digit\",\r\n          year: \"numeric\",\r\n      }).format(new Date(date));*/\n\n\n      console.log(\"date = \" + date);\n      this.setState({\n        selectedDate: date\n      });\n      this.getNewSearch('dateCreatedAfter', date); // let search = \n    };\n\n    this.state = {\n      profileShow: props.profileShow,\n      items: props.items,\n      message: props.message,\n      filter: props.filter,\n      filteredNumbers: null,\n      lastSearch: '?isDiscarded=false&isAvailable=true&freeInventory=true',\n      selectedDate: null\n    };\n    this.refresh = this.refresh.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"user profile inner component did mount \"); // let search = '?isDiscarded=false&isAvailable=true&freeInventory=true';\n\n    this.refresh(this.state.lastSearch);\n  }\n\n  refresh(search) {\n    ProductDetailDataService.retrieveAllNumbers(search).then(response => {\n      console.log(\"got response\");\n      this.setState({\n        filteredNumbers: response.data\n      });\n      console.log(\"data length = \" + this.state.filteredNumbers.length);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.profileShow.show ? \"overlay d-block\" : \"d-none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.profileShow.show ? \"modal d-block\" : \"d-none\",\n        style: {\n          width: \"90%\",\n          height: \"90%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"close pt-3\",\n          onClick: () => this.props.updateClicked(null),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [this.state.profileShow.up ? 'Update' : 'Add', \" profile \\u2003(\", this.state.profileShow.profile.userName, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), this.state.profileShow.error && this.state.profileShow.error.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-warning d-flex\",\n          children: [this.state.profileShow.error, /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"fa fa-close ml-auto pr-3 pt-1\",\n            onClick: () => {\n              let show = this.state.profileShow;\n              show.error = '';\n              this.setState({\n                profileShow: show\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: this.state.profileShow.error && this.state.profileShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\",\n          children: \"date :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            className: \"form-control\",\n            dateFormat: \"dd MMMM yyyy\",\n            locale: \"en-GB\",\n            isClearable: true,\n            placeholderText: \"select Date!\",\n            selected: this.state.profileShow.profile.givenAt && new Date(this.state.profileShow.profile.givenAt) || new Date(),\n            onChange: date => {\n              this.onDateChange(date); //console.log(\"date changed = \" + date);                               \n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border mx-5 pt-3 b-r r-c\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"move-top\",\n            children: \"filter for inventory select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline px-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"\",\n              children: \"product : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              name: \"productId\",\n              className: \"inline inline-4 ml-0\",\n              items: this.state.filter.productNames,\n              onChange: selected => this.onProductChange(selected)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"\",\n              children: \"created after :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inline\",\n              children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                className: \"form-control inline inline-2-5 ml-0 pv-1 \",\n                dateFormat: \"dd MMMM yyyy\",\n                locale: \"en-GB\",\n                selected: this.state.selectedDate && new Date(this.state.selectedDate) || null,\n                onChange: selected => {\n                  this.onDateChange(selected);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline pl-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"\",\n              children: \"inventory : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4 ml-0\",\n              items: this.state.filteredNumbers || this.state.filter.inventoryNumbers,\n              onChange: selected => this.oninventoryChange(selected)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-mybtn px-5\",\n            onClick: this.saveUpdated,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-mybtn btn-delete px-5\",\n            onClick: () => this.props.updateClicked(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default UserProfileInnerComponent;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/UserProfileInnerComponent.jsx"],"names":["React","Component","ProductDetailDataService","UserProfileDataService","DatePicker","CustomSelect","ProductDetailFilter","UserProfileInnerComponent","constructor","props","saveUpdated","onProductChange","selected","console","log","value","getNewSearch","name","search","state","lastSearch","newPath","length","charAt","substring","searchItems","split","i","startsWith","setState","refresh","oninventoryChange","onDateChange","date","toISOString","indexOf","selectedDate","profileShow","items","message","filter","filteredNumbers","bind","componentDidMount","retrieveAllNumbers","then","response","data","render","show","width","height","updateClicked","up","profile","userName","error","givenAt","Date","productNames","inventoryNumbers"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport UserProfileDataService from '../service/UserProfileDataService'\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport ProductDetailFilter from './Filters/ProductDetailFilter';\r\n\r\n\r\nclass UserProfileInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                profileShow: props.profileShow,\r\n                items: props.items,\r\n                message: props.message,\r\n                filter: props.filter,\r\n            filteredNumbers: null,\r\n            lastSearch: '?isDiscarded=false&isAvailable=true&freeInventory=true',\r\n            selectedDate:null\r\n\r\n            }\r\n        this.refresh = this.refresh.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(\"user profile inner component did mount \")\r\n       // let search = '?isDiscarded=false&isAvailable=true&freeInventory=true';\r\n        this.refresh(this.state.lastSearch)\r\n       \r\n    }\r\n\r\n    refresh(search) {\r\n\r\n        ProductDetailDataService.retrieveAllNumbers(search)\r\n            .then(response => {\r\n                console.log(\"got response\");\r\n                this.setState({\r\n                    filteredNumbers: response.data\r\n                })\r\n                console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            })\r\n    }\r\n\r\n    saveUpdated = () => {\r\n      /*  let x = this.state.deliveryUpdateShow.x;\r\n        let items = this.state.items;\r\n        let item = items[x];\r\n\r\n        let show = this.state.deliveryUpdateShow;\r\n        let supplierId = show.delivery.supplierId;\r\n        let date = show.delivery.date;\r\n\r\n        // console.log(\"date.toISOString() = \" + date.toISOString());\r\n        // console.log(\"date = \" + date);\r\n        // console.log(\"new Date(item.date) = \" + new Date(item.date));\r\n        //console.log(\"new Date(item.date) === date \" +(new Date(item.date) === date ));\r\n\r\n        if (!date || !supplierId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else if (supplierId == item.supplierId && this.isDateEqual(date, item.date)) {\r\n            show.error = \"delivery hasn't changed\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else {\r\n            console.log(\"all good\");\r\n            let item = show.delivery;\r\n            //console.log(\"in submit delivery item = \" + JSON.stringify(item));\r\n            DeliveryDataService.save(item)\r\n                .then((response) => {\r\n                    console.log(\"delivery submit response = \" + response.data);\r\n                    //item.supplierName = (this.state.suppliers.filter(s => s.value == item.supplierId))[0].name;\r\n                    items[x] = item;\r\n                    //message = \"update successful\"\r\n                    this.props.setItems(items);\r\n                    this.props.updateClickedInner(null);\r\n                    let msg = this.state.message;\r\n                    msg = \"update successful\";\r\n                    this.props.setMessage(msg);\r\n                    //this.props.setdeliveryUpdateShow(null)\r\n\r\n\r\n                    //let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n                    // this.props.history.push(path)\r\n                }).catch((error) => {\r\n                    console.log(\"delivery submit error= \" + error.data);\r\n                    show.error = \"errors occured : \" + error + \" !!!\";\r\n                    this.setState({ deliveryUpdateShow: show })\r\n                })\r\n        }*/\r\n\r\n    }\r\n\r\n    onProductChange = (selected) => {\r\n\r\n        console.log(\"selected.value = \" + selected.value);\r\n        this.getNewSearch('productId', selected.value);\r\n       // let search = this.getNewSearch('productId', selected.value);\r\n        //this.refresh(search)\r\n        \r\n\r\n\r\n    }\r\n    getNewSearch = (name, value) => {\r\n\r\n        let search = this.state.lastSearch;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (!searchItems[i].startsWith(name))\r\n                    newPath += searchItems[i] + '&'               \r\n            }\r\n        }\r\n\r\n      \r\n        if(value && value !='undefined')\r\n            newPath = '?' + newPath + name + '=' + value;\r\n        else\r\n            newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log('newPath =' + newPath);\r\n        this.setState({ lastSearch: newPath })\r\n        this.refresh(newPath)\r\n       // return newPath;\r\n\r\n\r\n    }\r\n    oninventoryChange = (selected) => { }\r\n\r\n\r\n    onDateChange = (date) => {\r\n        console.log(\"selected = \" + date);\r\n       if(date) {\r\n            date = date.toISOString();\r\n            date = date.substring(0, date.indexOf('T'))\r\n        } \r\n        /*date = new Intl.DateTimeFormat(\"en-GB\", {\r\n            month: \"numeric\",\r\n            day: \"2-digit\",\r\n            year: \"numeric\",\r\n        }).format(new Date(date));*/\r\n        console.log(\"date = \" + date);\r\n        this.setState({ selectedDate: date });\r\n        this.getNewSearch('dateCreatedAfter', date);\r\n       // let search = \r\n        \r\n        \r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.profileShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.profileShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"90%\", height: \"90%\" }}>\r\n                    <span class=\"close pt-3\" onClick={() => this.props.updateClicked(null)}>&times;</span>\r\n                    <h2>{this.state.profileShow.up ? 'Update' : 'Add'} profile &emsp;({this.state.profileShow.profile.userName})</h2>\r\n                    {this.state.profileShow.error && this.state.profileShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.profileShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.profileShow;\r\n                                    show.error = '';\r\n                                    this.setState({ profileShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className={this.state.profileShow.error && this.state.profileShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>date :</h6> \r\n                    <div>\r\n                        <DatePicker\r\n                            className=\"form-control\"\r\n                            dateFormat=\"dd MMMM yyyy\"\r\n                            locale=\"en-GB\"     \r\n                            isClearable\r\n                            placeholderText=\"select Date!\"\r\n                            selected={(this.state.profileShow.profile.givenAt && new Date(this.state.profileShow.profile.givenAt))|| new Date()}\r\n                            onChange={date => {\r\n                                this.onDateChange(date);\r\n                                //console.log(\"date changed = \" + date);                               \r\n                            }} />\r\n                    </div>\r\n                    <div className=\"border mx-5 pt-3 b-r r-c\">\r\n                        <label className=\"move-top\">filter for inventory select</label>\r\n\r\n                        <div className=\"inline px-5\">\r\n                    <h6 className=\"\">product : </h6>\r\n                            <CustomSelect\r\n                                name=\"productId\"\r\n                        className={\"inline inline-4 ml-0\"}\r\n                        items={this.state.filter.productNames}                       \r\n                        onChange={(selected) => this.onProductChange(selected)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"inline\">\r\n                        <h6 className=\"\">created after :</h6>\r\n                        <div className=\"inline\">\r\n                        <DatePicker\r\n                                className=\"form-control inline inline-2-5 ml-0 pv-1 \"\r\n                            dateFormat=\"dd MMMM yyyy\"\r\n                                    locale=\"en-GB\"\r\n                                    selected={this.state.selectedDate && new Date(this.state.selectedDate)||null}\r\n                            onChange={selected => {                                \r\n                                 this.onDateChange(selected) \r\n                            }} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"inline pl-5\">\r\n                            <h6 className=\"\">inventory : </h6>\r\n                            <CustomSelect\r\n                                className={\"inline inline-4 ml-0\"}\r\n                                items={this.state.filteredNumbers || this.state.filter.inventoryNumbers}\r\n                                onChange={(selected) => this.oninventoryChange(selected)}\r\n                            />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div>\r\n                    <button className=\"btn btn-mybtn px-5\" onClick={this.saveUpdated}>Save</button>\r\n                        <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClicked(null)}>Cancel</button>\r\n                    </div>\r\n                    </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfileInnerComponent"]},"metadata":{},"sourceType":"module"}