{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\test-react-app\\\\src\\\\component\\\\LoginComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass LoginComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      hasLoginFailed: false,\n      showSuccessMsg: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.loginClicked = this.loginClicked.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  loginClicked() {\n    /*  if (this.state.username === 'aabi' && this.state.password === 'dummy') {\r\n          AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password)\r\n          this.setState({ showSuccessMsg: true })\r\n          ths.setState({ hasLoginFailed: false })\r\n      }\r\n      else {\r\n          this.setState({ showSuccessMsg: false })\r\n          this.setState({ hasLoginFailed : true })\r\n      }*/\n    console.log('loginClicked' + this.state.username + this.state.password);\n    AuthenticationService.executeAuthentication(this.state.username, this.state.password).then(response => {\n      console.log('response recieved ' + response.data.token);\n      this.setState({\n        showSuccessMsg: true\n      });\n      this.setState({\n        hasLoginFailed: false\n      });\n      AuthenticationService.registerSuccessfulLogin(this.state.username, response.data.token); // AuthenticationService.registerSuccessfullLogin(this.state.username,response.data.token)\n\n      this.props.history.push('/courses');\n    }).catch(() => {\n      console.log('catched sth ');\n      this.setState({\n        showSuccessMsg: false\n      });\n      this.setState({\n        hasLoginFailed: true\n      });\n    });\n  }\n  /*  render() {\r\n          let { username, password, hasLoginFailed, showSuccessMsg } = this.state\r\n          return (\r\n            <div>\r\n                <h1>Login</h1>\r\n                  <div className=\"container\">\r\n                      {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid user name and/or password</div>}\r\n                    {this.state.showSuccessMsg && <div>Login Successfull</div>}\r\n                      User Name:<br/>\r\n                    <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} /><br/>\r\n                    Password:<br/>\r\n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} /><br/>\r\n                      <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\r\n                  </div>\r\n              </div>\r\n            \r\n            )\r\n    }*/\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.username) {\n      errors.username = 'Enter user name';\n    } else if (values.username.length < 3) {\n      errors.username = 'Enter atleast 3 Characters for user name';\n    }\n\n    if (!values.password) {\n      errors.password = 'Enter password';\n    } else if (values.password.length < 6) {\n      errors.password = 'Enter atleast 6 Characters for password';\n    }\n\n    return errors;\n  }\n\n  render() {\n    let {\n      username,\n      password\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            username,\n            password\n          },\n          onSubmit: this.loginClicked,\n          validateOnChange: false,\n          validateOnBlur: false,\n          validate: this.validate,\n          enableReinitialize: true,\n          children: [this.state.hasLoginFailed && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-warning\",\n            children: \"Invalid user name and/or password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 55\n          }, this), this.state.showSuccessMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Login Successfull\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 55\n          }, this), props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"User Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"username\",\n                value: this.state.username,\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"username\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Password:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"password\",\n                name: \"password\",\n                value: this.state.password,\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"password\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LoginComponent;","map":{"version":3,"sources":["C:/Users/HP/test-react-app/src/component/LoginComponent.jsx"],"names":["React","Component","AuthenticationService","LoginComponent","constructor","props","state","username","password","hasLoginFailed","showSuccessMsg","handleChange","bind","loginClicked","event","setState","target","name","value","console","log","executeAuthentication","then","response","data","token","registerSuccessfulLogin","history","push","catch","validate","values","errors","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            hasLoginFailed: false,\r\n            showSuccessMsg: false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.loginClicked = this.loginClicked.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    loginClicked() {\r\n\r\n      /*  if (this.state.username === 'aabi' && this.state.password === 'dummy') {\r\n            AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password)\r\n            this.setState({ showSuccessMsg: true })\r\n            ths.setState({ hasLoginFailed: false })\r\n        }\r\n        else {\r\n            this.setState({ showSuccessMsg: false })\r\n            this.setState({ hasLoginFailed : true })\r\n        }*/\r\n\r\n        console.log('loginClicked' + this.state.username+ this.state.password)\r\n\r\n        AuthenticationService\r\n            .executeAuthentication(this.state.username, this.state.password)\r\n            .then((response) => {\r\n                console.log('response recieved '+response.data.token)\r\n                this.setState({ showSuccessMsg: true })\r\n                this.setState({ hasLoginFailed: false })\r\n                AuthenticationService.registerSuccessfulLogin(this.state.username,response.data.token)\r\n               // AuthenticationService.registerSuccessfullLogin(this.state.username,response.data.token)\r\n                this.props.history.push('/courses')\r\n            }).catch(() => {\r\n                console.log('catched sth ')\r\n\r\n        this.setState({ showSuccessMsg: false })\r\n        this.setState({ hasLoginFailed : true })\r\n        })           \r\n\r\n    }\r\n\r\n  /*  render() {\r\n\r\n        let { username, password, hasLoginFailed, showSuccessMsg } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <h1>Login</h1>\r\n\r\n                <div className=\"container\">\r\n\r\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid user name and/or password</div>}\r\n                    {this.state.showSuccessMsg && <div>Login Successfull</div>}\r\n\r\n                    User Name:<br/>\r\n                    <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} /><br/>\r\n                    Password:<br/>\r\n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} /><br/>\r\n\r\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            \r\n            )\r\n    }*/\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.username) {\r\n            errors.username = 'Enter user name'\r\n        } else if (values.username.length < 3) {\r\n            errors.username = 'Enter atleast 3 Characters for user name'\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Enter password'\r\n        } else if (values.password.length < 6) {\r\n            errors.password = 'Enter atleast 6 Characters for password'\r\n        }\r\n\r\n        return errors\r\n    }\r\n\r\n    render() {\r\n\r\n        let { username, password } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <h3>Login</h3>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ username, password }}\r\n                        onSubmit={this.loginClicked}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n\r\n                        {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid user name and/or password</div>}\r\n                        {this.state.showSuccessMsg && <div>Login Successfull</div>}\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>User Name:</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\r\n                                        <ErrorMessage name=\"username\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Password:</label>\r\n                                        <Field className=\"form-control\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                                        <ErrorMessage name=\"password\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n\r\n}\r\n\r\nexport default LoginComponent\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}