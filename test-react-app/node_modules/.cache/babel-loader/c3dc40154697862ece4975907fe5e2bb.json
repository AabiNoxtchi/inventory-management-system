{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\UserProfileInnerComponent.jsx\";\nimport React, { Component } from 'react';\nimport ProductDetailDataService from '../service/ProductDetailDataService';\nimport UserProfileDataService from '../service/UserProfileDataService';\nimport '../myStyles/Style.css';\nimport DatePicker from \"react-datepicker\";\nimport CustomSelect from './Filters/CustomSelect';\n\nclass UserProfileInnerComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveUpdated = () => {\n      /*  let x = this.state.deliveryUpdateShow.x;\r\n        let items = this.state.items;\r\n        let item = items[x];\r\n          let show = this.state.deliveryUpdateShow;\r\n        let supplierId = show.delivery.supplierId;\r\n        let date = show.delivery.date;\r\n          // console.log(\"date.toISOString() = \" + date.toISOString());\r\n        // console.log(\"date = \" + date);\r\n        // console.log(\"new Date(item.date) = \" + new Date(item.date));\r\n        //console.log(\"new Date(item.date) === date \" +(new Date(item.date) === date ));\r\n          if (!date || !supplierId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else if (supplierId == item.supplierId && this.isDateEqual(date, item.date)) {\r\n            show.error = \"delivery hasn't changed\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else {\r\n            console.log(\"all good\");\r\n            let item = show.delivery;\r\n            //console.log(\"in submit delivery item = \" + JSON.stringify(item));\r\n            DeliveryDataService.save(item)\r\n                .then((response) => {\r\n                    console.log(\"delivery submit response = \" + response.data);\r\n                    //item.supplierName = (this.state.suppliers.filter(s => s.value == item.supplierId))[0].name;\r\n                    items[x] = item;\r\n                    //message = \"update successful\"\r\n                    this.props.setItems(items);\r\n                    this.props.updateClickedInner(null);\r\n                    let msg = this.state.message;\r\n                    msg = \"update successful\";\r\n                    this.props.setMessage(msg);\r\n                    //this.props.setdeliveryUpdateShow(null)\r\n                        //let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n                    // this.props.history.push(path)\r\n                }).catch((error) => {\r\n                    console.log(\"delivery submit error= \" + error.data);\r\n                    show.error = \"errors occured : \" + error + \" !!!\";\r\n                    this.setState({ deliveryUpdateShow: show })\r\n                })\r\n        }*/\n    };\n\n    this.onDateChanged = date => {\n      let profileShow = this.state.profileShow;\n      profileShow.profile.givenAt = date;\n      this.setState({\n        profileShow: profileShow\n      });\n    };\n\n    this.state = {\n      profileShow: props.profileShow,\n      items: props.items,\n      message: props.message\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.profileShow.show ? \"overlay d-block\" : \"d-none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.profileShow.show ? \"modal d-block\" : \"d-none\",\n        style: {\n          width: \"60%\",\n          height: \"80%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"close\",\n          onClick: () => this.props.updateClicked(null),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [this.state.profileShow.up ? 'Update' : 'Add', \" profile\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), this.state.profileShow.error && this.state.profileShow.error.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-warning d-flex\",\n          children: [this.state.profileShow.error, /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"fa fa-close ml-auto pr-3 pt-1\",\n            onClick: () => {\n              let show = this.state.profileShow;\n              show.error = '';\n              this.setState({\n                profileShow: show\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: this.state.profileShow.error && this.state.profileShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\",\n          children: \"date :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            className: \"form-control\",\n            dateFormat: \"dd MMMM yyyy\",\n            locale: \"en-GB\" //selected={(values.date && new Date(values.date))}\n            ,\n            selected: this.state.profileShow.profile.givenAt && new Date(this.state.profileShow.profile.givenAt),\n            onChange: date => {\n              this.onDateChanged(date);\n              console.log(\"date changed = \" + date); //setFieldValue(\"date\", date)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-mybtn px-5\",\n          onClick: this.saveUpdated,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-mybtn btn-delete px-5\",\n          onClick: () => this.props.updateClicked(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default UserProfileInnerComponent;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/UserProfileInnerComponent.jsx"],"names":["React","Component","ProductDetailDataService","UserProfileDataService","DatePicker","CustomSelect","UserProfileInnerComponent","constructor","props","saveUpdated","onDateChanged","date","profileShow","state","profile","givenAt","setState","items","message","render","show","width","height","updateClicked","up","error","length","Date","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport UserProfileDataService from '../service/UserProfileDataService'\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\n\r\nclass UserProfileInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n            profileShow: props.profileShow,\r\n                items: props.items,\r\n                message: props.message,\r\n\r\n            }\r\n    }\r\n\r\n    saveUpdated = () => {\r\n      /*  let x = this.state.deliveryUpdateShow.x;\r\n        let items = this.state.items;\r\n        let item = items[x];\r\n\r\n        let show = this.state.deliveryUpdateShow;\r\n        let supplierId = show.delivery.supplierId;\r\n        let date = show.delivery.date;\r\n\r\n        // console.log(\"date.toISOString() = \" + date.toISOString());\r\n        // console.log(\"date = \" + date);\r\n        // console.log(\"new Date(item.date) = \" + new Date(item.date));\r\n        //console.log(\"new Date(item.date) === date \" +(new Date(item.date) === date ));\r\n\r\n        if (!date || !supplierId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else if (supplierId == item.supplierId && this.isDateEqual(date, item.date)) {\r\n            show.error = \"delivery hasn't changed\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else {\r\n            console.log(\"all good\");\r\n            let item = show.delivery;\r\n            //console.log(\"in submit delivery item = \" + JSON.stringify(item));\r\n            DeliveryDataService.save(item)\r\n                .then((response) => {\r\n                    console.log(\"delivery submit response = \" + response.data);\r\n                    //item.supplierName = (this.state.suppliers.filter(s => s.value == item.supplierId))[0].name;\r\n                    items[x] = item;\r\n                    //message = \"update successful\"\r\n                    this.props.setItems(items);\r\n                    this.props.updateClickedInner(null);\r\n                    let msg = this.state.message;\r\n                    msg = \"update successful\";\r\n                    this.props.setMessage(msg);\r\n                    //this.props.setdeliveryUpdateShow(null)\r\n\r\n\r\n                    //let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n                    // this.props.history.push(path)\r\n                }).catch((error) => {\r\n                    console.log(\"delivery submit error= \" + error.data);\r\n                    show.error = \"errors occured : \" + error + \" !!!\";\r\n                    this.setState({ deliveryUpdateShow: show })\r\n                })\r\n        }*/\r\n\r\n    }\r\n\r\n    onDateChanged = (date) => {\r\n\r\n        let profileShow = this.state.profileShow;\r\n        profileShow.profile.givenAt = date;\r\n        this.setState({\r\n            profileShow: profileShow\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.profileShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.profileShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"60%\", height: \"80%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClicked(null)}>&times;</span>\r\n                    <h2>{this.state.profileShow.up ? 'Update' : 'Add'} profile</h2>\r\n                    {this.state.profileShow.error && this.state.profileShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.profileShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.profileShow;\r\n                                    show.error = '';\r\n                                    this.setState({ profileShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className={this.state.profileShow.error && this.state.profileShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>date :</h6>\r\n                   \r\n                    <div>\r\n                        <DatePicker\r\n                            className=\"form-control\"\r\n\r\n                            dateFormat=\"dd MMMM yyyy\"\r\n                            locale=\"en-GB\"\r\n                            //selected={(values.date && new Date(values.date))}\r\n                            selected={(this.state.profileShow.profile.givenAt && new Date(this.state.profileShow.profile.givenAt))}\r\n                            onChange={date => {\r\n                                this.onDateChanged(date);\r\n                                console.log(\"date changed = \" + date);\r\n                                //setFieldValue(\"date\", date)\r\n                            }} />\r\n                    </div>\r\n                    \r\n\r\n\r\n                    <button className=\"btn btn-mybtn px-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClicked(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfileInnerComponent"]},"metadata":{},"sourceType":"module"}