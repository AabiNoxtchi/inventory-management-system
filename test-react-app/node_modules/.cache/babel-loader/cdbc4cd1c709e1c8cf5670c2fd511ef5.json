{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\Filters\\\\UserFilter.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CustomSelect from './CustomSelect';\nimport './Filter.css';\n\nclass UserFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      all: props.all,\n      firstNames: props.firstNames || [],\n      firstName: props.firstName,\n      lastNames: props.lastNames || [],\n      lastName: props.lastName,\n      userNames: props.userNames || [],\n      userName: props.userName,\n      emails: props.emails || [],\n      email: props.email,\n      cityId: props.cityId,\n      cities: props.cities,\n      filteredcities: props.countryId ? this.filter([], props.cities, props.countryId) : props.cities,\n      countryId: props.countryId,\n      countries: props.countries,\n      prefix: props.prefix,\n      userRole: props.userRole,\n      lastActiveBefore: props.lastActiveBefore\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  onSubmit(values) {\n    let path = window.location.pathname;\n    let search = window.location.search;\n    let newPath = ``;\n\n    if (search.length > 1) {\n      while (search.charAt(0) === '?') {\n        search = search.substring(1);\n      }\n\n      let searchItems = search.split('&');\n\n      for (let i = 0; i < searchItems.length; i++) {\n        if (searchItems[i].startsWith('Pager.itemsPerPage=')) newPath += searchItems[i] + '&';\n      }\n    }\n\n    let prefix = this.state.prefix;\n    Object.entries(values).map(([key, value]) => {\n      if (!key.endsWith(\"s\") && value && value != 'undefined' && value.length > 0) {\n        newPath += prefix + '.' + key + '=' + value + '&';\n      }\n    });\n    newPath = newPath.substring(0, newPath.length - 1);\n    newPath = path + '?' + newPath;\n    console.log('newPath =' + newPath); // window.location.href = newPath;\n  }\n\n  resetForm() {\n    /* this.setState({\r\n         all: '',\r\n         firstName: '',\r\n         lastName: '',\r\n         userName: '',\r\n         email: '',\r\n     });\r\n     console.log('in reset form ');*/\n    window.location.href = window.location.pathname;\n  }\n\n  filter(subs, names, value) {\n    subs = [];\n    if (!value || value == 'undefined') subs = names;else {\n      for (let i = 0; i < names.length; i++) {\n        if (names[i].filterBy == value || names[i].value == '') {\n          subs.push(names[i]);\n        }\n      }\n    }\n    return subs;\n  }\n\n  render() {\n    let {\n      all,\n      firstNames,\n      firstName,\n      lastNames,\n      lastName,\n      userNames,\n      userName,\n      emails,\n      email,\n      countryId,\n      filteredcities,\n      cityId,\n      lastActiveBefore\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        all,\n        firstNames,\n        firstName,\n        lastNames,\n        lastName,\n        userNames,\n        userName,\n        emails,\n        email,\n        countryId,\n        filteredcities,\n        cityId,\n        lastActiveBefore\n      },\n      onSubmit: this.onSubmit,\n      enableReinitialize: true,\n      children: ({\n        props,\n        setFieldValue,\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-form\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"first name\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 34\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-2-5\",\n              items: firstNames,\n              value: values.firstName,\n              onChange: selected => setFieldValue(\"firstName\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 34\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"last name\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 34\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-2-5\",\n              items: lastNames,\n              value: values.lastName,\n              onChange: selected => setFieldValue(\"lastName\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"user name\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-2-5\",\n              name: \"userNames\",\n              items: userNames,\n              value: values.userName,\n              onChange: selected => setFieldValue(\"userName\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"email\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-3\",\n              items: emails,\n              value: values.email,\n              onChange: selected => setFieldValue(\"email\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this), this.state.userRole == 'ROLE_Admin' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inline\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"country\\xA0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n                className: \"inline inline-3\",\n                items: this.state.countries,\n                value: values.countryId,\n                onChange: selected => {\n                  setFieldValue(\"countryId\", selected.value);\n                  let subs = this.filter([], this.state.cities, selected.value);\n                  setFieldValue(\"filteredcities\", subs);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inline\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"city\\xA0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n                className: \"inline inline-3\",\n                items: values.filteredcities,\n                value: values.cityId,\n                onChange: selected => setFieldValue(\"cityId\", selected.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button px-5\",\n              type: \"submit\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 32\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button btn-delete\",\n              type: \"button\",\n              onClick: this.resetForm,\n              children: \"reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserFilter;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/Filters/UserFilter.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","CustomSelect","UserFilter","constructor","props","state","all","firstNames","firstName","lastNames","lastName","userNames","userName","emails","email","cityId","cities","filteredcities","countryId","filter","countries","prefix","userRole","lastActiveBefore","onSubmit","bind","resetForm","values","path","window","location","pathname","search","newPath","length","charAt","substring","searchItems","split","i","startsWith","Object","entries","map","key","value","endsWith","console","log","href","subs","names","filterBy","push","render","setFieldValue","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nclass UserFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all:props.all,\r\n            firstNames: props.firstNames || [],\r\n            firstName: props.firstName,\r\n            lastNames: props.lastNames || [],\r\n            lastName: props.lastName,\r\n            userNames: props.userNames || [],\r\n            userName: props.userName,\r\n            emails: props.emails || [],\r\n            email: props.email,\r\n            cityId: props.cityId,\r\n            cities: props.cities,\r\n            filteredcities: props.countryId ? this.filter([], props.cities, props.countryId) : props.cities,\r\n            countryId: props.countryId,\r\n            countries: props.countries,\r\n            prefix: props.prefix,\r\n            userRole: props.userRole,\r\n            lastActiveBefore: props.lastActiveBefore\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'               \r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined' && value.length>0) {\r\n                newPath += prefix + '.' + key +'='+ value+'&'\r\n            }\r\n           \r\n        })\r\n        newPath = newPath.substring(0, newPath.length-1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n       // window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n       /* this.setState({\r\n            all: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            userName: '',\r\n            email: '',\r\n        });\r\n        console.log('in reset form ');*/\r\n\r\n        window.location.href = window.location.pathname;\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (!value || value == 'undefined') subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value || names[i].value == '') {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {  \r\n\r\n        let { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email, countryId, filteredcities, cityId, lastActiveBefore } = this.state\r\n        return (                        \r\n               \r\n            <Formik\r\n                initialValues={{ all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email, countryId, filteredcities, cityId, lastActiveBefore }}\r\n                        onSubmit={this.onSubmit}                       \r\n                        enableReinitialize={true}\r\n                >\r\n                {({ props, setFieldValue, values}) => (\r\n                    <Form className=\"filter-form\">\r\n                            <fieldset >\r\n                                 <div className=\"inline\">\r\n                                 <label>first name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                        items={firstNames}\r\n                                        value={values.firstName}\r\n                                        onChange={(selected) => setFieldValue(\"firstName\", selected.value)}\r\n                                />\r\n                            </div>  \r\n                            <div className=\"inline\">\r\n                                 <label >last name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                        items={lastNames}\r\n                                        value={values.lastName}\r\n                                        onChange={(selected) => setFieldValue(\"lastName\", selected.value)}\r\n                                />\r\n                            </div>\r\n                                <div className=\"inline\">\r\n                                <label>user name&nbsp;</label>\r\n                                <CustomSelect  \r\n                                    className={\"inline inline-2-5\"}\r\n                                                        name=\"userNames\"\r\n                                       items={userNames}\r\n                                        value={values.userName}\r\n                                        onChange={(selected) => setFieldValue(\"userName\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >email&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                      items={emails}\r\n                                      value={values.email}\r\n                                      onChange={(selected) =>setFieldValue(\"email\", selected.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            {this.state.userRole == 'ROLE_Admin' &&\r\n                                <>\r\n                                <div className=\"inline\">\r\n                                <label >country&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                    items={this.state.countries}\r\n                                    value={values.countryId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"countryId\", selected.value);\r\n                                        let subs = this.filter([], this.state.cities, selected.value);\r\n                                        setFieldValue(\"filteredcities\", subs);\r\n                                    }\r\n                                    }\r\n                                />\r\n                                </div>\r\n                            <div className=\"inline\">\r\n                                <label >city&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                    items={values.filteredcities}\r\n                                    value={values.cityId}\r\n                                    onChange={(selected) => setFieldValue(\"cityId\", selected.value)}\r\n                                />\r\n                                </div>\r\n                                </>\r\n                            }\r\n                            <div className=\"inline\">                                 \r\n                               <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                            </fieldset>\r\n                         </Form>\r\n                       )\r\n                    }\r\n                 </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserFilter"]},"metadata":{},"sourceType":"module"}