{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\nconst AUTH_API_URL = `${API_URL}/api/inventory/auth/signin`;\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUserName';\nexport const USER_ROLE_SESSION_ATTRIBUTE_NAME = 'authenticatedUserRole';\nexport const USER_TOKEN_SESSION_ATTRIBUTE_NAME = 'authenticatedUserToken';\nexport const USER_ID_SESSION_ATTRIBUTE_NAME = 'authenticatedUserId';\n\nclass AuthenticationService {\n  executeAuthentication(username, password) {\n    return axios.post(`${AUTH_API_URL}`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLogin(username, token, role, id) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(USER_ROLE_SESSION_ATTRIBUTE_NAME, role);\n    sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, this.createToken(token));\n    sessionStorage.setItem(USER_ID_SESSION_ATTRIBUTE_NAME, id);\n  }\n\n  setRegister(data) {\n    sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, this.createToken(data.jwtToken));\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, data.userName);\n  }\n\n  createToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(USER_ROLE_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(USER_ID_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\n    return true;\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedUerName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  getLoggedUerId() {\n    let id = sessionStorage.getItem(USER_ID_SESSION_ATTRIBUTE_NAME);\n    if (id === null) return '';\n    return id;\n  }\n\n  getLoggedUerRole() {\n    let role = sessionStorage.getItem(USER_ROLE_SESSION_ATTRIBUTE_NAME);\n    if (role === null) return '';\n    return role;\n  }\n\n  getLoggedUerToken() {\n    let token = sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\n    if (token === null) return '';\n    return token;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/service/AuthenticationService.js"],"names":["axios","API_URL","AUTH_API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","USER_ROLE_SESSION_ATTRIBUTE_NAME","USER_TOKEN_SESSION_ATTRIBUTE_NAME","USER_ID_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeAuthentication","username","password","post","registerSuccessfulLogin","token","role","id","sessionStorage","setItem","createToken","setRegister","data","jwtToken","userName","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedUerName","getLoggedUerId","getLoggedUerRole","getLoggedUerToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,YAAY,GAAI,GAAED,OAAQ,4BAAhC;AAEA,OAAO,MAAME,gCAAgC,GAAG,uBAAzC;AACP,OAAO,MAAMC,gCAAgC,GAAG,uBAAzC;AACP,OAAO,MAAMC,iCAAiC,GAAG,wBAA1C;AACP,OAAO,MAAMC,8BAA8B,GAAG,qBAAvC;;AAGP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACtC,WAAOV,KAAK,CAACW,IAAN,CAAY,GAAET,YAAa,EAA3B,EAA8B;AACjCO,MAAAA,QADiC;AAEjCC,MAAAA;AAFiC,KAA9B,CAAP;AAIH;;AAEDE,EAAAA,uBAAuB,CAACH,QAAD,EAAWI,KAAX,EAAkBC,IAAlB,EAAwBC,EAAxB,EAA4B;AAE/CC,IAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDM,QAAzD;AACAO,IAAAA,cAAc,CAACC,OAAf,CAAuBb,gCAAvB,EAAyDU,IAAzD;AACAE,IAAAA,cAAc,CAACC,OAAf,CAAuBZ,iCAAvB,EAA0D,KAAKa,WAAL,CAAiBL,KAAjB,CAA1D;AACAG,IAAAA,cAAc,CAACC,OAAf,CAAuBX,8BAAvB,EAAuDS,EAAvD;AACH;;AAEDI,EAAAA,WAAW,CAACC,IAAD,EAAO;AACdJ,IAAAA,cAAc,CAACC,OAAf,CAAuBZ,iCAAvB,EAA0D,KAAKa,WAAL,CAAiBE,IAAI,CAACC,QAAtB,CAA1D;AACAL,IAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDiB,IAAI,CAACE,QAA9D;AACH;;AAEDJ,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACf,WAAO,YAAYA,KAAnB;AACH;;AAEDU,EAAAA,MAAM,GAAG;AACLP,IAAAA,cAAc,CAACQ,UAAf,CAA0BrB,gCAA1B;AACAa,IAAAA,cAAc,CAACQ,UAAf,CAA0BpB,gCAA1B;AACAY,IAAAA,cAAc,CAACQ,UAAf,CAA0BlB,8BAA1B;AACAU,IAAAA,cAAc,CAACQ,UAAf,CAA0BnB,iCAA1B;AACA,WAAO,IAAP;AACH;;AAEDoB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGV,cAAc,CAACW,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAIuB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,gBAAgB,GAAG;AACf,QAAIF,IAAI,GAAGV,cAAc,CAACW,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAIuB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDG,EAAAA,cAAc,GAAG;AACb,QAAId,EAAE,GAAGC,cAAc,CAACW,OAAf,CAAuBrB,8BAAvB,CAAT;AACA,QAAIS,EAAE,KAAK,IAAX,EAAiB,OAAO,EAAP;AACjB,WAAOA,EAAP;AACH;;AAEDe,EAAAA,gBAAgB,GAAG;AACf,QAAIhB,IAAI,GAAGE,cAAc,CAACW,OAAf,CAAuBvB,gCAAvB,CAAX;AACA,QAAIU,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDiB,EAAAA,iBAAiB,GAAG;AAChB,QAAIlB,KAAK,GAAGG,cAAc,CAACW,OAAf,CAAuBtB,iCAAvB,CAAZ;AACA,QAAIQ,KAAK,KAAK,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,KAAP;AACH;;AA9DuB;;AAmE5B,eAAe,IAAIN,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080'\r\nconst AUTH_API_URL = `${API_URL}/api/inventory/auth/signin`\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUserName'\r\nexport const USER_ROLE_SESSION_ATTRIBUTE_NAME = 'authenticatedUserRole'\r\nexport const USER_TOKEN_SESSION_ATTRIBUTE_NAME = 'authenticatedUserToken'\r\nexport const USER_ID_SESSION_ATTRIBUTE_NAME = 'authenticatedUserId'\r\n\r\n\r\nclass AuthenticationService {\r\n\r\n    executeAuthentication(username, password) {\r\n        return axios.post(`${AUTH_API_URL}`, {\r\n            username,\r\n            password\r\n        });\r\n    }\r\n\r\n    registerSuccessfulLogin(username, token, role, id) {\r\n\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        sessionStorage.setItem(USER_ROLE_SESSION_ATTRIBUTE_NAME, role)\r\n        sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, this.createToken(token))\r\n        sessionStorage.setItem(USER_ID_SESSION_ATTRIBUTE_NAME, id)      \r\n    }\r\n\r\n    setRegister(data) {\r\n        sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, this.createToken(data.jwtToken))\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, data.userName)\r\n    }\r\n\r\n    createToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_ROLE_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_ID_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\r\n        return true;\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedUerName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    getLoggedUerId() {\r\n        let id = sessionStorage.getItem(USER_ID_SESSION_ATTRIBUTE_NAME)\r\n        if (id === null) return ''\r\n        return id\r\n    }\r\n\r\n    getLoggedUerRole() {\r\n        let role = sessionStorage.getItem(USER_ROLE_SESSION_ATTRIBUTE_NAME)\r\n        if (role === null) return ''\r\n        return role\r\n    }\r\n\r\n    getLoggedUerToken() {\r\n        let token = sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME)\r\n        if (token === null) return ''\r\n        return token\r\n    }\r\n\r\n  \r\n}\r\n\r\nexport default new AuthenticationService()\r\n\r\n"]},"metadata":{},"sourceType":"module"}