{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\ProductComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport ProductDataService from '../service/ProductDataService';\nimport '../myStyles/Style.css';\nimport CustomSelect from './Filters/CustomSelect';\n\nclass ProductComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      name: '',\n      description: '',\n      productType: '',\n      productTypes: [],\n      userCategoryId: '',\n      userCategories: [],\n      filteredUserCategories: [],\n      //categories: [],           \n      amortizationPercent: '',\n      maxamortization: 100 // selectedCategoryId: '',\n\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.cancelForm = this.cancelForm.bind(this);\n  }\n\n  componentDidMount() {\n    ProductDataService.retrieve(this.state.id).then(response => {\n      console.log('got response in component did mount');\n\n      if (this.state.id > 0) {\n        this.setState({\n          name: response.data.name,\n          description: response.data.description,\n          productType: response.data.productType,\n          userCategoryId: response.data.userCategoryId,\n          //response.data.productType == 'DMA' ? response.data.subCategory : '',\n          // selectedCategoryId: response.data.productType == 'DMA' ? response.data.subCategory.category.id : '',\n          amortizationPercent: response.data.productType == 'DMA' ? response.data.amortizationPercent : ''\n        });\n      }\n\n      this.setState({\n        productTypes: response.data.productTypes,\n        userCategories: response.data.userCategories,\n        filteredUserCategories: response.data.userCategories //categories: response.data.categories,\n\n      });\n    });\n  }\n\n  onSubmit(values) {\n    let item = {\n      id: this.state.id,\n      name: values.name,\n      description: values.description,\n      productType: values.productType,\n      subCategory: values.productType == 'DMA' ? values.subCategory : null,\n      amortizationPercent: values.productType == 'DMA' ? values.amortizationPercent : null,\n      targetDate: values.targetDate\n    };\n    ProductDataService.save(item).then(() => this.props.history.push('/products'));\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = 'required field !!!';\n    } else if (values.name.length < 5) {\n      errors.userName = 'Enter atleast 5 Characters';\n    }\n\n    if (!values.productType) {\n      errors.productType = 'required field !!!';\n    }\n\n    if (values.productType === 'DMA') {\n      if (!values.categories) errors.categories = 'required field !!!';\n\n      if (!values.subCategory) {\n        errors.subCategory = 'required field !!!';\n      }\n\n      if (!values.amortizationPercent) {\n        errors.amortizationPercent = 'required field !!!';\n      }\n    }\n\n    return errors;\n  }\n\n  cancelForm() {\n    //this.props.history.push('/products')\n    window.history.back();\n  }\n\n  render() {\n    console.log('rendering');\n    let {\n      id,\n      name,\n      description,\n      productType,\n      productTypes,\n      amortizationPercent,\n\n      /*categories,*/\n      userCategoryId,\n      userCategories,\n      filteredUserCategories,\n      maxamortization\n      /*, selectedCategoryId*/\n\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [this.state.id > 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3\",\n        children: \" Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3\",\n        children: \" Add New Product \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 82\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          id,\n          name,\n          description,\n          productType,\n          productTypes,\n          amortizationPercent,\n          userCategoryId,\n\n          /*categories,*/\n          userCategories,\n          filteredUserCategories,\n          maxamortization\n          /*, selectedCategoryId*/\n\n        },\n        onSubmit: this.onSubmit,\n        validateOnChange: false,\n        validateOnBlur: false,\n        validate: this.validate,\n        enableReinitialize: true,\n        children: ({\n          setFieldValue,\n          values\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            className: \"form-control\",\n            type: \"text\",\n            name: \"id\",\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control w-25\",\n              type: \"text\",\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"name\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control w-50\",\n              as: \"textarea\",\n              type: \"textarea\",\n              name: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"product type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 37\n            }, this), productTypes.map(type => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"mx-3\",\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: \"mx-1\",\n                type: \"radio\",\n                name: \"productType\",\n                value: type.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 49\n              }, this), type.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 45\n            }, this)), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"productType\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }, this), values.productType == 'DMA' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n                id: \"selectedCategoryId\",\n                name: \"selectedCategoryId\",\n                className: \"w-50\",\n                items: categories,\n                value: subCategory !== '' ? subCategory.category.id : '',\n                onChange: value => {\n                  setFieldValue(\"selectedCategoryId\", value.value);\n                  setFieldValue(\"amortizationPercent\", '');\n                  setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\n                  let subs = [];\n\n                  for (let i = 0; i < values.subCategories.length; i++) {\n                    if (values.subCategories[i].category.id == value.value) {\n                      subs.push(values.subCategories[i]);\n                    }\n                  }\n\n                  setFieldValue(\"filteredSubCategories\", subs);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \" selectedCategoryId\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 37\n          }, this) : null, values.selectedCategoryId != '' && values.productType == 'DMA' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"sub category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n                name: \"subCategory\",\n                className: \"w-50\",\n                items: values.filteredSubCategories //categories.find(c => c.id == values.selectedCategoryId).subCategories}\n                ,\n                value: subCategory !== '' ? subCategory.id : '',\n                onChange: value => {\n                  let sub = values.filteredSubCategories.find(s => s.id == value.value);\n                  setFieldValue(\"subCategory\", sub);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \" selectedCategoryId\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"amortization percent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control w-50\",\n                min: \"0\",\n                max: values.maxamortization,\n                type: \"number\",\n                name: \"amortizationPercent\",\n                placeholder: \"max =\" + values.maxamortization\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"amortizationPercent\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 41\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-mybtn px-5\",\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-mybtn btn-delete px-5 ml-5\",\n            type: \"button\",\n            onClick: this.cancelForm,\n            children: \"cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ProductComponent;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/ProductComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","ProductDataService","CustomSelect","ProductComponent","constructor","props","state","id","match","params","name","description","productType","productTypes","userCategoryId","userCategories","filteredUserCategories","amortizationPercent","maxamortization","onSubmit","bind","validate","cancelForm","componentDidMount","retrieve","then","response","console","log","setState","data","values","item","subCategory","targetDate","save","history","push","errors","length","userName","categories","window","back","render","setFieldValue","map","type","value","category","find","c","subs","i","subCategories","selectedCategoryId","filteredSubCategories","sub","s"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAO,uBAAP;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;AAEA,MAAMC,gBAAN,SAA+BP,SAA/B,CAAyC;AACrCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,EAAE,EAAE,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,EADnB;AAETG,MAAAA,IAAI,EAAE,EAFG;AAGTC,MAAAA,WAAW,EAAE,EAHJ;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,YAAY,EAAE,EALL;AAMTC,MAAAA,cAAc,EAAE,EANP;AAOTC,MAAAA,cAAc,EAAE,EAPP;AAQTC,MAAAA,sBAAsB,EAAC,EARd;AAST;AACAC,MAAAA,mBAAmB,EAAE,EAVZ;AAWTC,MAAAA,eAAe,EAAE,GAXR,CAYV;;AAZU,KAAb;AAcA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDG,EAAAA,iBAAiB,GAAG;AAEhBtB,IAAAA,kBAAkB,CAACuB,QAAnB,CAA4B,KAAKlB,KAAL,CAAWC,EAAvC,EACKkB,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;;AACA,UAAI,KAAKtB,KAAL,CAAWC,EAAX,GAAgB,CAApB,EAAuB;AACnB,aAAKsB,QAAL,CAAc;AACVnB,UAAAA,IAAI,EAAEgB,QAAQ,CAACI,IAAT,CAAcpB,IADV;AAEVC,UAAAA,WAAW,EAAEe,QAAQ,CAACI,IAAT,CAAcnB,WAFjB;AAGVC,UAAAA,WAAW,EAAEc,QAAQ,CAACI,IAAT,CAAclB,WAHjB;AAIVE,UAAAA,cAAc,EAAEY,QAAQ,CAACI,IAAT,CAAchB,cAJpB;AAImC;AAC9C;AACCG,UAAAA,mBAAmB,EAAES,QAAQ,CAACI,IAAT,CAAclB,WAAd,IAA6B,KAA7B,GAAqCc,QAAQ,CAACI,IAAT,CAAcb,mBAAnD,GAAyE;AANpF,SAAd;AAQH;;AACD,WAAKY,QAAL,CAAc;AACVhB,QAAAA,YAAY,EAAEa,QAAQ,CAACI,IAAT,CAAcjB,YADlB;AAEVE,QAAAA,cAAc,EAAEW,QAAQ,CAACI,IAAT,CAAcf,cAFpB;AAGVC,QAAAA,sBAAsB,EAAEU,QAAQ,CAACI,IAAT,CAAcf,cAH5B,CAIV;;AAJU,OAAd;AAMH,KAnBL;AAoBH;;AAEDI,EAAAA,QAAQ,CAACY,MAAD,EAAS;AACb,QAAIC,IAAI,GAAG;AACPzB,MAAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,EADR;AAEPG,MAAAA,IAAI,EAAEqB,MAAM,CAACrB,IAFN;AAGPC,MAAAA,WAAW,EAAEoB,MAAM,CAACpB,WAHb;AAIPC,MAAAA,WAAW,EAAEmB,MAAM,CAACnB,WAJb;AAKPqB,MAAAA,WAAW,EAAEF,MAAM,CAACnB,WAAP,IAAsB,KAAtB,GAA8BmB,MAAM,CAACE,WAArC,GAAmD,IALzD;AAMPhB,MAAAA,mBAAmB,EAAEc,MAAM,CAACnB,WAAP,IAAsB,KAAtB,GAA8BmB,MAAM,CAACd,mBAArC,GAA2D,IANzE;AAOPiB,MAAAA,UAAU,EAAEH,MAAM,CAACG;AAPZ,KAAX;AASDjC,IAAAA,kBAAkB,CAACkC,IAAnB,CAAwBH,IAAxB,EACMP,IADN,CACW,MAAM,KAAKpB,KAAL,CAAW+B,OAAX,CAAmBC,IAAnB,CAAwB,WAAxB,CADjB;AAEF;;AAEDhB,EAAAA,QAAQ,CAACU,MAAD,EAAS;AACb,QAAIO,MAAM,GAAG,EAAb;;AACA,QAAI,CAACP,MAAM,CAACrB,IAAZ,EAAkB;AACd4B,MAAAA,MAAM,CAAC5B,IAAP,GAAc,oBAAd;AACH,KAFD,MAEO,IAAIqB,MAAM,CAACrB,IAAP,CAAY6B,MAAZ,GAAqB,CAAzB,EAA4B;AAC/BD,MAAAA,MAAM,CAACE,QAAP,GAAkB,4BAAlB;AACH;;AAED,QAAI,CAACT,MAAM,CAACnB,WAAZ,EAAyB;AACrB0B,MAAAA,MAAM,CAAC1B,WAAP,GAAqB,oBAArB;AACH;;AAED,QAAImB,MAAM,CAACnB,WAAP,KAAuB,KAA3B,EAAkC;AAE9B,UAAI,CAACmB,MAAM,CAACU,UAAZ,EACIH,MAAM,CAACG,UAAP,GAAoB,oBAApB;;AACJ,UAAI,CAACV,MAAM,CAACE,WAAZ,EAAyB;AACrBK,QAAAA,MAAM,CAACL,WAAP,GAAqB,oBAArB;AACH;;AACD,UAAI,CAACF,MAAM,CAACd,mBAAZ,EAAiC;AAC7BqB,QAAAA,MAAM,CAACrB,mBAAP,GAA6B,oBAA7B;AACH;AACJ;;AACD,WAAOqB,MAAP;AACH;;AAEDhB,EAAAA,UAAU,GAAG;AACT;AACAoB,IAAAA,MAAM,CAACN,OAAP,CAAeO,IAAf;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLjB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAI;AAAErB,MAAAA,EAAF;AAAMG,MAAAA,IAAN;AAAYC,MAAAA,WAAZ;AAAyBC,MAAAA,WAAzB;AAAsCC,MAAAA,YAAtC;AAAoDI,MAAAA,mBAApD;;AAAyE;AAAgBH,MAAAA,cAAzF;AAAyGC,MAAAA,cAAzG;AACAC,MAAAA,sBADA;AACwBE,MAAAA;AAAe;;AADvC,QACoE,KAAKZ,KAD7E;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACK,KAAKA,KAAL,CAAWC,EAAX,GAAgB,CAAhB,gBAAoB;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApB,gBAAgE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADrE,eAEI,QAAC,MAAD;AACI,QAAA,aAAa,EAAE;AACXA,UAAAA,EADW;AACPG,UAAAA,IADO;AACDC,UAAAA,WADC;AACYC,UAAAA,WADZ;AACyBC,UAAAA,YADzB;AACuCI,UAAAA,mBADvC;AAC4DH,UAAAA,cAD5D;;AAC4E;AACvFC,UAAAA,cAFW;AAEKC,UAAAA,sBAFL;AAE6BE,UAAAA;AAAe;;AAF5C,SADnB;AAKI,QAAA,QAAQ,EAAE,KAAKC,QALnB;AAMI,QAAA,gBAAgB,EAAE,KANtB;AAOI,QAAA,cAAc,EAAE,KAPpB;AAQI,QAAA,QAAQ,EAAE,KAAKE,QARnB;AASI,QAAA,kBAAkB,EAAE,IATxB;AAAA,kBAYQ,CAAC;AAAEwB,UAAAA,aAAF;AAAiBd,UAAAA;AAAjB,SAAD,kBACI,QAAC,IAAD;AAAA,kCACI,QAAC,KAAD;AAAO,YAAA,SAAS,EAAC,cAAjB;AAAgC,YAAA,IAAI,EAAC,MAArC;AAA4C,YAAA,IAAI,EAAC,IAAjD;AAAsD,YAAA,MAAM;AAA5D;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAU,YAAA,SAAS,EAAC,YAApB;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,SAAS,EAAC,mBAAjB;AAAqC,cAAA,IAAI,EAAC,MAA1C;AAAiD,cAAA,IAAI,EAAC;AAAtD;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAII,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,MAAnB;AAA0B,cAAA,SAAS,EAAC,KAApC;AACI,cAAA,SAAS,EAAC;AADd;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eASI;AAAU,YAAA,SAAS,EAAC,YAApB;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,SAAS,EAAC,mBAAjB;AAAqC,cAAA,EAAE,EAAC,UAAxC;AAAmD,cAAA,IAAI,EAAC,UAAxD;AAAmE,cAAA,IAAI,EAAC;AAAxE;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,aAAnB;AAAiC,cAAA,SAAS,EAAC,KAA3C;AACI,cAAA,SAAS,EAAC;AADd;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ,eAeI;AAAU,YAAA,SAAS,EAAC,YAApB;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAGQlB,YAAY,CAACiC,GAAb,CAAkBC,IAAD,iBACb;AAAO,cAAA,SAAS,EAAC,MAAjB;AAAA,sCACI,QAAC,KAAD;AACI,gBAAA,SAAS,EAAC,MADd;AAEI,gBAAA,IAAI,EAAC,OAFT;AAEiB,gBAAA,IAAI,EAAC,aAFtB;AAEoC,gBAAA,KAAK,EAAEA,IAAI,CAACC;AAFhD;AAAA;AAAA;AAAA;AAAA,sBADJ,EAMKD,IAAI,CAACrC,IANV;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAHR,eAcI,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,aAAnB;AAAiC,cAAA,SAAS,EAAC,KAA3C;AACI,cAAA,SAAS,EAAC;AADd;AAAA;AAAA;AAAA;AAAA,oBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfJ,EAiCQqB,MAAM,CAACnB,WAAP,IAAoB,KAApB,gBAEA;AAAA,mCACA;AAAU,cAAA,SAAS,EAAC,YAApB;AAAA,sCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEY,QAAC,YAAD;AACI,gBAAA,EAAE,EAAC,oBADP;AAEI,gBAAA,IAAI,EAAC,oBAFT;AAGI,gBAAA,SAAS,EAAE,MAHf;AAII,gBAAA,KAAK,EAAE6B,UAJX;AAKI,gBAAA,KAAK,EAAER,WAAW,KAAK,EAAhB,GAAqBA,WAAW,CAACgB,QAAZ,CAAqB1C,EAA1C,GAA+C,EAL1D;AAMI,gBAAA,QAAQ,EAAGyC,KAAD,IAAW;AACjBH,kBAAAA,aAAa,CAAC,oBAAD,EAAuBG,KAAK,CAACA,KAA7B,CAAb;AACAH,kBAAAA,aAAa,CAAC,qBAAD,EAAwB,EAAxB,CAAb;AACAA,kBAAAA,aAAa,CAAC,iBAAD,EAAoBJ,UAAU,CAACS,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAAC5C,EAAF,IAAQyC,KAAK,CAACA,KAAnC,EAA0C/B,mBAA9D,CAAb;AAEA,sBAAImC,IAAI,GAAG,EAAX;;AACA,uBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,MAAM,CAACuB,aAAP,CAAqBf,MAAzC,EAAiDc,CAAC,EAAlD,EAAsD;AAElD,wBAAItB,MAAM,CAACuB,aAAP,CAAqBD,CAArB,EAAwBJ,QAAxB,CAAiC1C,EAAjC,IAAuCyC,KAAK,CAACA,KAAjD,EAAwD;AACpDI,sBAAAA,IAAI,CAACf,IAAL,CAAUN,MAAM,CAACuB,aAAP,CAAqBD,CAArB,CAAV;AACH;AACJ;;AACDR,kBAAAA,aAAa,CAAC,uBAAD,EAA0BO,IAA1B,CAAb;AACH;AAnBL;AAAA;AAAA;AAAA;AAAA,sBAFZ,eAyBI,QAAC,YAAD;AAAc,gBAAA,IAAI,EAAC,qBAAnB;AAAyC,gBAAA,SAAS,EAAC,KAAnD;AACI,gBAAA,SAAS,EAAC;AADd;AAAA;AAAA;AAAA;AAAA,sBAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAFA,GAgCI,IAjEZ,EAmEKrB,MAAM,CAACwB,kBAAP,IAA6B,EAA7B,IAAmCxB,MAAM,CAACnB,WAAP,IAAsB,KAAzD,gBACO;AAAA,oCACA;AAAU,cAAA,SAAS,EAAC,YAApB;AAAA,sCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,eAEA,QAAC,YAAD;AACY,gBAAA,IAAI,EAAC,aADjB;AAEY,gBAAA,SAAS,EAAE,MAFvB;AAGY,gBAAA,KAAK,EAAEmB,MAAM,CAACyB,qBAH1B,CAGgD;AAHhD;AAIY,gBAAA,KAAK,EAAEvB,WAAW,KAAK,EAAhB,GAAqBA,WAAW,CAAC1B,EAAjC,GAAsC,EAJzD;AAKY,gBAAA,QAAQ,EAAGyC,KAAD,IAAW;AACjB,sBAAIS,GAAG,GAAG1B,MAAM,CAACyB,qBAAP,CAA6BN,IAA7B,CAAkCQ,CAAC,IAAIA,CAAC,CAACnD,EAAF,IAAQyC,KAAK,CAACA,KAArD,CAAV;AACAH,kBAAAA,aAAa,CAAC,aAAD,EAAgBY,GAAhB,CAAb;AACH;AARb;AAAA;AAAA;AAAA;AAAA,sBAFA,eAYA,QAAC,YAAD;AAAc,gBAAA,IAAI,EAAC,qBAAnB;AAAyC,gBAAA,SAAS,EAAC,KAAnD;AACI,gBAAA,SAAS,EAAC;AADd;AAAA;AAAA;AAAA;AAAA,sBAZA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAgBI;AAAU,cAAA,SAAS,EAAC,YAApB;AAAA,sCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAC,mBAAjB;AAAqC,gBAAA,GAAG,EAAC,GAAzC;AAA6C,gBAAA,GAAG,EAAE1B,MAAM,CAACb,eAAzD;AAA0E,gBAAA,IAAI,EAAC,QAA/E;AAAwF,gBAAA,IAAI,EAAC,qBAA7F;AAAmH,gBAAA,WAAW,EAAE,UAAUa,MAAM,CAACb;AAAjJ;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI,QAAC,YAAD;AAAc,gBAAA,IAAI,EAAC,qBAAnB;AAAyC,gBAAA,SAAS,EAAC,KAAnD;AACI,gBAAA,SAAS,EAAC;AADd;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADP,GAyBa,IA5FlB,eA6FG;AAAQ,YAAA,SAAS,EAAC,oBAAlB;AAAuC,YAAA,IAAI,EAAC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA7FH,eA8FI;AAAQ,YAAA,SAAS,EAAC,oCAAlB;AAAuD,YAAA,IAAI,EAAC,QAA5D;AAAqE,YAAA,OAAO,EAAE,KAAKI,UAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9FJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAbZ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqHH;;AApNoC;;AAuNzC,eAAenB,gBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\nclass ProductComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            description: '',\r\n            productType: '',\r\n            productTypes: [],           \r\n            userCategoryId: '',          \r\n            userCategories: [],\r\n            filteredUserCategories:[],\r\n            //categories: [],           \r\n            amortizationPercent: '',\r\n            maxamortization: 100,\r\n           // selectedCategoryId: '',\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n       \r\n        ProductDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                console.log('got response in component did mount');\r\n                if (this.state.id > 0) {\r\n                    this.setState({\r\n                        name: response.data.name,\r\n                        description: response.data.description,\r\n                        productType: response.data.productType,\r\n                        userCategoryId: response.data.userCategoryId,//response.data.productType == 'DMA' ? response.data.subCategory : '',\r\n                       // selectedCategoryId: response.data.productType == 'DMA' ? response.data.subCategory.category.id : '',\r\n                        amortizationPercent: response.data.productType == 'DMA' ? response.data.amortizationPercent : '',\r\n                    })\r\n                }\r\n                this.setState({\r\n                    productTypes: response.data.productTypes,\r\n                    userCategories: response.data.userCategories,\r\n                    filteredUserCategories: response.data.userCategories,\r\n                    //categories: response.data.categories,\r\n                });\r\n            })\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            description: values.description,\r\n            productType: values.productType,\r\n            subCategory: values.productType == 'DMA' ? values.subCategory : null,\r\n            amortizationPercent: values.productType == 'DMA' ? values.amortizationPercent : null,           \r\n            targetDate: values.targetDate\r\n        }\r\n       ProductDataService.save(item)\r\n            .then(() => this.props.history.push('/products'))\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.userName = 'Enter atleast 5 Characters'\r\n        }\r\n\r\n        if (!values.productType) {\r\n            errors.productType = 'required field !!!'\r\n        }\r\n\r\n        if (values.productType === 'DMA') {\r\n\r\n            if (!values.categories)\r\n                errors.categories = 'required field !!!'\r\n            if (!values.subCategory) {\r\n                errors.subCategory = 'required field !!!'\r\n            }\r\n            if (!values.amortizationPercent) {\r\n                errors.amortizationPercent = 'required field !!!'\r\n            }\r\n        }\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        //this.props.history.push('/products')\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        console.log('rendering');\r\n        let { id, name, description, productType, productTypes, amortizationPercent, /*categories,*/ userCategoryId, userCategories,\r\n            filteredUserCategories, maxamortization/*, selectedCategoryId*/ } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Product</h3> : <h3 className=\"mb-3\"> Add New Product </h3>}\r\n                <Formik\r\n                    initialValues={{\r\n                        id, name, description, productType, productTypes, amortizationPercent, userCategoryId, /*categories,*/\r\n                        userCategories, filteredUserCategories, maxamortization/*, selectedCategoryId*/\r\n                    }}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        ({ setFieldValue, values}) => (\r\n                            <Form>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>name</label>\r\n                                    <Field className=\"form-control w-25\" type=\"text\" name=\"name\"\r\n                                   />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>description</label>\r\n                                    <Field className=\"form-control w-50\" as=\"textarea\" type=\"textarea\" name=\"description\" />\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>product type</label>\r\n                                    {\r\n                                        productTypes.map((type) =>\r\n                                            <label className=\"mx-3\">\r\n                                                <Field\r\n                                                    className=\"mx-1\"\r\n                                                    type=\"radio\" name=\"productType\" value={type.value}\r\n                                                   \r\n                                                    />\r\n                                                {type.name}\r\n                                    </label>)\r\n                                    }\r\n                                   \r\n                                    <ErrorMessage name=\"productType\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                {\r\n                                    values.productType=='DMA'  ? (\r\n                                   \r\n                                    <div>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>category</label>\r\n                                                <CustomSelect      \r\n                                                    id=\"selectedCategoryId\"\r\n                                                    name=\"selectedCategoryId\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={categories}\r\n                                                    value={subCategory !== '' ? subCategory.category.id : ''}\r\n                                                    onChange={(value) => {\r\n                                                        setFieldValue(\"selectedCategoryId\", value.value);\r\n                                                        setFieldValue(\"amortizationPercent\", '');\r\n                                                        setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\r\n                                                        \r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < values.subCategories.length; i++) {\r\n                                                          \r\n                                                            if (values.subCategories[i].category.id == value.value) {\r\n                                                                subs.push(values.subCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        setFieldValue(\"filteredSubCategories\", subs);\r\n                                                    }\r\n                                                    }\r\n                                      \r\n                                            />\r\n                                        <ErrorMessage name=\" selectedCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    ) : null\r\n                                }                        \r\n                                {values.selectedCategoryId != '' && values.productType == 'DMA' ? (\r\n                                        <div>\r\n                                        <fieldset className=\"form-group\">\r\n                                        <label>sub category</label>\r\n                                        <CustomSelect\r\n                                                    name=\"subCategory\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={values.filteredSubCategories}//categories.find(c => c.id == values.selectedCategoryId).subCategories}\r\n                                                    value={subCategory !== '' ? subCategory.id : ''}\r\n                                                    onChange={(value) => {\r\n                                                        let sub = values.filteredSubCategories.find(s => s.id == value.value);\r\n                                                        setFieldValue(\"subCategory\", sub)\r\n                                                    }}\r\n                                        />\r\n                                        <ErrorMessage name=\" selectedCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>amortization percent</label>\r\n                                                <Field className=\"form-control w-50\" min=\"0\" max={values.maxamortization} type=\"number\" name=\"amortizationPercent\" placeholder={\"max =\" + values.maxamortization} />\r\n                                                <ErrorMessage name=\"amortizationPercent\" component=\"div\"\r\n                                                    className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                       \r\n                                        </div>\r\n                                            ):null}\r\n                               <button className=\"btn btn-mybtn px-5\" type=\"submit\">Save</button>\r\n                                <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductComponent"]},"metadata":{},"sourceType":"module"}