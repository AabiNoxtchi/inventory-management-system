{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\nconst AUTH_API_URL = `${API_URL}/api/inventory/auth/signin`;\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeAuthentication(username, password) {\n    return axios.post(`${AUTH_API_URL}`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLogin(username, token) {\n    console.log('registerSuccessfull login username = ' + username + 'token = ' + token);\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    console.log('registerSuccessfull login = ' + sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME));\n    this.setupAxiosInterceptors(this.createToken(token));\n  }\n\n  createToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedUerName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/service/AuthenticationService.js"],"names":["axios","API_URL","AUTH_API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeAuthentication","username","password","post","registerSuccessfulLogin","token","console","log","sessionStorage","setItem","getItem","setupAxiosInterceptors","createToken","logout","removeItem","isUserLoggedIn","user","getLoggedUerName","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,YAAY,GAAI,GAAED,OAAQ,4BAAhC;AAEA,OAAO,MAAME,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACtC,WAAOP,KAAK,CAACQ,IAAN,CAAY,GAAEN,YAAa,EAA3B,EAA8B;AACjCI,MAAAA,QADiC;AAEjCC,MAAAA;AAFiC,KAA9B,CAAP;AAIH;;AAEDE,EAAAA,uBAAuB,CAACH,QAAD,EAAWI,KAAX,EAAkB;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAA0CN,QAA1C,GAAqD,UAArD,GAAgEI,KAA5E;AAEAG,IAAAA,cAAc,CAACC,OAAf,CAAuBX,gCAAvB,EAAyDG,QAAzD;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCC,cAAc,CAACE,OAAf,CAAuBZ,gCAAvB,CAA7C;AAEA,SAAKa,sBAAL,CAA4B,KAAKC,WAAL,CAAiBP,KAAjB,CAA5B;AAEH;;AAEDO,EAAAA,WAAW,CAACP,KAAD,EAAQ;AACf,WAAO,YAAYA,KAAnB;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACLL,IAAAA,cAAc,CAACM,UAAf,CAA0BhB,gCAA1B;AACH;;AAEDiB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGR,cAAc,CAACE,OAAf,CAAuBZ,gCAAvB,CAAX;AACA,QAAIkB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDC,EAAAA,gBAAgB,GAAG;AACf,QAAID,IAAI,GAAGR,cAAc,CAACE,OAAf,CAAuBZ,gCAAvB,CAAX;AACA,QAAIkB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACN,KAAD,EAAQ;AAC1BV,IAAAA,KAAK,CAACuB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKN,cAAL,EAAJ,EAA2B;AACvBM,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BlB,KAA/B;AACH;;AACD,aAAOgB,MAAP;AACH,KANL;AAQH;;AAhDuB;;AAmD5B,eAAe,IAAItB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst API_URL = 'http://localhost:8080'\r\nconst AUTH_API_URL = `${API_URL}/api/inventory/auth/signin`\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeAuthentication(username, password) {\r\n        return axios.post(`${AUTH_API_URL}`, {\r\n            username,\r\n            password\r\n        });\r\n    }\r\n\r\n    registerSuccessfulLogin(username, token) {\r\n        console.log('registerSuccessfull login username = ' + username + 'token = '+token)\r\n\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        console.log('registerSuccessfull login = ' + sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME))\r\n\r\n        this.setupAxiosInterceptors(this.createToken(token))\r\n       \r\n    }\r\n\r\n    createToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedUerName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()\r\n\r\n"]},"metadata":{},"sourceType":"module"}