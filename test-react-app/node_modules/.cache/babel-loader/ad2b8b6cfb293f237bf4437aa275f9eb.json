{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\Filters\\\\CityFilter.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CustomSelect from './CustomSelect';\nimport './Filter.css';\n\nclass CityFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: props.countries,\n      countryId: props.countryId,\n      cities: props.cities,\n      filteredcities: props.cities,\n      cityId: props.cityId,\n      zones: props.zones,\n      timeZone: props.timeZone,\n      currencies: props.currencies,\n      currency: props.currency\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  onSubmit(values) {\n    console.log(\"values = \" + JSON.stringify(values));\n    let path = window.location.pathname;\n    let search = window.location.search;\n    let newPath = ``;\n\n    if (search.length > 1) {\n      while (search.charAt(0) === '?') {\n        search = search.substring(1);\n      }\n\n      let searchItems = search.split('&');\n\n      for (let i = 0; i < searchItems.length; i++) {\n        if (searchItems[i].startsWith('Pager.itemsPerPage=')) newPath += searchItems[i] + '&';\n      }\n    }\n\n    let prefix = this.state.prefix;\n    Object.entries(values).map(([key, value]) => {\n      if (!key.endsWith(\"s\") && value && value != 'undefined') {\n        newPath += prefix + '.' + key + '=' + value + '&';\n      }\n    });\n    newPath = newPath.substring(0, newPath.length - 1);\n    console.log(\"new path = \" + newPath);\n    newPath = path + '?' + newPath; // window.location.href = newPath;\n  }\n\n  resetForm() {\n    window.location.href = window.location.pathname;\n  }\n\n  render() {\n    //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\n    let {\n      countries,\n      countryId,\n      cities,\n      cityId,\n      zones,\n      timeZone,\n      currencies,\n      currency,\n      filteredcities\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        countries,\n        countryId,\n        cities,\n        cityId,\n        zones,\n        timeZone,\n        currencies,\n        currency,\n        filteredcities\n      },\n      onSubmit: this.onSubmit,\n      enableReinitialize: true,\n      children: ({\n        props,\n        setFieldValue,\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-form\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"country\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4\",\n              items: countries,\n              value: values.countryId,\n              onChange: selected => {\n                setFieldValue(\"countryId\", selected.value);\n                let subs = values.filteredcities;\n                subs = [];\n\n                for (let i = 0; i < cities.length; i++) {\n                  if (cities[i].filterBy == selected.value) {\n                    subs.push(cities[i]);\n                  }\n                }\n\n                setFieldValue(\"filteredcities\", subs);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"cities\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4\",\n              items: values.filteredcities || filteredcities || cities,\n              value: values.cityId || '',\n              onChange: selected => setFieldValue(\"cityId\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"time zone\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4\",\n              items: values.zones,\n              value: values.timeZone || '',\n              onChange: selected => setFieldValue(\"timeZone\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"currency\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4\",\n              items: values.currencies,\n              value: values.currency || '',\n              onChange: selected => setFieldValue(\"currency\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button px-5\",\n              type: \"submit\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button btn-delete\",\n              type: \"button\",\n              onClick: this.resetForm,\n              children: \"reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CityFilter;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/Filters/CityFilter.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","CustomSelect","CityFilter","constructor","props","state","countries","countryId","cities","filteredcities","cityId","zones","timeZone","currencies","currency","onSubmit","bind","resetForm","values","console","log","JSON","stringify","path","window","location","pathname","search","newPath","length","charAt","substring","searchItems","split","i","startsWith","prefix","Object","entries","map","key","value","endsWith","href","render","setFieldValue","selected","subs","filterBy","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass CityFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            countries: props.countries,\r\n            countryId: props.countryId,\r\n            cities: props.cities,\r\n            filteredcities: props.cities,\r\n            cityId: props.cityId,\r\n            zones: props.zones,\r\n            timeZone: props.timeZone,\r\n            currencies: props.currencies,\r\n            currency: props.currency\r\n        }      \r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values = \" + JSON.stringify(values));\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n           \r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {               \r\n                newPath += prefix + '.' + key + '=' + value + '&'                \r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log(\"new path = \" + newPath);\r\n        newPath = path + '?' + newPath;       \r\n       // window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        window.location.href = window.location.pathname;\r\n       \r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { countries, countryId, cities, cityId, zones, timeZone, currencies, currency, filteredcities} = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ countries, countryId, cities, cityId, zones, timeZone, currencies, currency, filteredcities }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                           \r\n                            <div className=\"inline\">\r\n                                <label >country&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={countries}\r\n                                    value={values.countryId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"countryId\", selected.value);\r\n                                        let subs = values.filteredcities;\r\n                                        subs = []\r\n                                        for (let i = 0; i < cities.length; i++) {\r\n\r\n                                            if (cities[i].filterBy == selected.value) {\r\n                                                subs.push(cities[i])\r\n                                            }\r\n                                        }\r\n                                        setFieldValue(\"filteredcities\", subs);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >cities&nbsp;</label>\r\n                                <CustomSelect                                  \r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredcities || filteredcities || cities}\r\n                                    value={values.cityId || ''}\r\n                                    onChange={(selected) => setFieldValue(\"cityId\", selected.value)}                                \r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >time zone&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.zones}\r\n                                    value={values.timeZone || ''}\r\n                                    onChange={(selected) => setFieldValue(\"timeZone\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >currency&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.currencies}\r\n                                    value={values.currency || ''}\r\n                                    onChange={(selected) => setFieldValue(\"currency\", selected.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityFilter"]},"metadata":{},"sourceType":"module"}