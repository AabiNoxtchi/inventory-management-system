{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\Filters\\\\CategoryFilter.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CustomSelect from './CustomSelect';\nimport './Filter.css';\n\nclass CategoryFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: props.name,\n      names: props.names,\n      filteredNames: props.names,\n      productType: props.productType,\n      productTypes: props.productTypes,\n      prefix: props.prefix\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  onSubmit(values) {\n    console.log(\"values = \" + JSON.stringify(values));\n    let path = window.location.pathname;\n    let search = window.location.search;\n    let newPath = ``;\n\n    if (search.length > 1) {\n      while (search.charAt(0) === '?') {\n        search = search.substring(1);\n      }\n\n      let searchItems = search.split('&');\n\n      for (let i = 0; i < searchItems.length; i++) {\n        if (searchItems[i].startsWith('Pager.itemsPerPage=')) newPath += searchItems[i] + '&';\n      }\n    }\n\n    let prefix = this.state.prefix;\n    Object.entries(values).map(([key, value]) => {\n      if (!key.endsWith(\"s\") && value && value != 'undefined') {\n        newPath += prefix + '.' + key + '=' + value + '&';\n      }\n    });\n    newPath = newPath.substring(0, newPath.length - 1);\n    console.log(\"new path = \" + newPath);\n    newPath = path + '?' + newPath;\n    window.location.href = newPath;\n  }\n\n  resetForm() {\n    window.location.href = window.location.pathname;\n  }\n\n  render() {\n    //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\n    let {\n      name,\n      names,\n      productType,\n      productTypes,\n      filteredNames\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name,\n        names,\n        productType,\n        productTypes,\n        filteredNames\n      },\n      onSubmit: this.onSubmit,\n      enableReinitialize: true,\n      children: ({\n        props,\n        setFieldValue,\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-form\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline px-2 mx-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"product type :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this), productTypes && productTypes.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inline\",\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: \"mx-2\",\n                type: \"checkbox\",\n                name: \"productType\",\n                value: type.value,\n                checked: type.name === values.productType,\n                onChange: value => {\n                  // console.log('value of checked = ' + value.target.value);\n                  setFieldValue(\"productType\", value.target.value == values.productType ? null : value.target.value);\n                  let subs = values.filteredNames;\n                  subs = [];\n\n                  if (values.productType == null) {\n                    subs = names;\n                    return;\n                  }\n\n                  for (let i = 0; i < values.names.length; i++) {\n                    if (values.names[i].filterBy == value.target.value) {\n                      subs.push(values.names[i]);\n                    }\n                  }\n\n                  setFieldValue(\"filteredNames\", subs);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 45\n              }, this), type.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"category\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4\",\n              items: values.filteredNames || filteredNames || names,\n              value: values.name || '',\n              onChange: selected => setFieldValue(\"name\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button px-5\",\n              type: \"submit\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button btn-delete\",\n              type: \"button\",\n              onClick: this.resetForm,\n              children: \"reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CategoryFilter;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/Filters/CategoryFilter.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","CustomSelect","CategoryFilter","constructor","props","state","name","names","filteredNames","productType","productTypes","prefix","onSubmit","bind","resetForm","values","console","log","JSON","stringify","path","window","location","pathname","search","newPath","length","charAt","substring","searchItems","split","i","startsWith","Object","entries","map","key","value","endsWith","href","render","setFieldValue","type","target","subs","filterBy","push","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass CategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            names: props.names,\r\n            filteredNames: props.names,\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values = \" + JSON.stringify(values));\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log(\"new path = \" + newPath);\r\n        newPath = path + '?' + newPath;\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        window.location.href = window.location.pathname;\r\n\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { name, names, productType, productTypes, filteredNames } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ name, names, productType, productTypes, filteredNames }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes&&productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                   // console.log('value of checked = ' + value.target.value);\r\n                                                    setFieldValue(\"productType\", value.target.value == values.productType ? null : value.target.value);\r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = [];\r\n                                                    if (values.productType == null) {\r\n                                                        subs = names;\r\n                                                        return;\r\n                                                    }\r\n                                                    for (let i = 0; i < values.names.length; i++) {\r\n\r\n                                                        if (values.names[i].filterBy == value.target.value) {\r\n                                                            subs.push(values.names[i])\r\n                                                        }\r\n                                                    }\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.name || ''}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                           \r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryFilter"]},"metadata":{},"sourceType":"module"}