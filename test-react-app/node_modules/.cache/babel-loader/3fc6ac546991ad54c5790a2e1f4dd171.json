{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\DeliveryComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport DeliveryDataService from '../service/DeliveryDataService';\nimport '../myStyles/Style.css';\nimport CustomSelect from './Filters/CustomSelect';\nimport DatePicker from \"react-datepicker\";\n\nclass DeliveryComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      number: '',\n      date: '',\n      supplierId: '',\n      suppliers: []\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.cancelForm = this.cancelForm.bind(this);\n  }\n\n  componentDidMount() {\n    DeliveryDataService.retrieve(this.state.id).then(response => {\n      console.log('got response in component did mount');\n\n      if (this.state.id > 0) {\n        this.setState({\n          number: response.data.number,\n          productType: response.data.productType,\n          supplierId: response.data.supplierId\n        });\n      }\n\n      this.setState({\n        date: response.data.date,\n        suppliers: response.data.suppliers\n      });\n    });\n  }\n\n  onSubmit(values) {\n    let item = {\n      id: this.state.id,\n      date: new Intl.DateTimeFormat(\"en-GB\", {\n        month: \"numeric\",\n        day: \"2-digit\",\n        year: \"numeric\"\n      }).format(new Date(values.date)),\n      supplierId: values.supplierId,\n      targetDate: values.targetDate\n    };\n    DeliveryDataService.save(item).then(() => this.props.history.push('/deliveries'));\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.date) {\n      errors.date = 'required field !!!';\n    }\n    /* if (!values.supplierId) {\r\n         errors.supplierId = 'required field !!!'\r\n     }*/\n\n\n    return errors;\n  }\n\n  cancelForm() {\n    this.props.history.push('/deliveries');\n  }\n\n  render() {\n    console.log('rendering');\n    let {\n      id,\n      number,\n      date,\n      supplierId,\n      suppliers\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [this.state.id > 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3\",\n        children: \" Update Delivery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3\",\n        children: \" Add New Delivery \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 83\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          id,\n          number,\n          date,\n          supplierId,\n          suppliers\n        },\n        onSubmit: this.onSubmit,\n        validateOnChange: false,\n        validateOnBlur: false,\n        validate: this.validate,\n        enableReinitialize: true,\n        children: ({\n          setFieldValue,\n          values\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            className: \"form-control\",\n            type: \"text\",\n            name: \"id\",\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control w-25\",\n              type: \"text\",\n              name: \"number\",\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n                className: \"form-control \",\n                dateFormat: \"dd MMMM yyyy\",\n                locale: \"en-GB\",\n                selected: values.date && new Date(values.date),\n                onChange: date => setFieldValue(\"date\", date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"date\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"supplier\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              id: \"supplierId\",\n              name: \"supplierId\",\n              className: \"w-50\",\n              items: suppliers,\n              value: supplierId,\n              onChange: value => setFieldValue(\"supplierId\", value.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \" selectedCategoryId\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-mybtn px-5\",\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-mybtn btn-delete px-5 ml-5\",\n            type: \"button\",\n            onClick: this.cancelForm,\n            children: \"cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DeliveryComponent;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/DeliveryComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","DeliveryDataService","CustomSelect","DatePicker","DeliveryComponent","constructor","props","state","id","match","params","number","date","supplierId","suppliers","onSubmit","bind","validate","cancelForm","componentDidMount","retrieve","then","response","console","log","setState","data","productType","values","item","Intl","DateTimeFormat","month","day","year","format","Date","targetDate","save","history","push","errors","render","setFieldValue","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nclass DeliveryComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            number: '',\r\n            date: '',\r\n            supplierId: '',\r\n            suppliers: [],            \r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n       DeliveryDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                console.log('got response in component did mount');\r\n                if (this.state.id > 0) {\r\n                    this.setState({\r\n                        number: response.data.number,                        \r\n                        productType: response.data.productType,\r\n                        supplierId: response.data.supplierId,                                            \r\n                    })\r\n                }\r\n                this.setState({\r\n                    date: response.data.date,\r\n                    suppliers: response.data.suppliers,  \r\n                });\r\n            })\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let item = {\r\n            id: this.state.id,           \r\n            date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(values.date)),\r\n            supplierId: values.supplierId,           \r\n            targetDate: values.targetDate\r\n        }\r\n       DeliveryDataService.save(item)\r\n            .then(() => this.props.history.push('/deliveries'))\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.date) {\r\n            errors.date = 'required field !!!'\r\n        }\r\n       /* if (!values.supplierId) {\r\n            errors.supplierId = 'required field !!!'\r\n        }*/\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        this.props.history.push('/deliveries')\r\n    }\r\n\r\n    render() {\r\n        console.log('rendering');\r\n        let { id, number, date, supplierId, suppliers } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Delivery</h3> : <h3 className=\"mb-3\"> Add New Delivery </h3>}\r\n                <Formik\r\n                    initialValues={{\r\n                        id, number, date, supplierId, suppliers\r\n                    }}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        ({ setFieldValue, values }) => (\r\n                            <Form>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>number</label>\r\n                                    <Field className=\"form-control w-25\" type=\"text\" name=\"number\" disabled\r\n                                    />                                   \r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>date</label>\r\n                                    <div>\r\n                                    <DatePicker\r\n                                        className=\"form-control \"\r\n                                        dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"                                       \r\n                                        selected={values.date && new Date(values.date)}\r\n                                        onChange={date => setFieldValue(\"date\", date)} />\r\n                                    <ErrorMessage name=\"date\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                    </div>\r\n                                </fieldset>\r\n                                   \r\n                                <fieldset className=\"form-group\">\r\n                                    <label>supplier</label>\r\n                                    <CustomSelect\r\n                                        id=\"supplierId\"\r\n                                        name=\"supplierId\"\r\n                                        className={\"w-50\"}\r\n                                        items={suppliers}\r\n                                        value={supplierId}\r\n                                        onChange={(value) => setFieldValue(\"supplierId\", value.value)}\r\n                                    />\r\n                                    <ErrorMessage name=\" selectedCategoryId\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <button className=\"btn btn-mybtn px-5\" type=\"submit\">Save</button>\r\n                                <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeliveryComponent"]},"metadata":{},"sourceType":"module"}