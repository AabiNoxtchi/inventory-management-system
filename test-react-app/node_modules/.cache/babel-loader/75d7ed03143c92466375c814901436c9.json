{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\EventListner.jsx\",\n    _s = $RefreshSig$();\n\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport authHeader from '../service/AuthHeader';\nimport React, { useEffect, useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Link, withRouter } from 'react-router-dom';\n\nfunction EventListner() {\n  _s();\n\n  const [listening, setListening] = useState(false);\n  const [data, setData] = useState([]);\n  let eventSource = undefined;\n  useEffect(() => {\n    if (!listening) {\n      var EventSource = EventSourcePolyfill;\n      eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribeWebClient\", {\n        headers: authHeader()\n      });\n\n      eventSource.onopen = event => {\n        console.log(\"connection opened event = \" + JSON.stringify(event)); //console.log(\"connection opened event.target = \" + JSON.stringify(event.target))\n      };\n\n      eventSource.onmessage = event => {\n        // console.log(\"result = \", event.data);\n        console.log(\"result event = \", JSON.stringify(event)); // console.log(\"result event.target = \", JSON.stringify(event.target));\n\n        toast(event.data, {\n          position: \"bottom-right\",\n          hideProgressBar: true\n        }); // setData(old => [...old, event.data])\n      };\n      /* eventSource.onkeepalive = (event) => {\r\n           console.log(\"result = \", event.data);\r\n           //console.log(\"result event = \", JSON.stringify(event));\r\n         //  console.log(\"result event.target = \", JSON.stringify(event.target));\r\n           toast(event.data, { position: \"bottom-right\", hideProgressBar: true });\r\n           // setData(old => [...old, event.data])\r\n       }*/\n      //keep alive pings\n\n\n      eventSource.addEventListener(\"keepalive\", event => {\n        console.log(\"show data = \" + event.data); //(JSON.stringify(event.data)))\n        //toast(event.data, { position: \"bottom-right\", hideProgressBar: true });\n      }); //Amortized\n\n      eventSource.addEventListener(\"amortized\", event => {\n        console.log(\"show data = \" + event.data); //(JSON.stringify(event.data)))\n\n        toast(\"hi\"); //ToastWithLink(\"fully amortized inventories\", \"/productDetail?Filter.ids=\"+event.data.toString()), { position: \"bottom-right\", hideProgressBar: true });\n      });\n\n      eventSource.onerror = event => {\n        // console.log(\"event error = \"+JSON.stringify(event))\n        console.log(\"error : error state = \" + event.target.readyState);\n\n        if (event.target.readyState === EventSource.CLOSED) {\n          console.log('eventsource not closed (' + event.target.readyState + ')');\n        } //eventSource.close();\n\n      };\n\n      setListening(true);\n    }\n\n    return () => {\n      eventSource.close();\n      console.log(\"eventsource closed\");\n    };\n  }, []); // const ToastWithLink = (title, link) => (\n  //  <div>\n  //       <Link to={link}>{title}</Link>\n  //   </div>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/productdetails>inventories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n  {\n    /* <div >\r\n         <AppInstructor/>\r\n     </div>*/\n  } //);\n}\n\n_s(EventListner, \"pPhG6bgkdMd/wcIrmeoar7uJYNI=\");\n\n_c = EventListner;\nexport default EventListner;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventListner\");","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/EventListner.jsx"],"names":["EventSourcePolyfill","authHeader","React","useEffect","useState","ToastContainer","toast","Link","withRouter","EventListner","listening","setListening","data","setData","eventSource","undefined","EventSource","headers","onopen","event","console","log","JSON","stringify","onmessage","position","hideProgressBar","addEventListener","onerror","target","readyState","CLOSED","close"],"mappings":"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","sourcesContent":["import { EventSourcePolyfill } from 'event-source-polyfill';\r\nimport authHeader from '../service/AuthHeader';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Link, withRouter } from 'react-router-dom'\r\n\r\nfunction EventListner() {\r\n   \r\n    const [listening, setListening] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    let eventSource = undefined;\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            var EventSource = EventSourcePolyfill; \r\n            eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribeWebClient\", { headers: authHeader() });\r\n\r\n            eventSource.onopen = (event) => {\r\n                console.log(\"connection opened event = \" + JSON.stringify(event))\r\n                //console.log(\"connection opened event.target = \" + JSON.stringify(event.target))\r\n            }\r\n\r\n            eventSource.onmessage = (event) => {\r\n               // console.log(\"result = \", event.data);\r\n                console.log(\"result event = \", JSON.stringify(event));\r\n               // console.log(\"result event.target = \", JSON.stringify(event.target));\r\n                toast(event.data, { position: \"bottom-right\", hideProgressBar: true });\r\n               // setData(old => [...old, event.data])\r\n            }\r\n\r\n           /* eventSource.onkeepalive = (event) => {\r\n                console.log(\"result = \", event.data);\r\n                //console.log(\"result event = \", JSON.stringify(event));\r\n              //  console.log(\"result event.target = \", JSON.stringify(event.target));\r\n                toast(event.data, { position: \"bottom-right\", hideProgressBar: true });\r\n                // setData(old => [...old, event.data])\r\n            }*/\r\n\r\n            //keep alive pings\r\n            eventSource.addEventListener(\"keepalive\", (event) => {\r\n                console.log(\"show data = \"+event.data)//(JSON.stringify(event.data)))\r\n                //toast(event.data, { position: \"bottom-right\", hideProgressBar: true });\r\n            })\r\n\r\n\r\n            //Amortized\r\n            eventSource.addEventListener(\"amortized\", (event) => {\r\n                console.log(\"show data = \" + event.data);//(JSON.stringify(event.data)))\r\n                toast( \"hi\")//ToastWithLink(\"fully amortized inventories\", \"/productDetail?Filter.ids=\"+event.data.toString()), { position: \"bottom-right\", hideProgressBar: true });\r\n            })\r\n\r\n            eventSource.onerror = (event) => {\r\n               // console.log(\"event error = \"+JSON.stringify(event))\r\n                console.log(\"error : error state = \"+event.target.readyState)\r\n                if (event.target.readyState === EventSource.CLOSED) {\r\n                    console.log('eventsource not closed (' + event.target.readyState + ')')\r\n                }\r\n                //eventSource.close();\r\n            }\r\n\r\n           \r\n\r\n           \r\n\r\n            setListening(true);\r\n        }\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            console.log(\"eventsource closed\")\r\n        }\r\n\r\n    }, [])\r\n\r\n   // const ToastWithLink = (title, link) => (\r\n      //  <div>\r\n     //       <Link to={link}>{title}</Link>\r\n     //   </div>\r\n   // );\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <Link to=\"/productdetails>inventories\"></Link>\r\n        </div>\r\n    );\r\n\r\n    {/* <div >\r\n          <AppInstructor/>\r\n      </div>*/}\r\n    //);\r\n}\r\n\r\nexport default EventListner;\r\n"]},"metadata":{},"sourceType":"module"}