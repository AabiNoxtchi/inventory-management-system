{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\ProductComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport ProductDataService from '../service/ProductDataService';\nimport '../myStyles/Style.css';\nimport CustomSelect from './Filters/CustomSelect';\nimport Function from './Shared/Function';\n\nclass ProductComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      name: '',\n      description: '',\n      productType: '',\n      productTypes: [],\n      userCategoryId: '',\n      userCategories: [],\n      filteredUserCategories: [],\n      //categories: [],           \n      amortizationPercent: '' //maxamortization: 100,\n      // selectedCategoryId: '',\n\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.cancelForm = this.cancelForm.bind(this);\n  }\n\n  componentDidMount() {\n    ProductDataService.retrieve(this.state.id).then(response => {\n      console.log('got response in component did mount = ' + JSON.stringify(response));\n\n      if (this.state.id > 0) {\n        this.setState({\n          name: response.data.name || '',\n          description: response.data.description || '',\n          productType: response.data.productType || '',\n          userCategoryId: response.data.userCategoryId || '',\n          //response.data.productType == 'DMA' ? response.data.subCategory : '',\n          // selectedCategoryId: response.data.productType == 'DMA' ? response.data.subCategory.category.id : '',\n          amortizationPercent: response.data.amortizationPercent || ''\n        });\n      }\n\n      this.setState({\n        productTypes: response.data.productTypes || [],\n        userCategories: response.data.userCategories || [],\n        filteredUserCategories: response.data.userCategories || [] //categories: response.data.categories,\n\n      });\n    });\n  }\n\n  onSubmit(values, actions) {\n    let item = {\n      id: this.state.id,\n      name: values.name,\n      description: values.description,\n      // productType: values.productType,\n      userCategoryId:\n      /*values.productType == 'DMA' ?*/\n      values.userCategoryId,\n      //: null,\n      //amortizationPercent: values.productType == 'DMA' ? values.amortizationPercent : null,           \n      targetDate: values.targetDate\n    };\n    ProductDataService.save(item).then(() => this.props.history.push('/products')).catch(error => {\n      /* let msg = \"\" + error.response && typeof error.response.data == 'string' ?\r\n           error.response.data : error.response.data.errors ?\r\n               error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                   error.response.data.message : error;*/\n      let msg = Function.getErrorMsg(error); // console.log(\"error \" + error)\n\n      actions.setErrors({\n        phoneNumber: msg\n      });\n      if (msg.indexOf(\"name\") > -1) actions.setErrors({\n        name: msg\n      });\n      this.setState({\n        errormsg: msg\n      });\n    });\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = 'required field !!!';\n    } else if (values.name.length < 5) {\n      errors.name = 'Enter atleast 5 Characters';\n    }\n    /* if (!values.productType) {\r\n         errors.productType = 'required field !!!'\r\n     }*/\n\n    /* if (values.productType === 'DMA') {\r\n           if (!values.categories)\r\n             errors.categories = 'required field !!!'*/\n\n\n    console.log(\"values.userCategryId = \" + values.userCategoryId);\n\n    if (!values.userCategoryId) {\n      errors.userCategoryId = 'required field !!!';\n    }\n    /* if (!values.amortizationPercent) {\r\n         errors.amortizationPercent = 'required field !!!'\r\n     }*/\n    //  }\n\n\n    console.log(\"errors = \" + JSON.stringify(errors));\n    return errors;\n  }\n\n  cancelForm() {\n    //this.props.history.push('/products')\n    window.history.back();\n  }\n\n  render() {\n    console.log('rendering');\n    const precent = \"%\";\n    let {\n      id,\n      name,\n      description,\n      userCategoryId\n      /*, productType, productTypes, amortizationPercent, userCategories,\r\n      filteredUserCategories*/\n\n      /*, maxamortization, selectedCategoryId*/\n\n      /*categories,*/\n\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container pt-5\",\n      children: [this.state.id > 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3\",\n        children: \" Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 38\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3\",\n        children: \" Add New Product \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 82\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          id,\n          name,\n          description,\n          userCategoryId\n          /*, productTypes, amortizationPercent, productType ,\r\n          userCategories, filteredUserCategories */\n\n          /*, maxamortization, selectedCategoryId*/\n\n          /*categories,*/\n\n        },\n        onSubmit: (values, actions) => this.onSubmit(values, actions),\n        validateOnChange: false,\n        validateOnBlur: false,\n        validate: this.validate,\n        enableReinitialize: true,\n        children: ({\n          setFieldValue,\n          values,\n          dirty\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [this.state.errormsg && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-warning\",\n            children: this.state.errormsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 57\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            className: \"form-control\",\n            type: \"text\",\n            name: \"id\",\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"required-field\",\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control w-50\",\n              type: \"text\",\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"name\",\n              component: \"div\",\n              className: \"alert alert-warning  w-25\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"product type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 37\n            }, this), this.state.productTypes.map(type => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"mx-3\",\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: \"mx-1\",\n                type: \"radio\",\n                name: \"productType\",\n                value: type.value,\n                checked: this.state.productType == type.value,\n                onChange: value => {\n                  // console.log(\"value producttype = \" + JSON.stringify(value.target.value));\n\n                  /*setFieldValue(\"productType\", value.target.value);*/\n                  this.setState({\n                    productType: value.target.value\n                  }); //setFieldValue(\"amortizationPercent\", '');\n                  //setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\n\n                  let subs = [];\n\n                  for (let i = 0; i < this.state.userCategories.length; i++) {\n                    if (this.state.userCategories[i].category.productType == value.target.value) {\n                      subs.push(this.state.userCategories[i]);\n                    }\n                  }\n                  /*setFieldValue(\"filteredUserCategories\", subs);*/\n\n\n                  this.setState({\n                    filteredUserCategories: subs\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 49\n              }, this), type.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 45\n            }, this)), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"productType\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"required-field\",\n              children: \"category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              name: \"category\",\n              className: \"w-50\",\n              items: this.state.filteredUserCategories //categories.find(c => c.id == values.selectedCategoryId).subCategories}\n              ,\n              value: values.userCategoryId,\n              onChange: value => {\n                let sub = this.state.filteredUserCategories.find(s => s.id == value.value);\n                setFieldValue(\"userCategoryId\", value.value);\n                console.log(\"sub = \" + JSON.stringify(sub));\n                this.setState({\n                  amortizationPercent: sub.amortizationPercent //productType: this.state.productType == '' ? sub.category.productType\n\n                }); // setFieldValue(\"amortizationPercent\", sub.amortizationPercent)\n\n                if (this.state.productType == '') this.setState({\n                  productType: sub.category.productType\n                }); //setFieldValue(\"productType\", sub.category.productType)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"userCategoryId\",\n              component: \"div\",\n              className: \"alert alert-warning w-50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"amortization percent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 84\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control ws inline pt-2 pb-2\",\n              readOnly: true,\n              type: \"number\",\n              value: this.state.amortizationPercent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 41\n            }, this), \"\\xA0%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control w-50\",\n              as: \"textarea\",\n              type: \"textarea\",\n              name: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group mt-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-mybtn p-x-5\",\n              disabled: !dirty,\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-mybtn btn-delete px-5 ml-5\",\n              type: \"button\",\n              onClick: this.cancelForm,\n              children: \"cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ProductComponent;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/ProductComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","ProductDataService","CustomSelect","Function","ProductComponent","constructor","props","state","id","match","params","name","description","productType","productTypes","userCategoryId","userCategories","filteredUserCategories","amortizationPercent","onSubmit","bind","validate","cancelForm","componentDidMount","retrieve","then","response","console","log","JSON","stringify","setState","data","values","actions","item","targetDate","save","history","push","catch","error","msg","getErrorMsg","setErrors","phoneNumber","indexOf","errormsg","errors","length","window","back","render","precent","setFieldValue","dirty","map","type","value","target","subs","i","category","sub","find","s"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass ProductComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            description: '',\r\n            productType: '',\r\n            productTypes: [],           \r\n            userCategoryId: '',          \r\n            userCategories: [],\r\n            filteredUserCategories:[],\r\n            //categories: [],           \r\n            amortizationPercent: '',\r\n            //maxamortization: 100,\r\n           // selectedCategoryId: '',\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n       \r\n        ProductDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                console.log('got response in component did mount = ' + JSON.stringify(response));\r\n                if (this.state.id > 0) {\r\n                    this.setState({\r\n                        name: response.data.name||'',\r\n                        description: response.data.description||'',\r\n                        productType: response.data.productType||'',\r\n                        userCategoryId: response.data.userCategoryId||'',//response.data.productType == 'DMA' ? response.data.subCategory : '',\r\n                       // selectedCategoryId: response.data.productType == 'DMA' ? response.data.subCategory.category.id : '',\r\n                        amortizationPercent: response.data.amortizationPercent||''\r\n                    })\r\n                }\r\n                this.setState({\r\n                    productTypes: response.data.productTypes||[],\r\n                    userCategories: response.data.userCategories||[],\r\n                    filteredUserCategories: response.data.userCategories||[],\r\n                    //categories: response.data.categories,\r\n                });\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            description: values.description,\r\n            // productType: values.productType,\r\n            userCategoryId: /*values.productType == 'DMA' ?*/ values.userCategoryId,//: null,\r\n            //amortizationPercent: values.productType == 'DMA' ? values.amortizationPercent : null,           \r\n            targetDate: values.targetDate\r\n        }\r\n        ProductDataService.save(item)\r\n            .then(() => this.props.history.push('/products'))\r\n            .catch(error =>\r\n            {\r\n               /* let msg = \"\" + error.response && typeof error.response.data == 'string' ?\r\n                    error.response.data : error.response.data.errors ?\r\n                        error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                            error.response.data.message : error;*/\r\n                let msg = Function.getErrorMsg(error);\r\n               // console.log(\"error \" + error)\r\n                actions.setErrors({ phoneNumber: msg })\r\n                if (msg.indexOf(\"name\") > -1)\r\n                    actions.setErrors({ name: msg }) \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.name = 'Enter atleast 5 Characters'\r\n        }\r\n\r\n       /* if (!values.productType) {\r\n            errors.productType = 'required field !!!'\r\n        }*/\r\n\r\n       /* if (values.productType === 'DMA') {\r\n\r\n            if (!values.categories)\r\n                errors.categories = 'required field !!!'*/\r\n        console.log(\"values.userCategryId = \" + values.userCategoryId)\r\n            if (!values.userCategoryId) {\r\n                errors.userCategoryId = 'required field !!!'\r\n            }\r\n           /* if (!values.amortizationPercent) {\r\n                errors.amortizationPercent = 'required field !!!'\r\n            }*/\r\n        //  }\r\n        console.log(\"errors = \" + JSON.stringify(errors))\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        //this.props.history.push('/products')\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        console.log('rendering');\r\n        const precent = \"%\";\r\n        let { id, name, description,  userCategoryId/*, productType, productTypes, amortizationPercent, userCategories,\r\n            filteredUserCategories*/ /*, maxamortization, selectedCategoryId*/ /*categories,*/ } = this.state\r\n        return (\r\n            <div className=\"container pt-5\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Product</h3> : <h3 className=\"mb-3\"> Add New Product </h3>}\r\n                <Formik\r\n                    initialValues={{\r\n                        id, name, description, userCategoryId/*, productTypes, amortizationPercent, productType ,\r\n                        userCategories, filteredUserCategories */ /*, maxamortization, selectedCategoryId*/  /*categories,*/\r\n                    }}\r\n                    onSubmit={(values, actions) => this.onSubmit(values, actions)}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        ({ setFieldValue, values, dirty}) => (\r\n                            <Form>\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label className=\"required-field\">name</label>\r\n                                    <Field className=\"form-control w-50\" type=\"text\" name=\"name\"\r\n                                   />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning  w-25\" />\r\n                                </fieldset>\r\n                                \r\n                                <fieldset className=\"form-group\">\r\n                                    <label>product type</label>\r\n                                    {\r\n                                        this.state.productTypes.map((type) =>\r\n                                            <label className=\"mx-3\">\r\n                                                <Field\r\n                                                    className=\"mx-1\"\r\n                                                    type=\"radio\" name=\"productType\" value={type.value}\r\n                                                    checked={this.state.productType == type.value}\r\n                                                    onChange={(value) => {\r\n                                                        // console.log(\"value producttype = \" + JSON.stringify(value.target.value));\r\n                                                        /*setFieldValue(\"productType\", value.target.value);*/\r\n                                                        this.setState({ productType: value.target.value })\r\n                                                    ;\r\n                                                        //setFieldValue(\"amortizationPercent\", '');\r\n                                                        //setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\r\n\r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < this.state.userCategories.length; i++) {\r\n\r\n                                                            if (this.state.userCategories[i].category.productType == value.target.value) {\r\n                                                                subs.push(this.state.userCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        /*setFieldValue(\"filteredUserCategories\", subs);*/\r\n                                                        this.setState({ filteredUserCategories: subs })\r\n                                                    }\r\n                                                    }\r\n                                                   \r\n                                                    />\r\n                                                {type.name}\r\n                                    </label>)\r\n                                    }\r\n                                   \r\n                                    <ErrorMessage name=\"productType\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                {/*\r\n                                    values.productType=='DMA'  ? (\r\n                                   \r\n                                    <div>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>category</label>\r\n                                                <CustomSelect      \r\n                                                    id=\"selectedCategoryId\"\r\n                                                    name=\"selectedCategoryId\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={categories}\r\n                                                    value={subCategory !== '' ? subCategory.category.id : ''}\r\n                                                    onChange={(value) => {\r\n                                                        setFieldValue(\"selectedCategoryId\", value.value);\r\n                                                        setFieldValue(\"amortizationPercent\", '');\r\n                                                        setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\r\n                                                        \r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < values.subCategories.length; i++) {\r\n                                                          \r\n                                                            if (values.subCategories[i].category.id == value.value) {\r\n                                                                subs.push(values.subCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        setFieldValue(\"filteredSubCategories\", subs);\r\n                                                    }\r\n                                                    }\r\n                                      \r\n                                            />\r\n                                        <ErrorMessage name=\" selectedCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    ) : null\r\n                               */ }                        \r\n                               \r\n                                        \r\n                                        <fieldset className=\"form-group\">\r\n                                        <label className=\"required-field\">category</label>\r\n                                        <CustomSelect\r\n                                                    name=\"category\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={this.state.filteredUserCategories}//categories.find(c => c.id == values.selectedCategoryId).subCategories}\r\n                                                    value={values.userCategoryId}\r\n                                                    onChange={(value) => {\r\n                                                        let sub = this.state.filteredUserCategories.find(s => s.id == value.value);\r\n                                                        setFieldValue(\"userCategoryId\", value.value);\r\n                                                        console.log(\"sub = \" + JSON.stringify(sub));\r\n                                                        this.setState({\r\n                                                            amortizationPercent: sub.amortizationPercent,\r\n                                                            //productType: this.state.productType == '' ? sub.category.productType\r\n                                                        })\r\n                                                       // setFieldValue(\"amortizationPercent\", sub.amortizationPercent)\r\n                                                        if (this.state.productType == '')\r\n                                                            this.setState({                                                              \r\n                                                                productType: sub.category.productType\r\n                                                            })\r\n                                                            //setFieldValue(\"productType\", sub.category.productType)\r\n                                                    }}\r\n                                        />\r\n                                        <ErrorMessage name=\"userCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning w-50\" />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>amortization percent</label><br/>\r\n                                        <Field className=\"form-control ws inline pt-2 pb-2\" readOnly type=\"number\" value={this.state.amortizationPercent}  />&nbsp;%\r\n                                                \r\n                                            </fieldset>\r\n                                       \r\n                               \r\n\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>description</label>\r\n                                    <Field className=\"form-control w-50\" as=\"textarea\" type=\"textarea\" name=\"description\" />\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group mt-5\">    \r\n                                <button className=\"btn btn-mybtn p-x-5\" disabled={!dirty} type=\"submit\">Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductComponent"]},"metadata":{},"sourceType":"module"}