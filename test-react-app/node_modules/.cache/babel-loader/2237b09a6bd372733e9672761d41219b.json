{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\Filters\\\\UserFilter.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useFormik } from 'formik';\nimport CustomSelect from './CustomSelect';\n\nclass UserFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      all: props.all,\n      firstNames: props.firstNames,\n      firstName: props.firstName,\n      lastNames: props.lastNames,\n      lastName: props.lastName,\n      userNames: props.userNames,\n      userName: props.userName,\n      emails: props.emails,\n      email: props.email,\n      prefix: props.prefix\n    };\n    this.onSubmit = this.onSubmit.bind(this); // this.validate = this.validate.bind(this)\n  }\n\n  onSubmit(values) {\n    /* let user = {\r\n         id: this.state.id,\r\n         firstName: values.firstName,\r\n         lastName: values.lastName,\r\n         userName: values.userName,\r\n         email: values.email,\r\n         targetDate: values.targetDate\r\n     }*/\n    let path = window.location.pathname;\n    let search = window.location.search;\n    let newPath = ``;\n\n    if (search.length > 1) {\n      while (search.charAt(0) === '?') {\n        search = search.substring(1);\n      }\n\n      let searchItems = search.split('&');\n\n      for (let i = 0; i < searchItems.length; i++) {\n        if (searchItems[i].startsWith('Pager.itemsPerPage=')) newPath += searchItems[i] + '&';\n      } // newPath = path + '?' + newPath + this.props.prefix + '.itemsPerPage=' + selectedOption.value;\n\n    }\n\n    let prefix = this.state.prefix;\n    if (values.firstName) newPath += prefix + '.' + values.firstName;\n    if (values.userName) newPath += prefix + '.' + values.userName;\n    newPath = path + '?' + newPath;\n    console.log('new path =' + new path()); // window.location.href = newPath;\n  }\n  /* const formik = useFormik({\r\n       // let { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email } = this.state;\r\n        initialValues: {\r\n            email: '',\r\n            job: ''\r\n        },\r\n       initialValues={ { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email }= this.state },\r\n       validate,\r\n       onSubmit: values => {\r\n           console.log(values)\r\n       }\r\n     })*/\n\n\n  render() {\n    /* const customControlStyles = base => ({\r\n         width: 100,\r\n     });*/\n\n    /*  const styles = {\r\n          container: base => ({\r\n            ...base,\r\n              flex: 1\r\n          })\r\n      };*/\n    let {\n      all,\n      firstNames,\n      firstName,\n      lastNames,\n      lastName,\n      userNames,\n      userName,\n      emails,\n      email\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          all,\n          firstNames,\n          firstName,\n          lastNames,\n          lastName,\n          userNames,\n          userName,\n          emails,\n          email\n        },\n        onSubmit: this.onSubmit,\n        enableReinitialize: true // setFieldValue\n        ,\n        children: ({\n          props,\n          setFieldValue\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"border\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row pt-3 pb-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-inline\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group col-4\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"pr-3\",\n                      children: \"first name :\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 123,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex-grow-1\",\n                      children: /*#__PURE__*/_jsxDEV(CustomSelect // styles={styles}\n                      , {\n                        items: firstNames,\n                        value: firstName,\n                        onChange: value => this.setState({\n                          firstName: value.value\n                        }) //firstName = value.value}\n\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 125,\n                        columnNumber: 41\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 124,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group col-4\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"pr-3\",\n                      children: \"user name :\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 136,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex-grow-1\",\n                      children: /*#__PURE__*/_jsxDEV(CustomSelect // styles={styles}\n                      , {\n                        items: userNames,\n                        value: userName,\n                        onChange: selected => setFieldValue(\"industry\", selected.value) // onChange={option => setFieldValue(\"userName\", option)}\n                        // onChange={value => initialValues.userName = value.value}\n                        //setFieldValue('userName')}// this.setState({ firstName: value.value })}// userName = value.value} //\n\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 138,\n                        columnNumber: 45\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group col-4\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"pr-3\",\n                      children: \"email :\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex-grow-1\",\n                      children: /*#__PURE__*/_jsxDEV(CustomSelect //  styles={styles}\n                      , {\n                        items: emails,\n                        value: email,\n                        onChange: value => email = value.value //this.setState({ firstName: value.value })}\n\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 156,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success px-5 m-3\",\n              type: \"submit\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default UserFilter;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/Filters/UserFilter.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","useFormik","CustomSelect","UserFilter","constructor","props","state","all","firstNames","firstName","lastNames","lastName","userNames","userName","emails","email","prefix","onSubmit","bind","values","path","window","location","pathname","search","newPath","length","charAt","substring","searchItems","split","i","startsWith","console","log","render","setFieldValue","value","setState","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { useFormik } from 'formik'\r\nimport CustomSelect from './CustomSelect';\r\n\r\n\r\nclass UserFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all:props.all,\r\n            firstNames: props.firstNames,\r\n            firstName: props.firstName,\r\n            lastNames: props.lastNames,\r\n            lastName: props.lastName,\r\n            userNames: props.userNames,\r\n            userName: props.userName,\r\n            emails: props.emails,\r\n            email: props.email,\r\n            prefix: props.prefix\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n       // this.validate = this.validate.bind(this)\r\n\r\n    }\r\n    \r\n\r\n    onSubmit(values) {\r\n\r\n       /* let user = {\r\n            id: this.state.id,\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            userName: values.userName,\r\n            email: values.email,\r\n            targetDate: values.targetDate\r\n        }*/\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'               \r\n\r\n            }\r\n           // newPath = path + '?' + newPath + this.props.prefix + '.itemsPerPage=' + selectedOption.value;\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        if (values.firstName)\r\n            newPath += prefix + '.' + values.firstName\r\n\r\n        if (values.userName)\r\n            newPath += prefix + '.' + values.userName\r\n\r\n        newPath = path + '?' + newPath ;\r\n        console.log('new path =' + new path);\r\n\r\n       // window.location.href = newPath;\r\n\r\n\r\n    }\r\n\r\n   /* const formik = useFormik({\r\n        // let { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email } = this.state;\r\n         initialValues: {\r\n             email: '',\r\n             job: ''\r\n         },\r\n        initialValues={ { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email }= this.state },\r\n        validate,\r\n        onSubmit: values => {\r\n            console.log(values)\r\n        }\r\n\r\n    })*/\r\n   \r\n\r\n    render() {\r\n       /* const customControlStyles = base => ({\r\n            width: 100,\r\n        });*/\r\n\r\n      /*  const styles = {\r\n            container: base => ({\r\n              ...base,\r\n                flex: 1\r\n            })\r\n        };*/\r\n\r\n\r\n        let { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email } = this.state\r\n\r\n        return (\r\n                        \r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email }}\r\n                        onSubmit={this.onSubmit}                       \r\n                    enableReinitialize={true}\r\n                   // setFieldValue\r\n                    >\r\n                    {\r\n                        ({ props, setFieldValue }) => (\r\n                                <Form>\r\n                                    <fieldset className=\"border\">\r\n\r\n                                    <div className=\"row pt-3 pb-3\">\r\n                                        <div className=\"col-12\">\r\n                                            <div className=\"form-inline\">\r\n\r\n                                    <div className=\"form-group col-4\">                                   \r\n                                                    <label className=\"pr-3\">first name :</label>\r\n                                                    <div className=\"flex-grow-1\">\r\n                                        <CustomSelect   \r\n                                           // styles={styles}\r\n                                        items={firstNames}\r\n                                        value={firstName}\r\n                                                                onChange={value =>  this.setState({ firstName: value.value })}//firstName = value.value}\r\n                                                        />\r\n                                                    </div>\r\n                                    </div>\r\n                                   \r\n\r\n                                        <div className=\"form-group col-4\">   \r\n                                                    <label className=\"pr-3\">user name :</label>\r\n                                                    <div className=\"flex-grow-1\">\r\n                                            <CustomSelect  \r\n                                               // styles={styles}\r\n                                                                items={userNames}\r\n                                                            value={userName}\r\n                                                            onChange={(selected) =>\r\n                                                                setFieldValue(\"industry\", selected.value)\r\n                                                            }\r\n                                                               // onChange={option => setFieldValue(\"userName\", option)}\r\n                                                               // onChange={value => initialValues.userName = value.value}\r\n                                                                //setFieldValue('userName')}// this.setState({ firstName: value.value })}// userName = value.value} //\r\n                                                        />\r\n                                                    </div>\r\n                                        </div>\r\n\r\n                                       \r\n                                        <div className=\"form-group col-4\">  \r\n                                            <label className=\"pr-3\">email :</label>\r\n                                                    <div className=\"flex-grow-1\">\r\n                                                <CustomSelect\r\n                                                  //  styles={styles}\r\n                                                items={emails}\r\n                                                value={email}\r\n                                                onChange={value => email = value.value} //this.setState({ firstName: value.value })}\r\n                                                        />\r\n                                                    </div>\r\n                                        </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                          \r\n                                        \r\n                                        \r\n\r\n                                        <button className=\"btn btn-success px-5 m-3\" type=\"submit\">Search</button>\r\n                                    </fieldset>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default UserFilter"]},"metadata":{},"sourceType":"module"}