{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Uni-2020\\\\Java\\\\imy-project\\\\inventory-management-system\\\\test-react-app\\\\src\\\\component\\\\Filters\\\\CategoryFilter.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport CustomSelect from './CustomSelect';\nimport './Filter.css';\n\nclass CategoryFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: props.name,\n      names: props.names,\n      filteredNames: this.filter([], props.names, props.productType),\n      productType: props.productType,\n      productTypes: props.productTypes,\n      prefix: props.prefix\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  onSubmit(values) {\n    let path = window.location.pathname;\n    let search = window.location.search;\n    let newPath = ``;\n\n    if (search.length > 1) {\n      while (search.charAt(0) === '?') {\n        search = search.substring(1);\n      }\n\n      let searchItems = search.split('&');\n\n      for (let i = 0; i < searchItems.length; i++) {\n        if (searchItems[i].startsWith('Pager.itemsPerPage=')) newPath += searchItems[i] + '&';\n      }\n    }\n\n    let prefix = this.state.prefix;\n    Object.entries(values).map(([key, value]) => {\n      if (!key.endsWith(\"s\") && value && value != 'undefined') {\n        newPath += prefix + '.' + key + '=' + value + '&';\n      }\n    });\n    newPath = newPath.substring(0, newPath.length - 1);\n    newPath = '?' + newPath;\n    newPath = this.props.onNewSearch ? newPath : path + newPath;\n    this.props.onNewSearch ? this.props.onNewSearch(newPath) : this.props.history ? this.props.history.push(newPath) : window.location.href = newPath;\n  }\n\n  resetForm() {\n    this.props.onNewSearch ? this.props.onNewSearch('') : window.location.href = window.location.pathname;\n  }\n\n  filter(subs, names, value) {\n    subs = [];\n    if (value == null) subs = names;else {\n      for (let i = 0; i < names.length; i++) {\n        if (names[i].filterBy == value || !names[i].value || names[i].value == 'undefined') {\n          subs.push(names[i]);\n        }\n      }\n    }\n    return subs;\n  }\n\n  render() {\n    //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\n    let {\n      name,\n      names,\n      productType,\n      productTypes,\n      filteredNames\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name,\n        names,\n        productType,\n        productTypes,\n        filteredNames\n      },\n      onSubmit: this.onSubmit,\n      enableReinitialize: true,\n      children: ({\n        props,\n        setFieldValue,\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"filter-form\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline px-2 mx-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"product type :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this), productTypes && productTypes.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inline\",\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                className: \"mx-2\",\n                type: \"checkbox\",\n                name: \"productType\",\n                value: type.value,\n                checked: type.name === values.productType,\n                onChange: value => {\n                  // console.log('value of checked = ' + value.target.value);\n                  if (value.target.value == values.productType) value = null;\n                  let subs = values.filteredNames;\n                  subs = this.filter(subs, values.names, value ? value.target.value : null);\n                  setFieldValue(\"productType\", value ? value.target.value : null);\n                  setFieldValue(\"filteredNames\", subs);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 45\n              }, this), type.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"category\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              className: \"inline inline-4\",\n              items: values.filteredNames || filteredNames || names,\n              value: values.name || '',\n              onChange: selected => setFieldValue(\"name\", selected.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button px-5\",\n              type: \"submit\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button btn-delete\",\n              type: \"button\",\n              onClick: this.resetForm,\n              children: \"reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CategoryFilter;","map":{"version":3,"sources":["D:/Uni-2020/Java/imy-project/inventory-management-system/test-react-app/src/component/Filters/CategoryFilter.jsx"],"names":["React","Component","Formik","Form","Field","CustomSelect","CategoryFilter","constructor","props","state","name","names","filteredNames","filter","productType","productTypes","prefix","onSubmit","bind","resetForm","values","path","window","location","pathname","search","newPath","length","charAt","substring","searchItems","split","i","startsWith","Object","entries","map","key","value","endsWith","onNewSearch","history","push","href","subs","filterBy","render","setFieldValue","type","target","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass CategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {       \r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);        \r\n        newPath =  '?' + newPath;\r\n        newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        this.props.onNewSearch ? this.props.onNewSearch(newPath) : this.props.history ? this.props.history.push(newPath) : window.location.href = newPath;\r\n       \r\n    }\r\n\r\n    resetForm() {      \r\n        this.props.onNewSearch ?\r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n         else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value || !names[i].value || names[i].value == 'undefined' ) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { name, names, productType, productTypes, filteredNames } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ name, names, productType, productTypes, filteredNames }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes&&productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                   // console.log('value of checked = ' + value.target.value);\r\n\r\n                                                    if (value.target.value == values.productType) value = null;\r\n                                                    \r\n                                                   \r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value ? value.target.value : null);\r\n                                                   \r\n                                                    setFieldValue(\"productType\", value ? value.target.value : null);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.name || ''}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                           \r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryFilter"]},"metadata":{},"sourceType":"module"}