[{"C:\\Users\\HP\\test-react-app\\src\\index.js":"1","C:\\Users\\HP\\test-react-app\\src\\App.js":"2","C:\\Users\\HP\\test-react-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\test-react-app\\src\\component\\AppInstructor.jsx":"4","C:\\Users\\HP\\test-react-app\\src\\component\\ListCoursesComponent.jsx":"5","C:\\Users\\HP\\test-react-app\\src\\service\\CourseDataService.js":"6","C:\\Users\\HP\\test-react-app\\src\\component\\CourseComponent.jsx":"7","C:\\Users\\HP\\test-react-app\\src\\service\\AuthenticationService.js":"8","C:\\Users\\HP\\test-react-app\\src\\component\\LoginComponent.jsx":"9","C:\\Users\\HP\\test-react-app\\src\\component\\LogoutComponent.jsx":"10","C:\\Users\\HP\\test-react-app\\src\\component\\MenuComponent.jsx":"11","C:\\Users\\HP\\test-react-app\\src\\component\\AuthenticatedRoute.jsx":"12","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\index.js":"13","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\App.js":"14","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\reportWebVitals.js":"15","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AppInstructor.jsx":"16","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthenticationService.js":"17","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LogoutComponent.jsx":"18","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AuthenticatedRoute.jsx":"19","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\MenuComponent.jsx":"20","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LoginComponent.jsx":"21","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CourseDataService.js":"22","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserDataService.js":"23","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthHeader.js":"24","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\PaginationComponent.jsx":"25","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserFilter.jsx":"26","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CustomSelect.jsx":"27","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\footer.jsx":"28","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\SupplierDataService.js":"29","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\SupplierFilter.jsx":"30","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDataService.js":"31","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductFilter.jsx":"32","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDataService.js":"33","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\DeliveryFilter.jsx":"34","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDetailDataService.js":"35","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCoursesComponent.jsx":"36","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CourseComponent.jsx":"37","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\SupplierComponent.jsx":"38","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductComponent.jsx":"39","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductsComponent.jsx":"40","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUsersComponent.jsx":"41","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveriesComponent.jsx":"42","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListSuppliersComponent.jsx":"43","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserComponent.jsx":"44","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryComponent.jsx":"45","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductDetails.jsx":"46","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductDetailFilter.jsx":"47","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserProfilesComponent.jsx":"48","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserProfileDataService.js":"49","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserProfileFilter.jsx":"50","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveryDetailInnerComponent.jsx":"51","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\InventoryNumberInnerComponent.jsx":"52","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryInnerComponent.jsx":"53","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DDInnerComponent.jsx":"54","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDetailDataService.js":"55","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductDetailInnerComponent.jsx":"56","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserProfileInnerComponent.jsx":"57","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\TimelineInnerComponent.jsx":"58","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CountryDataService.js":"59","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCitiesComponent.jsx":"60","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CityFilter.jsx":"61","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCountriesComponent.jsx":"62","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CountryInnerComponent.jsx":"63","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CityInnerComponent.jsx":"64","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCategoriesComponent.jsx":"65","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CategoryDataService.js":"66","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CategoryFilter.jsx":"67","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CategoryInnerComponent.jsx":"68","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserCategoriesComponent.jsx":"69","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserCategoryDataService.js":"70","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserCategoryFilter.jsx":"71","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserCategoryInnerComponent.jsx":"72"},{"size":500,"mtime":499162500000,"results":"73","hashOfConfig":"74"},{"size":641,"mtime":1607907244036,"results":"75","hashOfConfig":"74"},{"size":362,"mtime":499162500000,"results":"76","hashOfConfig":"74"},{"size":1385,"mtime":1607913834807,"results":"77","hashOfConfig":"74"},{"size":3279,"mtime":1607822944698,"results":"78","hashOfConfig":"74"},{"size":840,"mtime":1607833218581,"results":"79","hashOfConfig":"74"},{"size":3617,"mtime":1607910567406,"results":"80","hashOfConfig":"74"},{"size":1663,"mtime":1607909799563,"results":"81","hashOfConfig":"74"},{"size":5841,"mtime":1607914025390,"results":"82","hashOfConfig":"74"},{"size":405,"mtime":1607904232280,"results":"83","hashOfConfig":"74"},{"size":1428,"mtime":1607913436644,"results":"84","hashOfConfig":"74"},{"size":475,"mtime":1607901172852,"results":"85","hashOfConfig":"74"},{"size":500,"mtime":499162500000,"results":"86","hashOfConfig":"87"},{"size":641,"mtime":1607907244036,"results":"88","hashOfConfig":"87"},{"size":362,"mtime":499162500000,"results":"89","hashOfConfig":"87"},{"size":4195,"mtime":1616866361912,"results":"90","hashOfConfig":"87"},{"size":2889,"mtime":1615900821230,"results":"91","hashOfConfig":"87"},{"size":405,"mtime":1607904232280,"results":"92","hashOfConfig":"87"},{"size":473,"mtime":1614012379072,"results":"93","hashOfConfig":"87"},{"size":8482,"mtime":1616867159183,"results":"94","hashOfConfig":"87"},{"size":5249,"mtime":1616874151835,"results":"95","hashOfConfig":"87"},{"size":840,"mtime":1608419356784,"results":"96","hashOfConfig":"87"},{"size":731,"mtime":1616294986251,"results":"97","hashOfConfig":"87"},{"size":313,"mtime":1614091362802,"results":"98","hashOfConfig":"87"},{"size":6235,"mtime":1614004800012,"results":"99","hashOfConfig":"87"},{"size":5520,"mtime":1616874113754,"results":"100","hashOfConfig":"87"},{"size":1739,"mtime":1616339271978,"results":"101","hashOfConfig":"87"},{"size":409,"mtime":1608765652544,"results":"102","hashOfConfig":"87"},{"size":809,"mtime":1615149092175,"results":"103","hashOfConfig":"87"},{"size":5162,"mtime":1616874251665,"results":"104","hashOfConfig":"87"},{"size":722,"mtime":1615149092141,"results":"105","hashOfConfig":"87"},{"size":10218,"mtime":1616874184328,"results":"106","hashOfConfig":"87"},{"size":866,"mtime":1615149178562,"results":"107","hashOfConfig":"87"},{"size":9630,"mtime":1616874251648,"results":"108","hashOfConfig":"87"},{"size":1052,"mtime":1615660389975,"results":"109","hashOfConfig":"87"},{"size":3283,"mtime":1612069746581,"results":"110","hashOfConfig":"87"},{"size":3617,"mtime":1612069192554,"results":"111","hashOfConfig":"87"},{"size":11172,"mtime":1616807559551,"results":"112","hashOfConfig":"87"},{"size":15880,"mtime":1616807559531,"results":"113","hashOfConfig":"87"},{"size":10415,"mtime":1616691157425,"results":"114","hashOfConfig":"87"},{"size":8098,"mtime":1616348309355,"results":"115","hashOfConfig":"87"},{"size":51213,"mtime":1616458306216,"results":"116","hashOfConfig":"87"},{"size":7001,"mtime":1613399992182,"results":"117","hashOfConfig":"87"},{"size":18354,"mtime":1616807559521,"results":"118","hashOfConfig":"87"},{"size":39044,"mtime":1616874718808,"results":"119","hashOfConfig":"87"},{"size":14730,"mtime":1615322783923,"results":"120","hashOfConfig":"87"},{"size":16542,"mtime":1616197238281,"results":"121","hashOfConfig":"87"},{"size":25898,"mtime":1616881538102,"results":"122","hashOfConfig":"87"},{"size":1173,"mtime":1615848146218,"results":"123","hashOfConfig":"87"},{"size":13036,"mtime":1616882337117,"results":"124","hashOfConfig":"87"},{"size":11313,"mtime":1614782459747,"results":"125","hashOfConfig":"87"},{"size":6701,"mtime":1616874801360,"results":"126","hashOfConfig":"87"},{"size":7848,"mtime":1616874761076,"results":"127","hashOfConfig":"87"},{"size":13103,"mtime":1616874619258,"results":"128","hashOfConfig":"87"},{"size":741,"mtime":1615149092127,"results":"129","hashOfConfig":"87"},{"size":8350,"mtime":1616874888505,"results":"130","hashOfConfig":"87"},{"size":34112,"mtime":1616875628979,"results":"131","hashOfConfig":"87"},{"size":20313,"mtime":1615937559803,"results":"132","hashOfConfig":"87"},{"size":1056,"mtime":1616450295246,"results":"133","hashOfConfig":"87"},{"size":5440,"mtime":1616370392369,"results":"134","hashOfConfig":"87"},{"size":6032,"mtime":1616874091683,"results":"135","hashOfConfig":"87"},{"size":10329,"mtime":1616872527192,"results":"136","hashOfConfig":"87"},{"size":6238,"mtime":1616874482757,"results":"137","hashOfConfig":"87"},{"size":5774,"mtime":1616874452641,"results":"138","hashOfConfig":"87"},{"size":6688,"mtime":1616467948157,"results":"139","hashOfConfig":"87"},{"size":728,"mtime":1616460997231,"results":"140","hashOfConfig":"87"},{"size":5389,"mtime":1616463647188,"results":"141","hashOfConfig":"87"},{"size":5149,"mtime":1616874403506,"results":"142","hashOfConfig":"87"},{"size":7001,"mtime":1616520140709,"results":"143","hashOfConfig":"87"},{"size":736,"mtime":1616507341805,"results":"144","hashOfConfig":"87"},{"size":7170,"mtime":1616509726370,"results":"145","hashOfConfig":"87"},{"size":7028,"mtime":1616875040613,"results":"146","hashOfConfig":"87"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},"1i7ei4d",{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"149"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},"kghst6",{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"175"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"175"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"175"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"175"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"175"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"175"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"175"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"175"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"175"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"175"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"175"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"175"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"175"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"175"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"292","messages":"293","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"175"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"175"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"175"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"175"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\HP\\test-react-app\\src\\index.js",[],["314","315"],"C:\\Users\\HP\\test-react-app\\src\\App.js",["316"],"C:\\Users\\HP\\test-react-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\AppInstructor.jsx",["317"],"C:\\Users\\HP\\test-react-app\\src\\component\\ListCoursesComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\service\\CourseDataService.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\CourseComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\service\\AuthenticationService.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\LoginComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\component\\LogoutComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\component\\MenuComponent.jsx",["318"],"import React, { Component } from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport AuthenticationService from '../service/AuthenticationService';\r\n\r\nclass MenuComponent extends Component {\r\n    render() {\r\n\r\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n\r\n        return (\r\n            <header>\r\n\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div>\r\n                        < a href=\"#\" className=\"navbar-brand\">Inventory Management System</ a>\r\n                    </div>\r\n                    <ul className=\"navbar-nav\">\r\n                        <li><Link className=\"nav-link\" to=\"/courses\">Courses</Link></li>                        \r\n                    </ul>\r\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\r\n                        {\r\n                            !isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">\r\n                            Login</Link></li>\r\n                        }\r\n                        {\r\n\r\n                            isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\"\r\n                                onClick={AuthenticationService.logout}>Logout</Link></li>\r\n                        }\r\n\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n\r\n\r\n\r\n            )\r\n    }\r\n}\r\n\r\nexport default withRouter(MenuComponent)","C:\\Users\\HP\\test-react-app\\src\\component\\AuthenticatedRoute.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\index.js",[],["319","320"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\App.js",["321"],"import logo from './logo.svg';\nimport './App.css';\nimport AppInstructor from './component/AppInstructor';\n\nfunction App() {\n  return (\n  /*  <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>*/\n\n      <div >\n          <AppInstructor/>\n      </div>\n  );\n}\n\nexport default App;\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\reportWebVitals.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AppInstructor.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthenticationService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LogoutComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AuthenticatedRoute.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\MenuComponent.jsx",["322","323","324","325","326","327","328","329","330","331","332"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LoginComponent.jsx",["333","334","335"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CourseDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthHeader.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\PaginationComponent.jsx",["336","337","338","339","340","341","342","343","344","345","346"],"import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport '../myStyles/Paging.css'\r\n\r\n\r\nclass PaginationComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedOption: { value: `${props.itemsPerPage}`, label: `${props.itemsPerPage}` }\r\n        }\r\n        this.onPageClicked = this.onPageClicked.bind(this)\r\n        this.onCountChange = this.onCountChange.bind(this)\r\n    }\r\n\r\n    onCountChange = selectedOption => {\r\n        if (selectedOption.value == this.state.selectedOption.value) return;\r\n        //this.setState({ selectedOption: selectedOption })\r\n        let path = window.location.pathname;\r\n        let search = window.location.search; //this.props.search || window.location.search;\r\n        let newPath = ``;\r\n        if (search.length < 1) {\r\n            newPath = path + `?${this.props.prefix}.itemsPerPage=${selectedOption.value}`;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith(this.props.prefix))\r\n                    continue\r\n                else\r\n                   /* if (i === searchItems.length - 1)\r\n                        newPath += searchItems[i]\r\n                    else*/\r\n                        newPath += searchItems[i] + '&'\r\n            }\r\n            newPath = path + '?' + newPath + this.props.prefix + '.itemsPerPage=' + selectedOption.value;\r\n        }\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    onPageClicked(pageNumber) {\r\n        if (pageNumber == this.props.page) return;\r\n        if(pageNumber < 0)  pageNumber=0;\r\n        let path = window.location.pathname;\r\n        let search = window.location.search; //this.props.search || window.location.search;\r\n        let newPath = ``;\r\n        if (search.length < 1) {\r\n            newPath = path + `?${this.props.prefix}.page=${pageNumber}`;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith(this.props.prefix + '.page'))\r\n                    continue\r\n                else                    \r\n                   newPath += searchItems[i]+'&'\r\n            }\r\n            newPath = path + '?' + newPath + this.props.prefix + '.page=' + pageNumber;           \r\n        }\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    render() {\r\n        const options = [\r\n            { value: '5', label: '5'},\r\n            { value: '10', label: '10' },\r\n            { value: '20', label: '20' },\r\n            { value: '50', label: '50' },\r\n        ];\r\n\r\n        const current = this.props.page;\r\n        const { selectedOption } = this.state;\r\n        const numrows = this.props.pagesCount;\r\n        const pageNumbers = [];\r\n        if (numrows < 10)\r\n            for (let i = 1; i <= numrows; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}> <a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(i - 1)}>{i}</a></li >);\r\n            }\r\n        else {\r\n            for (let i = 1; i <= 4; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}><a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(i - 1)}>{i}</a></li>);\r\n            }\r\n            if(current + 1 > 4 && current + 1 < numrows-3 )\r\n                pageNumbers.push(<li key={current + 1} class=\"page-item active\" ><a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(current + 1)}>{current + 1}</a></li>)\r\n                \r\n            for (let i = numrows - 3; i <= numrows; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}><a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(i - 1)}>{i}</a></li>);\r\n            }\r\n        }\r\n      \r\n        let begining = this.props.page * this.props.itemsPerPage;\r\n        let ending = Number(this.props.page+1) * Number(this.props.itemsPerPage);       \r\n        begining = this.props.itemsCount >= begining + 1 ? begining += 1 : 0;\r\n        ending = this.props.itemsCount < ending ? ending = this.props.itemsCount : ending;\r\n\r\n        return (            \r\n            <div className=\" d-inline-flex justify-content-end flex-grow-1\">\r\n                <label className=\"pager-label\">showing&nbsp;{begining}-{ending}&nbsp; of &nbsp; {this.props.itemsCount}</label>               \r\n                <Select\r\n                    className=\"select\"\r\n                    value={selectedOption}\r\n                    onChange={this.onCountChange}\r\n                    options={options}\r\n                    placeholder={\"showing...\"}\r\n                />\r\n                    <nav aria-label=\"Page navigation example\" >               \r\n                    <ul class=\"pagination\">\r\n                            <li class=\"page-item\"><a class=\"page-link\" aria-label=\"Previous\" href=\"#\" onClick={() => this.onPageClicked(this.props.page - 1)} >\r\n                                <span aria-hidden=\"true\">&laquo;</span>\r\n                                <span class=\"sr-only\">Previous</span>\r\n                                </a></li>\r\n                            <ul class=\"pagination\">\r\n                            {\r\n                                pageNumbers\r\n                            }\r\n                            </ul>\r\n                            <li class=\"page-item\"><a class=\"page-link\" aria-label=\"Next\" href=\"#\" onClick={() => this.onPageClicked(this.props.page + 1)}>\r\n                                <span aria-hidden=\"true\">&raquo;</span>\r\n                                <span class=\"sr-only\">Next</span>\r\n                                </a></li>\r\n                    </ul>\r\n                    </nav>                 \r\n            </div>               \r\n            )\r\n    }\r\n}\r\n\r\nexport default PaginationComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserFilter.jsx",["347","348","349"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CustomSelect.jsx",["350","351"],"import React from 'react'\r\nimport Select from 'react-select'\r\nimport './Filter.css'\r\n\r\nexport default ({ onChange, items, value, className, defaultMenuIsOpen, disabled , name}) => {\r\n\r\n    const options = []\r\n\r\n    const getOptions = (items) => {\r\n        if (items == null) return;\r\n        if (options.length < 1) {\r\n           // console.log(\"item options i = \" + JSON.stringify(items));\r\n            for (let i = 0; i < items.length; i++) {\r\n               \r\n                //console.log(\"`${items[i][name].name}` = \" + `${items[i][name].name}`);\r\n                //console.log(\"`${items[i][name].name}` = \" + `${items[i][name].name}`);\r\n                options.push(\r\n                    { value: `${items[i].value || items[i].id}`, label: `${items[i].name || (items[i][name] && items[i][name].name) || '...'}` })\r\n            }\r\n           \r\n        }\r\n       // console.log(\"options = \"+JSON.stringify(options))\r\n        return options\r\n    }\r\n    \r\n    const defaultValue = (options, value) => {\r\n        //console.log('value = ' + value + ' option.value = ' + option.value);\r\n        //console.log('value= option.value = ' + (option.value == value));\r\n        return options ? options.find(option => option.value == value) : \"\"\r\n    }\r\n\r\n    return (\r\n       \r\n                <Select\r\n            className={className}\r\n            options={getOptions(items)}\r\n            value={defaultValue(options, value)}\r\n            onChange={value => onChange(value)}\r\n            placeholder={\"...\"}\r\n            autosize={true}\r\n            clearable={true}\r\n            isSearchable={true}\r\n            defaultMenuIsOpen={defaultMenuIsOpen}\r\n            isDisabled={disabled}\r\n            \r\n\r\n                />\r\n       \r\n        )\r\n}","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\footer.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\SupplierDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\SupplierFilter.jsx",["352","353","354"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nclass SupplierFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            name: props.name,\r\n            names: props.names,\r\n            phoneNumber: props.phoneNumber,\r\n            phoneNumbers: props.phoneNumbers,\r\n            ddcnumber: props.ddcnumber,\r\n            ddcnumbers: props.ddcnumbers,\r\n            emails: props.emails,\r\n            email: props.email,\r\n            prefix: props.prefix\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            if (!key.endsWith(\"s\") && value && value.length > 1) {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({\r\n            all: '',\r\n            name: '',\r\n            phoneNumber: '',\r\n            ddcnumber: '',\r\n            email: '',\r\n        });\r\n        console.log('in reset form ');\r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, name, names, phoneNumber, phoneNumbers, ddcnumber, ddcnumbers, email, emails } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ all, name, names, phoneNumber, phoneNumbers, ddcnumber, ddcnumbers, email, emails }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={names}\r\n                                    value={name}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >phone number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2\"}\r\n                                    items={phoneNumbers}\r\n                                    value={phoneNumber}\r\n                                    onChange={(selected) => setFieldValue(\"phoneNumber\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>DDC number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2\"}\r\n                                    name=\"ddcNumber\"\r\n                                    items={ddcnumbers}\r\n                                    value={ddcnumber}\r\n                                    onChange={(selected) => setFieldValue(\"ddcNumber\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >email&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                    items={emails}\r\n                                    value={email}\r\n                                    onChange={(selected) => setFieldValue(\"email\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SupplierFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductFilter.jsx",["355","356","357","358","359","360","361","362"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\DeliveryFilter.jsx",["363","364","365"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDetailDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCoursesComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CourseComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\SupplierComponent.jsx",["366"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport SupplierDataService from '../service/SupplierDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect'\r\n\r\nclass SupplierComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            phoneNumber: '',\r\n            ddcnumber: '',\r\n            email: '',\r\n            //phoneCodes: [],\r\n           // defaultCodeValue: '',\r\n            //selectedCode:''\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.id)\r\n        if (this.state.id === -1) {\r\n            return\r\n        }\r\n        SupplierDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n               // console.log(\"response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    name: response.data.name||'',\r\n                    phoneNumber: response.data.phoneNumber||'',\r\n                    ddcnumber: response.data.ddcnumber||'',\r\n                    email: response.data.email,\r\n                   // phoneCodes: response.data.phoneCodes,\r\n                   // defaultCodeValue: response.data.defaultCodeValue\r\n                })\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n       /* if (values.phoneNumber.length > 1) {\r\n            let phone = this.getPhone();           \r\n        }*/\r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            phoneNumber: this.getTrimmedNumber(values.phoneNumber),//.length > 1 ? this.getCode() + \"/\" + values.phoneNumber : null,\r\n            ddcnumber: values.ddcnumber,\r\n            email: values.email,\r\n            targetDate: values.targetDate\r\n        }\r\n        console.log('item = ' + JSON.stringify(item));\r\n        SupplierDataService.save(item)\r\n            .then(() => this.props.history.push('/suppliers'))\r\n            .catch(error => {\r\n               // console.log(\"error\" + error);\r\n                console.log(\"error.response.data = \" + JSON.stringify(error.response.data))\r\n                //console.log(\"error.response.data.errors = \" + JSON.stringify(error.response.data.errors))\r\n                //console.log(\"error.response.data.errors[0].codes) = \" + JSON.stringify(error.response.data.errors[0].codes))\r\n               // console.log(\"error.response.data.errors[0].defaultmsg) = \" + error.response.data.errors[0].defaultMessage)\r\n                let msg = \"\"+ error.response && typeof error.response.data == 'string' ?\r\n                    error.response.data : error.response.data.errors ?\r\n                       error.response.data.errors[0].defaultMessage : error.response.data.message;\r\n               // console.log(\"msg = \" + msg)\r\n                //console.log(\"msg.indexOf nop = \" + (msg.indexOf(\"nop\")))\r\n                //console.log(\"msg.indexOf phone  > 0 = \" + (msg.indexOf(\"phone\") > 0))\r\n                if (msg.indexOf(\"phone\") > -1)\r\n                    actions.setErrors({ phoneNumber: msg }) \r\n                if (msg.indexOf(\"name\") > -1)\r\n                    actions.setErrors({ name: msg }) \r\n                if (msg.indexOf(\"ddcnumber\") > -1)\r\n                    actions.setErrors({ ddcnumber: msg }) \r\n                if (msg.indexOf(\"email\") > -1)\r\n                    actions.setErrors({ email: msg }) \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n\r\n               \r\n               \r\n            } )\r\n    }\r\n\r\n    getTrimmedNumber(value) {\r\n        if (value == null || value.length < 1) return;\r\n       value = value.trim();\r\n        value = value.replace(/ +/g, \" \");\r\n        return value;\r\n    }\r\n\r\n   /* getCode() {\r\n        let code = (this.state.defaultCodeValue.name || this.state.defaultCodeValue.label);\r\n        code = code.substring(code.indexOf(\"/\")+1, code.length);\r\n        return code;\r\n    }*/\r\n\r\n    validate(values) {\r\n\r\n       // console.log(\"values = \" + JSON.stringify(values));\r\n       /* console.log(\"(validating values = \");\r\n        console.log(\"(values.phoneNumber.length = \" + (values.phoneNumber.length));\r\n        console.log(\"(values.phoneNumber.length > 1 = \" + (values.phoneNumber.length > 1));\r\n        console.log(\"(values.phoneNumber[0] = \" + (values.phoneNumber[0]));\r\n        console.log(\"(values.phoneNumber[0]==0 = \" + (values.phoneNumber[0] == \"0\"));*/\r\n\r\n\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.userName = 'Enter atleast 5 Characters'\r\n        } else if (values.name.length >50) {\r\n            errors.userName = 'too Long Max is 50 charachters'\r\n        }\r\n\r\n        if (!values.ddcnumber) {\r\n            errors.ddcnumber = 'required field !!!'\r\n        } else if (values.ddcnumber.length < 4) {\r\n            errors.ddcnumber = 'Enter at least 4 Characters'\r\n        } else if (values.ddcnumber.length > 15) {\r\n            errors.ddcnumber = 'Enter max 15 Characters'\r\n        } \r\n\r\n       /* if (!values.email) {\r\n            errors.email = 'required field !!!'\r\n        } else if (values.email.length < 4) {\r\n            errors.email = 'Enter atleast 4 Characters'\r\n        }*/\r\n\r\n       /* if (values.phoneNumber&&values.phoneNumber.length > 1 && values.phoneNumber[0]==\"0\") {\r\n            errors.phoneNumber = 'phone number must be without leading 0 !!!'\r\n        } else if (values.phoneNumber.length > 15)\r\n            errors.phoneNumber = 'phone number too long !!!'*/\r\n\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n       // this.props.history.push('/suppliers')\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        let { id, name, phoneNumber, ddcnumber, email } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Supplier</h3> : <h3 className=\"mb-3\"> Add New Supplier </h3>}\r\n                <Formik\r\n                    initialValues={{ id, name, phoneNumber, ddcnumber, email }}\r\n                    onSubmit={(values, actions)=>this.onSubmit(values, actions)}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        ({ setFieldValue, values, dirty }) => (\r\n                            <Form>\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <Field className=\"form-control \" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group w-50\">\r\n                                    <label className=\"required-field\">name</label>\r\n                                    <Field className=\"form-control \" type=\"text\" name=\"name\" />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning \" />\r\n                                </fieldset>\r\n                                {/* <fieldset className=\"d-flex\">*/}\r\n                                    {/*  <fieldset className=\"form-group inline w-25\">\r\n                                    <label>country/code</label>\r\n                                        <CustomSelect\r\n                                            style={{overflow:\"auto\"}}\r\n                                        className=\"\"\r\n                                        items={this.state.phoneCodes}\r\n                                            value={this.state.defaultCodeValue.value}\r\n                                            onChange={(value) => {\r\n                                                this.setState({\r\n                                                    defaultCodeValue: value,\r\n                                                    //selectedCode: value.label.substring(value.label.indexOf('+'), value.label.length)\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                        <ErrorMessage name=\"phoneCode\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                </fieldset>*/}\r\n                                    {/* <fieldset className=\"form-group inline\">\r\n                                        <label>code</label>\r\n                                        <p className=\"form-group mt-2 border-bottom\">+{this.state.defaultCodeValue}</p>\r\n                                    </fieldset>*/}\r\n                                <fieldset className=\"form-group inline w-25\">\r\n                                    <label>phone number</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"phoneNumber\" />\r\n                                    <ErrorMessage name=\"phoneNumber\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n                                {/* </fieldset>*/}\r\n                                <fieldset className=\"form-group w-25\">\r\n                                    <label className=\"required-field\">DDC number</label>\r\n                                    <Field className=\"form-control \" type=\"text\" name=\"ddcnumber\" />\r\n                                    <ErrorMessage name=\"ddcnumber\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group w-50\">\r\n                                    <label>email</label>\r\n                                    <Field className=\"form-control \" type=\"email\" name=\"email\" />\r\n                                    <ErrorMessage name=\"email\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                {//console.log(\"values = \" + JSON.stringify(values))\r\n                                }\r\n                                <fieldset className=\"form-group mt-5\">  \r\n                                <button className=\"btn btn-mybtn p-x-5\" type=\"submit\" disabled={!dirty}>Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SupplierComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductComponent.jsx",["367","368","369","370","371"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\nclass ProductComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            description: '',\r\n            productType: '',\r\n            productTypes: [],           \r\n            userCategoryId: '',          \r\n            userCategories: [],\r\n            filteredUserCategories:[],\r\n            //categories: [],           \r\n            amortizationPercent: '',\r\n            //maxamortization: 100,\r\n           // selectedCategoryId: '',\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n       \r\n        ProductDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                console.log('got response in component did mount = ' + JSON.stringify(response));\r\n                if (this.state.id > 0) {\r\n                    this.setState({\r\n                        name: response.data.name||'',\r\n                        description: response.data.description||'',\r\n                        productType: response.data.productType||'',\r\n                        userCategoryId: response.data.userCategoryId||'',//response.data.productType == 'DMA' ? response.data.subCategory : '',\r\n                       // selectedCategoryId: response.data.productType == 'DMA' ? response.data.subCategory.category.id : '',\r\n                        amortizationPercent: response.data.amortizationPercent||''\r\n                    })\r\n                }\r\n                this.setState({\r\n                    productTypes: response.data.productTypes||[],\r\n                    userCategories: response.data.userCategories||[],\r\n                    filteredUserCategories: response.data.userCategories||[],\r\n                    //categories: response.data.categories,\r\n                });\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            description: values.description,\r\n            // productType: values.productType,\r\n            userCategoryId: /*values.productType == 'DMA' ?*/ values.userCategoryId,//: null,\r\n            //amortizationPercent: values.productType == 'DMA' ? values.amortizationPercent : null,           \r\n            targetDate: values.targetDate\r\n        }\r\n        ProductDataService.save(item)\r\n            .then(() => this.props.history.push('/products'))\r\n            .catch(error =>\r\n            {\r\n                let msg = \"\" + error.response && typeof error.response.data == 'string' ?\r\n                    error.response.data : error.response.data.errors ?\r\n                        error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                            error.response.data.message : error;\r\n               // console.log(\"error \" + error)\r\n                actions.setErrors({ phoneNumber: msg })\r\n                if (msg.indexOf(\"name\") > -1)\r\n                    actions.setErrors({ name: msg }) \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.name = 'Enter atleast 5 Characters'\r\n        }\r\n\r\n       /* if (!values.productType) {\r\n            errors.productType = 'required field !!!'\r\n        }*/\r\n\r\n       /* if (values.productType === 'DMA') {\r\n\r\n            if (!values.categories)\r\n                errors.categories = 'required field !!!'*/\r\n        console.log(\"values.userCategryId = \" + values.userCategoryId)\r\n            if (!values.userCategoryId) {\r\n                errors.userCategoryId = 'required field !!!'\r\n            }\r\n           /* if (!values.amortizationPercent) {\r\n                errors.amortizationPercent = 'required field !!!'\r\n            }*/\r\n        //  }\r\n        console.log(\"errors = \" + JSON.stringify(errors))\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        //this.props.history.push('/products')\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        console.log('rendering');\r\n        const precent = \"%\";\r\n        let { id, name, description,  userCategoryId/*, productType, productTypes, amortizationPercent, userCategories,\r\n            filteredUserCategories*/ /*, maxamortization, selectedCategoryId*/ /*categories,*/ } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Product</h3> : <h3 className=\"mb-3\"> Add New Product </h3>}\r\n                <Formik\r\n                    initialValues={{\r\n                        id, name, description, userCategoryId/*, productTypes, amortizationPercent, productType ,\r\n                        userCategories, filteredUserCategories */ /*, maxamortization, selectedCategoryId*/  /*categories,*/\r\n                    }}\r\n                    onSubmit={(values, actions) => this.onSubmit(values, actions)}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        ({ setFieldValue, values, dirty}) => (\r\n                            <Form>\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label className=\"required-field\">name</label>\r\n                                    <Field className=\"form-control w-50\" type=\"text\" name=\"name\"\r\n                                   />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning  w-25\" />\r\n                                </fieldset>\r\n                                \r\n                                <fieldset className=\"form-group\">\r\n                                    <label>product type</label>\r\n                                    {\r\n                                        this.state.productTypes.map((type) =>\r\n                                            <label className=\"mx-3\">\r\n                                                <Field\r\n                                                    className=\"mx-1\"\r\n                                                    type=\"radio\" name=\"productType\" value={type.value}\r\n                                                    checked={this.state.productType == type.value}\r\n                                                    onChange={(value) => {\r\n                                                        // console.log(\"value producttype = \" + JSON.stringify(value.target.value));\r\n                                                        /*setFieldValue(\"productType\", value.target.value);*/\r\n                                                        this.setState({ productType: value.target.value })\r\n                                                    ;\r\n                                                        //setFieldValue(\"amortizationPercent\", '');\r\n                                                        //setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\r\n\r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < this.state.userCategories.length; i++) {\r\n\r\n                                                            if (this.state.userCategories[i].category.productType == value.target.value) {\r\n                                                                subs.push(this.state.userCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        /*setFieldValue(\"filteredUserCategories\", subs);*/\r\n                                                        this.setState({ filteredUserCategories: subs })\r\n                                                    }\r\n                                                    }\r\n                                                   \r\n                                                    />\r\n                                                {type.name}\r\n                                    </label>)\r\n                                    }\r\n                                   \r\n                                    <ErrorMessage name=\"productType\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                {/*\r\n                                    values.productType=='DMA'  ? (\r\n                                   \r\n                                    <div>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>category</label>\r\n                                                <CustomSelect      \r\n                                                    id=\"selectedCategoryId\"\r\n                                                    name=\"selectedCategoryId\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={categories}\r\n                                                    value={subCategory !== '' ? subCategory.category.id : ''}\r\n                                                    onChange={(value) => {\r\n                                                        setFieldValue(\"selectedCategoryId\", value.value);\r\n                                                        setFieldValue(\"amortizationPercent\", '');\r\n                                                        setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\r\n                                                        \r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < values.subCategories.length; i++) {\r\n                                                          \r\n                                                            if (values.subCategories[i].category.id == value.value) {\r\n                                                                subs.push(values.subCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        setFieldValue(\"filteredSubCategories\", subs);\r\n                                                    }\r\n                                                    }\r\n                                      \r\n                                            />\r\n                                        <ErrorMessage name=\" selectedCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    ) : null\r\n                               */ }                        \r\n                               \r\n                                        \r\n                                        <fieldset className=\"form-group\">\r\n                                        <label className=\"required-field\">category</label>\r\n                                        <CustomSelect\r\n                                                    name=\"category\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={this.state.filteredUserCategories}//categories.find(c => c.id == values.selectedCategoryId).subCategories}\r\n                                                    value={values.userCategoryId}\r\n                                                    onChange={(value) => {\r\n                                                        let sub = this.state.filteredUserCategories.find(s => s.id == value.value);\r\n                                                        setFieldValue(\"userCategoryId\", value.value);\r\n                                                        console.log(\"sub = \" + JSON.stringify(sub));\r\n                                                        this.setState({\r\n                                                            amortizationPercent: sub.amortizationPercent,\r\n                                                            //productType: this.state.productType == '' ? sub.category.productType\r\n                                                        })\r\n                                                       // setFieldValue(\"amortizationPercent\", sub.amortizationPercent)\r\n                                                        if (this.state.productType == '')\r\n                                                            this.setState({                                                              \r\n                                                                productType: sub.category.productType\r\n                                                            })\r\n                                                            //setFieldValue(\"productType\", sub.category.productType)\r\n                                                    }}\r\n                                        />\r\n                                        <ErrorMessage name=\"userCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning w-50\" />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>amortization percent</label><br/>\r\n                                        <Field className=\"form-control ws inline pt-2 pb-2\" readOnly type=\"number\" value={this.state.amortizationPercent}  />&nbsp;%\r\n                                                \r\n                                            </fieldset>\r\n                                       \r\n                               \r\n\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>description</label>\r\n                                    <Field className=\"form-control w-50\" as=\"textarea\" type=\"textarea\" name=\"description\" />\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group mt-5\">    \r\n                                <button className=\"btn btn-mybtn p-x-5\" disabled={!dirty} type=\"submit\">Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductsComponent.jsx",["372","373","374","375","376"],"import React, { Component } from 'react';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport ProductFilter from './Filters/ProductFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nconst headers = [\r\n    { label: \"Name\", key: \"name\" },\r\n    { label: \"product Type\", key: \"productType\" },\r\n    { label: \"amortization Percent\", key: \"amortizationPercent\" },\r\n    { label: \"sub-Category\", key: \"subCategory\" }\r\n];\r\n\r\nclass ListProductsComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            showdts: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n       ProductDataService.retrieveAll(this.state.search)\r\n            .then(\r\n           response => {\r\n               console.log(\"items = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        ProductDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        ProductDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            let errormsg = error.response && error.response.data ?\r\n                error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n            //let errormessage = this.state.dderrormessage;\r\n            let msg = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n            msg = msg.indexOf(\"ConstraintViolationException\") > -1 ? \"can't delete item with associated records !!!\" : msg\r\n            this.setState({\r\n                errormsg: msg\r\n            })\r\n        })\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/products/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/products/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }   \r\n\r\n    render() {\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3\">\r\n               \r\n                {this.state.filter && <ProductFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 pb-3\">\r\n                            <strong> Products</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"products-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"products-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormas: null })}></i></div>}\r\n                       \r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n\r\n                        <table className=\"table border-bottom my-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\" className=\"ws\">product Type</th>\r\n                                    <th scope=\"col\">category</th>\r\n                                  \r\n                                    <th scope=\"col\" className=\"ws\">amortization</th>\r\n                                    <th scope=\"col\" className=\"ws\">total</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        (item, i) =>\r\n                                           <>\r\n                                                <tr scope=\"row\" key={item.id}>\r\n                                                    <td className=\"hoverable\"\r\n                                                        onClick={() => {\r\n                                                            let showdts = this.state.showdts;\r\n                                                            if (showdts == undefined) showdts = [];\r\n                                                            showdts[i] = showdts[i] ? false : true;\r\n                                                            this.setState({ showdts: showdts })\r\n                                                        }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                            aria-hidden=\"true\"></i></td>\r\n                                                <td className=\"hoverable\"\r\n                                                    onClick={() => {\r\n                                                        this.props.history.push(`/productDetails?Filter.productId=${item.id}`)\r\n                                                    }}>{item.name}</td>\r\n                                                <td>{item.userCategory.category.productType}</td>\r\n                                                <td>{ item.userCategory.category.name }</td>\r\n\r\n                                                <td>{item.userCategory.category.productType =='LTA'? item.userCategory.amortizationPercent + '%' : '-' }</td>\r\n                                                <td>{item.total ? item.total : '0'}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                                </tr>\r\n                                                {this.state.showdts && this.state.showdts[i] &&\r\n                                                    <tr >\r\n                                                        <td></td>\r\n                                                    <td colSpan=\"1\">description :&nbsp;</td>\r\n                                                    <td colSpan=\"4\" className=\"pt-3 pb-3 bold-border-bottom\">\r\n                                                        {item.description}\r\n                                                    </td>\r\n                                                    <td></td>\r\n                                                        \r\n\r\n                                                    </tr>}       \r\n                                                </>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListProductsComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUsersComponent.jsx",["377","378","379"],"import React, { Component } from 'react';\r\nimport UserDataService from '../service/UserDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserFilter from './Filters/UserFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport AuthenticationService from '../service/AuthenticationService'\r\n\r\nconst headers = [\r\n    { label: \"First Name\", key: \"firstName\" },\r\n    { label: \"Last Name\", key: \"lastName\" },\r\n    { label: \"User Name\", key: \"userName\" },\r\n    { label: \"Email\", key: \"email\" }\r\n];\r\n\r\n\r\n\r\nclass ListUsersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();       \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        UserDataService.retrieveAll(this.state.search)\r\n            .then(\r\n            response => {\r\n                console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        UserDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items }); \r\n                this.csvLink.current.link.click()\r\n        })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n       UserDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n            )\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/users/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/users/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null})\r\n    }\r\n\r\n    render() {\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3\">\r\n                    {this.state.filter && <UserFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                            <h5 className=\"panel-title p-2 pb-3\">\r\n                                <strong> Users</strong>\r\n                            </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap \">\r\n                                <div >\r\n                                    <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"users-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\"); \r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"users-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                                </div>                              \r\n                                    {this.state.pager && <PaginationComponent {...this.state.pager} />}                              \r\n                            </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}<i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n\r\n                      \r\n                    <table className= \"table border-bottom my-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>first name</th>\r\n                                <th>last name</th>\r\n                                <th>user name</th>\r\n                                    <th>email</th>\r\n                                    {console.log(\"userRole  = \" + (userRole))}\r\n                                    {console.log(\"userRole === 'ROLE_Admin'  = \"+(userRole === 'ROLE_Admin' ))}\r\n                                    {userRole === 'ROLE_Admin' && <th> city </th>}\r\n                                    {userRole =='ROLE_Mol' && <th>profiles</th>}\r\n                                <th>Update &emsp;&nbsp; Delete</th>                                                                     \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                    item =>\r\n                                        <tr key={item.id}>\r\n                                            <td>{item.firstName}</td>\r\n                                            <td>{item.lastName}</td>\r\n                                            <td>{item.userName}</td>\r\n                                            <td>{item.email}</td>\r\n                                            {userRole === 'ROLE_Admin' && <td> {item.countryName}/{item.cityName} </td>}\r\n                                            {userRole == 'ROLE_Mol' && <td className=\"hoverable\"\r\n                                                onClick={() => {\r\n                                                    this.props.history.push(`/userProfiles?Filter.userId=${item.id}`);\r\n                                                }}>&nbsp;>></td>}\r\n                                            <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                            </table>\r\n                       \r\n                </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ListUsersComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveriesComponent.jsx",["380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409"],"import React, { Component } from 'react';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport DeliveryFilter from './Filters/DeliveryFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\n//import ListDeliveryDetailInnerComponent from './ListDeliveryDetailInnerComponent';\r\nimport InventoryNumberInnerComponent from './InventoryNumberInnerComponent';\r\nimport DeliveryInnerComponent from './DeliveryInnerComponent'\r\nimport DDInnerComponent from './DDInnerComponent'\r\n\r\nconst headers = [\r\n    { label: \"number\", key: \"number\" },\r\n    { label: \"date\", key: \"date\" },\r\n    { label: \"supplier\", key: \"supplierName\" },\r\n    { label: \"total bill\", key: \"total\" },  \r\n];\r\nconst headers2 = [\r\n    { label: \"delivery\", key: \"number\" },\r\n    { label: \"date\", key: \"date\" },\r\n    { label: \"supplier\", key: \"supplierName\" },    \r\n    { label: \"product\", key: \"productName\" },\r\n    { label: \"quantity\", key: \"quantity\" },\r\n    { label: \"unit price\", key: \"pricePerUnit\" },\r\n];\r\n\r\nclass ListDeliveriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],            \r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            message: null,\r\n            ddmessage: [],\r\n            dderrormessage:[],\r\n            ddShow: [],\r\n            pdShow: [],\r\n            pdmessage: [],\r\n            pdUpdateShow: {\r\n                pd: {}, show: false\r\n            },\r\n            ddUpdateShow: {\r\n                dd: {}, show: false\r\n            },\r\n            \r\n            deliveryUpdateShow: {\r\n                delivery: {},show:false}\r\n           \r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n       // this.deleteChildClicked = this.deleteChildClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"version = \" + React.version);\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        DeliveryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n            response => {\r\n                \r\n               this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                   deliveryView: response.data.deliveryView || 'DeliveryView',\r\n                   //pdShow: [],\r\n                        //search: this.getSearchString()\r\n               });\r\n           }).catch((error) => {\r\n               this.setState({                  \r\n                   errormsg:  ''+ error == 'Error: Request failed with status code 401' ?  'need to login again !!!' : '' + error\r\n               })\r\n           })\r\n    }\r\n\r\n    /*\r\n    getSearchString = () => {\r\n        let search = window.location.search || '';\r\n        let index = search.indexOf(\"&deliveryView=DeliveryDetailView&\");\r\n        if (index > 0) {\r\n            search = search.replace(\"&deliveryView=DeliveryDetailView&\", \"\");\r\n            \r\n            // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n        }\r\n        else {\r\n            index = search.indexOf(\"deliveryView=DeliveryDetailView&\");\r\n            if (index > 0) {\r\n                search = search.replace(\"deliveryView=DeliveryDetailView&\", \"\");\r\n                // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n            }\r\n            index = search.indexOf(\"&deliveryView=DeliveryDetailView\");\r\n            if (index > 0) {\r\n                search = search.replace(\"&deliveryView=DeliveryDetailView\", \"\");\r\n                // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n            }\r\n            else {\r\n                index = search.indexOf(\"deliveryView=DeliveryDetailView\");\r\n                if (index > 0) {\r\n                    search = search.replace(\"deliveryView=DeliveryDetailView\", \"\")\r\n                    // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n                }\r\n            }\r\n        }\r\n       \r\n        if (search == '?') search = '';\r\n        console.log(\"search = \" + search);\r\n        return search\r\n    }*/\r\n\r\n   /* getRetrieveSearchString = () => {\r\n        let search = this.state.search;\r\n        if (this.state.deliveryView == 'DeliveryDetailView') {\r\n            console.log(\"search = \"+search)\r\n        }\r\n       \r\n            return search\r\n       \r\n    }*/\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        DeliveryDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                //console.log(\"data has childs = \" + (response.data.deliveryDetails != null));\r\n                let downloadData = [];\r\n                let data = response.data.items || response.data.daoitems;\r\n                data = data.map(row => ({\r\n                    ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                        month: \"numeric\",\r\n                        day: \"2-digit\",\r\n                        year: \"numeric\",\r\n                    }).format(new Date(row.date))\r\n                }));\r\n                if (this.state.deliveryView == 'DeliveryDetailView') {\r\n                    this.getDetailData(data, downloadData);\r\n                   \r\n                } else {\r\n\r\n                    downloadData = data\r\n                }\r\n\r\n                this.setState({\r\n                    alldata: downloadData\r\n                });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getDetailData = (data, arr) => {\r\n        data.map(i => {\r\n            i.deliveryDetails.map(x => {\r\n                arr.push({\r\n                    number: i.number,\r\n                    date: i.date,\r\n                    supplierName: i.supplierName,\r\n                    productName: x.productName,\r\n                    quantity: x.quantity,\r\n                    pricePerUnit: x.pricePerOne\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;       \r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n        }\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        newSearch += 'Pager.itemsPerPage=2147483647';       \r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id, x) {\r\n        \r\n        DeliveryDataService.delete(id)\r\n            .then(\r\n            response => {\r\n                let show = this.state.pdShow;\r\n                if (this.state.items[x]) {\r\n                    show.splice(x, 1);                   \r\n                }\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                    pdShow: show,\r\n                    pdmessage: [],\r\n                    ddmessage:[]\r\n                })\r\n                    this.refresh()\r\n                }\r\n            )\r\n    }\r\n\r\n    /**\r\n     * ******************\r\n     * @param {any} id\r\n     */\r\n    \r\n    deleteChildClicked(id, x, y, parentid) {//child id\r\n        \r\n        DeliveryDataService.deleteChild(id, parentid)\r\n            .then(\r\n            response => {\r\n                let length = this.state.items[x].deliveryDetails.length;\r\n\r\n                let show = this.state.pdShow;\r\n                if (this.state.pdShow[x] == undefined) show[x] = [];\r\n\r\n                let ddmessage = this.state.ddmessage;\r\n                let message = this.state.message;\r\n                let pdmessage = this.state.pdmessage;\r\n                pdmessage = [];\r\n              \r\n               /* if (length == 1) {\r\n                    show.splice(x, 1);\r\n                    message = `Delete successful`;\r\n                    ddmessage = []\r\n                } else {*/\r\n                    if (this.state.pdShow[x][y] == undefined) show[x][y] = {}\r\n                    show[x].splice(y, 1);\r\n                    ddmessage[x] = `Delete successful`;\r\n                    message = ''\r\n                //}\r\n\r\n                this.setState({\r\n                    pdShow: show,\r\n                    pdmessage: pdmessage,\r\n                    ddmessage: ddmessage,\r\n                    message: message\r\n                }) \r\n               \r\n                    this.refresh()\r\n            }\r\n        ).catch(error => {\r\n            let errormsg = error.response && error.response.data ?\r\n                error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n            let dderrormessage = this.state.dderrormessage;\r\n            dderrormessage[x] = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n            this.setState({\r\n                dderrormessage: dderrormessage,\r\n            })\r\n            })\r\n    }\r\n\r\n    /**********************************/\r\n    \r\n    deletePDChildClicked = (value, x, y, id) => {       \r\n       /* if (this.state.items[x].deliveryDetails[y].quantity == 1) {\r\n            \r\n            this.deleteChildClicked(id,x,y)            \r\n        }\r\n        else {*/\r\n            ProductDetailDataService.delete(value)\r\n                .then(\r\n                    response => {                       \r\n                        ProductDetailDataService.retrieveAllNumbers(\"?deliveryDetailId=\" + id)\r\n                            .then(response => {\r\n                                let show = this.state.pdShow;\r\n                                show[x][y].data = response.data;\r\n                                let items = this.state.items;\r\n                                items[x].deliveryDetails[y].quantity = items[x].deliveryDetails[y].quantity - 1;\r\n                                items[x].total = items[x].total - items[x].deliveryDetails[y].pricePerOne;\r\n                                let pdmessages = this.state.pdmessage;                               \r\n                                if (pdmessages[x] == null) pdmessages[x] = [];\r\n                                pdmessages[x][y] = `Delete successful`;\r\n\r\n                                this.setState({\r\n                                    items: items,\r\n                                    pdShow: show,\r\n                                    pdmessage: pdmessages,\r\n                                    message: '',\r\n                                    ddmessage:[]\r\n                                })\r\n                            }).catch(error => {\r\n                                let pdmessages = this.state.pdmessage;\r\n                                if (pdmessages[x] == null) pdmessages[x] = [];\r\n                                pdmessages[x][y] = `error ` + error;\r\n                                this.setState({                                    \r\n                                    pdmessage: pdmessages,                                   \r\n                                })\r\n                            })                       \r\n                    })\r\n       // }\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.state.deliveryView == 'DeliveryDetailView' ? \r\n            this.props.history.push(`/deliveries/${id}/DeliveryDetailView`) :\r\n            this.props.history.push(`/deliveries/${id}`)\r\n    }\r\n\r\n    updateClickedInner = (item, x) => {\r\n       /* let messages = this.state.message;\r\n        if (messages != null )\r\n            messages = null;*/ \r\n\r\n        let show = this.state.deliveryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.delivery = JSON.parse(JSON.stringify(item))\r\n            show.x = x;            \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            deliveryUpdateShow: show,\r\n            message: null,\r\n            pdmessage: [],\r\n            ddmessage:[]\r\n        });     \r\n    }\r\n\r\n    updateChildClicked = (dd, x, y) => {\r\n\r\n       /* let ddmessages = this.state.ddmessage;\r\n        if (ddmessages[x] != null )\r\n            ddmessages[x] = null;*/\r\n\r\n        let show = this.state.ddUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.dd = JSON.parse(JSON.stringify(dd))\r\n            show.x = x;\r\n            show.y = y;\r\n           \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            ddUpdateShow: show,\r\n            ddmessage: [],\r\n            pdmessage: [],\r\n            message:null\r\n        });      \r\n    }\r\n   \r\n    updatePdChildClicked = (pd, x, y, i, ddid) => {    \r\n       /* let pdmessages = this.state.pdmessage;\r\n        if (pdmessages[x] != null && pdmessages[x][y] != null) \r\n            pdmessages[x][y] = null; */     \r\n\r\n        let show = this.state.pdUpdateShow ;       \r\n        show.show = !show.show;\r\n        if (show.show == true) {          \r\n            show.pd = JSON.parse(JSON.stringify(pd))\r\n            show.x = x;\r\n            show.y = y;\r\n            show.i = i;\r\n            show.ddid = ddid;\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            pdUpdateShow: show,\r\n            //pdmessage: pdmessages,\r\n            ddmessage: [],\r\n            pdmessage: [],\r\n            message: null\r\n        });      \r\n    }\r\n\r\n   \r\n\r\n    \r\n    /*saveUpdatedPd = () => {\r\n        if (this.state.pdUpdateShow.pd.name == this.state.pdShow[this.state.pdUpdateShow.x][this.state.pdUpdateShow.y].data[this.state.pdUpdateShow.i].name) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number hasn't changed\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (this.state.pdUpdateShow.pd.name.length == 0) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number can't be empty\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else {           \r\n            ProductDetailDataService.updateNumber(this.state.pdUpdateShow.pd)\r\n                .then(response => {\r\n                    this.updatePdChildClicked(null);\r\n                   \r\n                    let x = this.state.pdUpdateShow.x;\r\n                    let y = this.state.pdUpdateShow.y;\r\n                    \r\n                    let pdshow = this.state.pdShow;\r\n                    pdshow[x][y].data[this.state.pdUpdateShow.i].name = response.data;\r\n\r\n                    let pdmessages = this.state.pdmessage;\r\n                    if (pdmessages[x] == null) pdmessages[x] = [];\r\n                    pdmessages[x][y] = `Update successful`;                    \r\n\r\n                    this.setState({                       \r\n                        pdShow: pdshow,\r\n                        pdmessage: pdmessages\r\n                    })\r\n                }).catch(error => {\r\n                    let show = this.state.pdUpdateShow;\r\n                    show.error = '' + error.response.data;\r\n                    this.setState({ pdUpdateShow: show })\r\n                })\r\n        }\r\n    }*/\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/deliveries/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    setView(value) {\r\n        /*if (value.target.value === 'DeliveryDetailView' && this.state.deliveryView !== 'DeliveryDetailView') {\r\n            let search = this.state.search;           \r\n            let newsearch = search.length > 0 ? search + '&deliveryView=DeliveryDetailView' : '?deliveryView=DeliveryDetailView';\r\n            window.location.href = ``+window.location.pathname+newsearch;          \r\n        }  */   \r\n       /* if (value.target.value === 'DeliveryView' && this.state.deliveryView == 'DeliveryDetailView') {\r\n            let search = this.state.search;\r\n            let newsearch = search.length > 0 ? search + '&deliveryView=DeliveryView' : '?deliveryView=DeliveryView';\r\n            window.location.href = `` + window.location.pathname + newsearch;\r\n        } */\r\n        let path = window.location.pathname;\r\n        let newPath = ``;\r\n        let search =  window.location.search;\r\n        if (search.length < 1) {\r\n            newPath = path + `?deliveryView=${value.target.value}`;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith('deliveryView'))\r\n                    continue\r\n                else\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n            newPath = path + '?' + newPath + 'deliveryView=' + value.target.value;\r\n        }\r\n        window.location.href = newPath;\r\n       \r\n    }\r\n\r\n   /**\r\n    * **********\r\n    * @param {any} x\r\n    * @param {any} y\r\n    * @param {any} id\r\n    */\r\n    \r\n    getProductDetails( x, y, id) {\r\n      \r\n        if (this.state.pdShow[x] == undefined || this.state.pdShow[x][y] == undefined) {\r\n             let show = this.state.pdShow;\r\n            if (this.state.pdShow[x] == undefined) show[x] = [];\r\n\r\n            ProductDetailDataService.retrieveAllNumbers(\"?deliveryDetailId=\" + id )\r\n                .then(response => {\r\n                    console.log(\"pds = \" + JSON.stringify(response.data));\r\n                    show[x][y] = {}\r\n                    show[x][y].show = true;\r\n                    show[x][y].data = response.data;\r\n                this.setState({ pdShow: show });\r\n            })\r\n        }\r\n        else {\r\n            let show = this.state.pdShow;\r\n            show[x][y].show = !show[x][y].show;\r\n            this.setState({ pdShow: show })\r\n        }\r\n    }\r\n\r\n    showdd = (x) => {\r\n        let ddShow = this.state.ddShow;\r\n        ddShow[x] = !ddShow[x];\r\n        this.setState({ ddShow: ddShow })\r\n    }\r\n\r\n    getPageData = () => {\r\n        const data = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        }));\r\n        if (this.state.deliveryView == 'DeliveryView')\r\n            return data;\r\n        else {\r\n            let downloadData = [];\r\n            downloadData = this.getDetailData(data, downloadData);\r\n            return downloadData;\r\n        }\r\n    }\r\n\r\n    render() {\r\n       /* let downloadData = [];\r\n        let databefore = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        })); \r\n        if (this.state.deliveryView != 'DeliveryView') {\r\n            \r\n            downloadData = this.getDetailData(databefore, downloadData);\r\n\r\n            \r\n        }\r\n        const data = downloadData || databefore;*/\r\n\r\n        const data = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        })); \r\n        const data2 = [];\r\n        if (this.state.deliveryView !== 'DeliveryView') {\r\n           this.getDetailData(data, data2);}\r\n\r\n       \r\n        return (\r\n            <div className=\"px-3\">\r\n                {console.log(\"rendering\")}\r\n                {this.state.pdUpdateShow && this.state.pdUpdateShow.show == true &&\r\n                    <InventoryNumberInnerComponent\r\n                    pdUpdateShow={this.state.pdUpdateShow}\r\n                    pdShow={this.state.pdShow}\r\n                    pdmessage={this.state.pdmessage}\r\n                    updatePdChildClicked={() => this.updatePdChildClicked(null)}\r\n                    setpdShow={(value) => this.setState({ pdShow: value })}\r\n                    setpdMessage={(value) => this.setState({ pdmessage: value })}\r\n                    refresh={() => this.refresh()}\r\n\r\n                    //setpdUpdateShow={(value) => this.setState({ pdUpdateShow: value })} \r\n                    />}\r\n                {this.state.deliveryUpdateShow && this.state.deliveryUpdateShow.show == true &&\r\n                    <DeliveryInnerComponent\r\n                    deliveryUpdateShow={this.state.deliveryUpdateShow}\r\n                    items={this.state.items}\r\n                    message={this.state.message}\r\n                    suppliers={this.state.filter.suppliers}\r\n                    updateClickedInner={() => this.updateClickedInner(null)}\r\n                    setItems={(value) => this.setState({ items: value })}\r\n                    setMessage={(value) => this.setState({ message: `update successful` })}\r\n                    //setdeliveryUpdateShow={(value) => this.setState({ deliveryUpdateShow: value })} \r\n                    />}\r\n                {this.state.ddUpdateShow && this.state.ddUpdateShow.show == true &&\r\n                    <DDInnerComponent\r\n                        ddUpdateShow={this.state.ddUpdateShow}\r\n                        items={this.state.items}\r\n                        ddmessage={this.state.ddmessage}\r\n                        products={this.state.filter.products}\r\n                        updateChildClicked={() => this.updateChildClicked(null)}\r\n                        setItems={(value) => this.setState({ items: value })}\r\n                        setddMessage={(value) => this.setState({ ddmessage: value})}\r\n                    //setdeliveryUpdateShow={(value) => this.setState({ deliveryUpdateShow: value })} \r\n                    />}\r\n                {/*<>\r\n                    <div className={this.state.pdUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                    <div className={this.state.pdUpdateShow.show ? \"modal d-block\" : \"d-none\"}>\r\n\r\n\r\n                        <span class=\"close\" onClick={() => this.updatePdChildClicked(null)}>&times;</span>\r\n                        <h2>update inventory number </h2>\r\n                        {this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 && <div className=\"alert alert-success d-flex\">{this.state.pdUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.pdUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ pdUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                        <p >number : </p>\r\n                        <input type=\"text\" value={this.state.pdUpdateShow.pd.name} onChange={(value) => {\r\n                            let show = this.state.pdUpdateShow;\r\n                            show.pd.name = value.target.value;\r\n                            this.setState({ pdUpdateShow: show })\r\n                        }} />\r\n                        <button className=\"btn btn-mybtn px-5 mt-3 ml-5\" onClick={this.saveUpdatedPd}>Save</button>\r\n                        <button className=\"btn btn-mybtn btn-delete px-5 mt-3 ml-3\" onClick={() => this.updatePdChildClicked(null)}>Cancel</button>\r\n\r\n                    </div>\r\n                </>*/}\r\n                   \r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n               \r\n                {this.state.filter && <DeliveryFilter {...this.state.filter}\r\n                    search={this.state.deliveryView == 'DeliveryView' ? this.state.search : null}/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Deliveries</strong>\r\n                        </h5>\r\n                        <label className=\"mx-1 pull-right mr-5\">\r\n                            <input className=\"mx-1 m-2 mt-3 \" type=\"radio\" name=\"DeliveryView\" value=\"DeliveryDetailView\"\r\n                                checked={this.state.deliveryView == 'DeliveryDetailView'}\r\n                                onClick={\r\n                                    (value) => this.state.deliveryView != 'DeliveryDetailView' ?                              \r\n                                    this.setView(value) : {}} />Delivery&Details View\r\n                        </label>\r\n                        <label className=\"mx-1 pull-right mr-5\">\r\n                            <input className=\"mx-1 m-2 mt-3 \" type=\"radio\" name=\"DeliveryView\" value=\"DeliveryView\"\r\n                                checked={this.state.deliveryView == 'DeliveryView'}\r\n                                onClick={(value) => this.state.deliveryView == 'DeliveryDetailView' ? this.setView(value) : {}}//this.setState({ deliveryView: 'DeliveryView' }) : {}}\r\n                            />Delivery View\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={this.state.deliveryView == 'DeliveryView' ? data : data2}\r\n                                    headers={ this.state.deliveryView == 'DeliveryView' ? headers : headers2 } filename={\"deliveries-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {}}\r\n                                >Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"deliveries-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={this.state.deliveryView == 'DeliveryView' ? headers : headers2}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {\r\n                                this.state.pager &&\r\n                                <PaginationComponent {...this.state.pager}\r\n                                    search={this.state.deliveryView == 'DeliveryView' ? this.state.search : null}/>\r\n                            }\r\n                        </div>\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }        \r\n                       \r\n                        {\r\n                            this.state.deliveryView == 'DeliveryDetailView' &&                            \r\n                                    this.state.items.map(\r\n                                        (item, x) =>\r\n                                            <div className=\"panel-body\">\r\n                                                <table className=\"table  border table-s\">\r\n                                                    <tbody>\r\n                                                        <tr >\r\n                                                            <th className=\"wl pl-5 hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    this.showdd(x)\r\n                                                                }}> Number : {item.number} </th>\r\n                                                            <th className=\"wl pl-3 hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    this.showdd(x)\r\n                                                                }}\r\n                                                            > Date : {\r\n                                                                new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                                    month: \"long\",\r\n                                                                    day: \"2-digit\",\r\n                                                                    year: \"numeric\",                                                                  \r\n                                                                }).format(new Date(item.date))\r\n                                                            }</th>\r\n                                                            <th className=\" wl hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    this.showdd(x)\r\n                                                                }}> Supplier : {item.supplierName || '-'}</th>\r\n                                                            <th className=\"d-flex justify-content-end mr-1\">\r\n                                                                <button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item, x)}>Update</button>\r\n                                                                <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id, x)}>Delete</button>\r\n                                                            </th>\r\n                                                         </tr>\r\n                                                         <tr>\r\n                                                            <td colspan=\"4\">\r\n                                                                {this.state.ddShow && this.state.ddShow[x] &&\r\n                                                                    <>\r\n                                                                        {/*item.deliveryDetails && \r\n                                                                    <ListDeliveryDetailInnerComponent\r\n                                                                        item={item}\r\n                                                                        x={x}\r\n                                                                        pdShow={this.state.pdShow}\r\n                                                                        pdmessage={this.state.pdmessage}\r\n                                                                        setmessage={(msg) => this.setState({ message: msg })}\r\n                                                                        refresh={this.refresh}\r\n                                                                        items={this.state.items}\r\n                                                                        setStateItems={(value) => this.setState({ items: value })}\r\n                                                                        // pdUpdateShow={this.state.pdUpdateShow}\r\n                                                                        // setStatepdUpdateShow={(value) => this.setState({ pdUpdateShow: value })}\r\n                                                                        updatePdChildClicked={(pd, x, y, i) => this.updatePdChildClicked(pd, x, y, i)}\r\n                                                                        historyPush={(value) => this.props.history.push(value)}\r\n                                                                        setStatePdShow={(value) => this.setState({ pdShow: value })}\r\n                                                                        setStatePdMessage={(value) => this.setState({ pdmessage: value })}/>*/}\r\n                                                                        {\r\n                                                                            this.state.ddmessage && this.state.ddmessage[x] &&\r\n                                                                            <div className=\"alert alert-success d-flex\">{this.state.ddmessage[x]}\r\n                                                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => {\r\n                                                                                    let ddmessages = this.state.ddmessage;\r\n                                                                                    ddmessages[x] = null;\r\n                                                                                    this.setState({ ddmessage: ddmessages })\r\n                                                                                }}></i>\r\n                                                                            </div>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.state.dderrormessage && this.state.dderrormessage[x] &&\r\n                                                                        <div className=\"alert alert-warning d-flex\">{this.state.dderrormessage[x]}\r\n                                                                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => {\r\n                                                                                let dderrormessages = this.state.dderrormessage;\r\n                                                                                dderrormessages[x] = null;\r\n                                                                                this.setState({ dderrormessage: dderrormessages })\r\n                                                                            }}></i>\r\n                                                                        </div>\r\n                                                                    }\r\n                                                                        <table className=\"table border x-Table \">\r\n                                                                            <tbody>\r\n                                                                                <tr>\r\n                                                                                    <td>Product</td>\r\n                                                                                    <td>Quantity</td>\r\n                                                                                    <td>Unit Price</td>\r\n                                                                                    <td>Total</td>\r\n                                                                                <td style={{ width: '140px', padding: '.2rem .5rem' }}>\r\n                                                                                    <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                     onClick={() => this.updateChildClicked(null, x, null)}>add one</button>\r\n                                                                                </td>\r\n                                                                                </tr>\r\n                                                                                {\r\n                                                                                    item.deliveryDetails.map(\r\n                                                                                        (dd, y) =>\r\n                                                                                            <>\r\n                                                                                                <tr key={dd.id}>\r\n                                                                                                    <td><p className=\"hoverable\"\r\n                                                                                                        onClick={() => {\r\n                                                                                                            this.getProductDetails(x, y, dd.id)\r\n                                                                                                        }}>{dd.productName}</p></td>\r\n                                                                                                    <td className=\"hoverable\"\r\n                                                                                                        onClick={() => {\r\n                                                                                                            this.getProductDetails(x, y, dd.id)\r\n                                                                                                        }}><p>{dd.quantity}</p></td>\r\n                                                                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                                                        style: \"currency\",\r\n                                                                                                        currency: \"BGN\",\r\n                                                                                                        maximumFractionDigits: 2\r\n                                                                                                    }).format(dd.pricePerOne)}</td>\r\n                                                                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                                                        style: \"currency\",\r\n                                                                                                        currency: \"BGN\",\r\n                                                                                                        maximumFractionDigits: 2\r\n                                                                                                    }).format(dd.pricePerOne * dd.quantity)}  </td>\r\n                                                                                                    <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateChildClicked(dd, x, y)}>Update</button>\r\n                                                                                                        <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteChildClicked(dd.id, x, y, item.id)}>Delete</button></td>\r\n                                                                                                </tr>\r\n                                                                                                {\r\n                                                                                                    this.state.pdShow[x] && this.state.pdShow[x][y] && this.state.pdShow[x][y].show\r\n                                                                                                    &&\r\n                                                                                                    <tr>\r\n                                                                                                        <td colspan=\"5\">\r\n                                                                                                            {\r\n                                                                                                                this.state.pdmessage[x] && this.state.pdmessage[x][y] &&\r\n                                                                                                                <div className=\"alert alert-success d-flex\">{this.state.pdmessage[x][y]}\r\n                                                                                                                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                                                                                        onClick={() => {\r\n                                                                                                                            let pdmessages = this.state.pdmessage;\r\n                                                                                                                            pdmessages[x][y] = null;\r\n                                                                                                                            this.setState({ pdmessage: pdmessages })\r\n                                                                                                                        }}>\r\n                                                                                                                    </i>\r\n                                                                                                                </div>\r\n                                                                                                            }\r\n                                                                                                            <table className=\"ml-5 mb-3\" style={{ width: '80%' }}>\r\n                                                                                                                <tr><td style={{ width: '10%' }}>number</td>\r\n                                                                                                                    <td className=\"pl-5\">inventory number</td>\r\n                                                                                                                    <td style={{ width: '140px', padding: '.2rem .5rem'}}>                                                                                                                       \r\n                                                                                                                        <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                                                               onClick={() => this.updatePdChildClicked(null, x, y, null, dd.id)}>add one</button>                                                                                                                        \r\n                                                                                                                    </td></tr>\r\n                                                                                                                {this.state.pdShow[x][y].data.map((pd, i) =>\r\n                                                                                                                    <tr>\r\n                                                                                                                        <td >{i + 1}</td>\r\n                                                                                                                        <td className=\"pl-5 pb-3 hoverable\"\r\n                                                                                                                            onClick={() => {\r\n                                                                                                                                this.props.history.push(`/productDetails?Filter.id=${pd.value}`)\r\n                                                                                                                            }}>\r\n                                                                                                                            {pd.name}\r\n                                                                                                                        </td>\r\n                                                                                                                        <td><button className=\"btn btn-mybtn mr-1\" onClick={() => {\r\n                                                                                                                            this.updatePdChildClicked(pd, x, y, i)\r\n                                                                                                                        }}>Update</button>\r\n                                                                                                                            <button className=\"btn btn-mybtn btn-delete\"\r\n                                                                                                                                onClick={() => this.deletePDChildClicked(pd.value, x, y, dd.id)}>\r\n                                                                                                                                Delete</button></td>\r\n                                                                                                                    </tr>\r\n                                                                                                                )}\r\n                                                                                                            </table>\r\n                                                                                                        </td>\r\n                                                                                                    </tr>\r\n                                                                                                }\r\n                                                                                            </>\r\n                                                                                    )}\r\n                                                                            </tbody>\r\n                                                                        </table>\r\n                                                                    </>\r\n                                                                }\r\n                                                                   \r\n                                                                \r\n                                                                <span class=\"pull-right\" style={{ marginRight: '100px' }}><strong>Total Bill : {new Intl.NumberFormat(\"en-GB\", {\r\n                                                                    style: \"currency\",\r\n                                                                    currency: \"BGN\",\r\n                                                                    maximumFractionDigits: 2\r\n                                                                }).format(item.total)} </strong> {}</span>\r\n                                                         </td>\r\n                                                        </tr>\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>                                            \r\n                                         )}                      \r\n\r\n                        {                            \r\n                            this.state.deliveryView == 'DeliveryView' &&\r\n                             <table className=\"table border-bottom my-table\" >\r\n                                <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">number</th>\r\n                                            <th scope=\"col\" >date</th>\r\n                                            <th scope=\"col\" >supplier</th>                                   \r\n                                            <th >total</th>\r\n                                            <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                    </tr>\r\n                                </thead>                           \r\n                                <tbody>\r\n                                    {\r\n                                        this.state.items.map(\r\n                                            item =>\r\n                                                <tr>\r\n                                                    <td>{item.number}</td>\r\n                                                    <td>\r\n                                                        {new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                            month: \"long\",\r\n                                                            day: \"2-digit\",\r\n                                                            year: \"numeric\",\r\n                                                        }).format(new Date(item.date))}\r\n                                                    </td>\r\n                                                    <td >{item.supplierName || '-'}</td>\r\n                                                    <td >{\r\n                                                        new Intl.NumberFormat(\"en-GB\", {\r\n                                                            style: \"currency\",\r\n                                                            currency: \"BGN\",\r\n                                                            maximumFractionDigits: 2\r\n                                                        }).format(item.total)}</td>\r\n                                                    <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                        <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                        )}                                    \r\n                            </tbody>\r\n                        </table>\r\n                       }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListDeliveriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListSuppliersComponent.jsx",["410","411"],"import React, { Component } from 'react';\r\nimport SupplierDataService from '../service/SupplierDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport SupplierFilter from './Filters/SupplierFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nconst headers = [\r\n    { label: \"Name\", key: \"name\" },\r\n    { label: \"Phone Number\", key: \"phoneNumber\" },\r\n    { label: \"DDC Number\", key: \"ddcnumber\" },\r\n    { label: \"Email\", key: \"email\" }\r\n];\r\n\r\nclass ListSuppliersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        SupplierDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        items: response.data.items,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n       SupplierDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n       SupplierDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n            )\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/suppliers/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/suppliers/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3\">\r\n                {this.state.filter && <SupplierFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 pb-3\">\r\n                            <strong> Suppliers</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"suppliers-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"suppliers-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}<i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">phone number</th>\r\n                                    <th scope=\"col\">DDC number</th>\r\n                                    <th scope=\"col\">email</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        item =>\r\n                                            <tr scope=\"row\" key={item.id}>\r\n                                                <td>{item.name}</td>\r\n                                                <td>{item.phoneNumber}</td>\r\n                                                <td>{item.ddcnumber}</td>\r\n                                                <td>{item.email}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                            </tr>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListSuppliersComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserComponent.jsx",["412","413"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport UserDataService from '../service/UserDataService';\r\nimport '../myStyles/Style.css';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\n\r\nclass UserComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id || -1,\r\n            firstName: '',\r\n            lastName: '',\r\n            userName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmpassword: '',\r\n            changingpassword: this.props.match.params.id > 0 ? false : true,\r\n            countries: null,\r\n            cities: null,\r\n            filteredcities: null,\r\n            countryId: null,\r\n            cityId:''\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        let userRole = this.getUserRole();\r\n        console.log(\"component mount userRole  = \" + (userRole))\r\n       \r\n        console.log(this.state.id)\r\n        console.log(\"(this.state.id === -1 && userRole !== 'ROLE_Admin') = \" + ((this.state.id === -1 && userRole !== 'ROLE_Admin')));\r\n        if (this.state.id === -1 && userRole !== 'ROLE_Admin') {\r\n            return\r\n        }\r\n        UserDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                console.log(\"response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                   // userRole: userRole,\r\n                    firstName: response.data.firstName||'',\r\n                    lastName: response.data.lastName||'',\r\n                    userName: response.data.userName||'',\r\n                    email: response.data.email||'',\r\n                    countries: userRole === 'ROLE_Admin' ? response.data.countries : null,\r\n                    cities: userRole === 'ROLE_Admin' ? response.data.cities : null,\r\n                    filteredcities: userRole === 'ROLE_Admin' ? response.data.countryId ? \r\n                        this.filterCities([], response.data.cities, response.data.countryId): response.data.cities : null,\r\n                    countryId: userRole === 'ROLE_Admin' && response.data.countryId ? response.data.countryId : null,\r\n                    cityId: userRole === 'ROLE_Admin' && response.data.cityId ? response.data.cityId+'' : ''\r\n                })\r\n            })\r\n    }\r\n\r\n    getUserRole() {\r\n        return AuthenticationService.getLoggedUerRole();\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n        let user = {\r\n            id: this.state.id,\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            username: values.userName,\r\n            email: values.email,\r\n            password: this.state.changingpassword ? values.password : null,\r\n            cityId: this.getUserRole() === 'ROLE_Admin' ? values.cityId : null,\r\n            targetDate: values.targetDate\r\n        }\r\n        console.log(\"user to update = \" + JSON.stringify(user))\r\n        UserDataService.save(user)\r\n            .then(() => this.props.history.push('/users'))\r\n            .catch(error => {\r\n                console.log(\"error = \" + error);\r\n                console.log(\"error.response.data = \" + JSON.stringify(error.response.data))\r\n                //let msg = error.response && typeof error.response.data == 'string' ? error.response.data :\r\n                  //  error.response.data.message ? error.response.data.message : error;\r\n                let msg = \"\" + error.response && typeof error.response.data == 'string' ?\r\n                    error.response.data : error.response.data.errors ?\r\n                        error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                            error.response.data.message : error;\r\n                           \r\n\r\n                if (msg.indexOf(\"Email\") > -1)\r\n                    actions.setErrors({ email: msg })\r\n                if (msg.indexOf(\"User name\") > -1)\r\n                    actions.setErrors({ username: msg })\r\n                if (msg.indexOf(\"Password\") > -1)\r\n                    actions.setErrors({ Password: msg })\r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n               \r\n    })\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.userName) {\r\n            errors.userName = 'required field !!!'\r\n        } else if (values.userName.length < 4) {\r\n            errors.userName = 'Enter at least 4 Characters'\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = 'required field !!!'\r\n        } else if (values.email.length < 4) {\r\n            errors.email = 'Enter at least 4 Characters'\r\n        }\r\n\r\n        if (this.state.id === -1 || this.state.changingpassword) {\r\n            if (!values.password) {\r\n                errors.password = 'required field !!!'\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Enter at least 6 Characters'\r\n            } else if (values.password != values.confirmpassword) {\r\n                errors.confirmpassword='password and confirm password don\\'t match'\r\n            }\r\n        }\r\n\r\n        if (this.getUserRole() === 'ROLE_Admin' && !values.cityId) {\r\n            errors.cityId = 'required field !!!'           \r\n        }\r\n\r\n        return errors\r\n    }\r\n\r\n   cancelForm() {\r\n      // this.props.history.push('/users')\r\n       window.history.back();\r\n    }\r\n\r\n    changePassword = () => {\r\n        this.setState({\r\n            changingpassword: this.state.changingpassword ? false : true\r\n        })\r\n    }\r\n\r\n    onFocus = event => {\r\n        console.log(\"on focus \");\r\n\r\n        if (event.target.autocomplete) {\r\n            event.target.autocomplete = \"whatever\";\r\n        }\r\n\r\n    }\r\n\r\n    filterCities(subs, cities, value) {\r\n       \r\n        subs = []\r\n        for (let i = 0; i < cities.length; i++) {\r\n\r\n            if (cities[i].filterBy == value) {\r\n                subs.push(cities[i])\r\n            }\r\n        }\r\n\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        const userRole = this.getUserRole();\r\n        let { id, firstName, lastName, userName, email, password, confirmpassword,/* countries, cities, filteredcities, countryId,*/ cityId } = this.state\r\n       \r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update User</h3> : <h3 className=\"mb-3\"> Add New User </h3>}\r\n                <Formik\r\n                    initialValues={{ id, firstName, lastName, userName, email, password, confirmpassword,/* countries, cities, filteredcities, countryId,*/ cityId }}\r\n                    onSubmit={(values, actions) => this.onSubmit(values, actions)}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                        ({ setFieldValue, values, dirty }) => (\r\n                            <Form className=\"d-flex flex-wrap\">\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                {console.log(\"values = \" + JSON.stringify(values))}\r\n\r\n                                <div className=\"inline w50\">\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                   \r\n                                    <fieldset className=\"form-group w90\">\r\n                                        <label>first name</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"firstName\"\r\n                                        autoComplete=\"new-password\"/>\r\n                                        <ErrorMessage name=\"firstName\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group w90\">\r\n                                        <label>last name</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"lastName\"\r\n                                            autoComplete=\"new-password\" />\r\n                                        <ErrorMessage name=\"lastName\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group w90\">\r\n                                        <label className=\"required-field\">user name</label>\r\n\r\n                                        <Field className=\"form-control \" type=\"text\" name=\"userName\"\r\n                                            autoComplete=\"new-password\" />\r\n                                        <ErrorMessage name=\"userName\" component=\"div\"\r\n                                            className=\"alert alert-warning \" />\r\n                                    </fieldset>\r\n\r\n                                    \r\n\r\n                                   \r\n                                    \r\n                               \r\n                                   \r\n                                {//console.log(\"userRole  = \" + (userRole))\r\n                                }\r\n                                {//console.log(\"userRole === 'ROLE_Admin' = \" + (userRole === 'ROLE_Admin'))\r\n                                }\r\n                                {//console.log(\"countries = \" + JSON.stringify(countries))\r\n                                }\r\n                                    {//console.log(\"filteredcities = \" + JSON.stringify(filteredcities))\r\n                                    }\r\n                                {//console.log(\"values.filteredcities = \" + JSON.stringify(values.filteredcities))\r\n                                }\r\n                               \r\n\r\n                               \r\n\r\n                                {userRole === 'ROLE_Admin' &&\r\n                                   \r\n                                        <fieldset className=\"inline form-group pl-0 w90\">\r\n\r\n                                            <label>Country&nbsp;</label>\r\n                                            <CustomSelect\r\n                                                className={\"\"}\r\n                                                items={this.state.countries}\r\n                                              //  value={values.countryId || ''}\r\n                                            value={this.state.countryId || ''}\r\n                                               /* onChange={(selected) => {\r\n                                                    setFieldValue(\"countryId\", selected.value);\r\n\r\n                                                    let subs = values.filteredcities;\r\n                                                    subs = this.filterCities(subs, values.cities, selected.value);\r\n                                                    // let sub = values.filteredInventoryNumbers.\r\n                                                    /*  subs = [];\r\n                                                      for (let i = 0; i < values.cities.length; i++) {\r\n\r\n                                                          if (values.cities[i].filterBy == selected.value) {\r\n                                                              subs.push(values.cities[i])\r\n                                                          }\r\n                                                      }*/\r\n                                                   // setFieldValue(\"filteredcities\", subs);\r\n                                  //  }}*/\r\n                                        onChange={(selected) => {\r\n                                            \r\n\r\n                                            let subs = this.state.filteredcities;\r\n                                            subs = this.filterCities(subs, this.state.cities, selected.value);\r\n                                            // let sub = values.filteredInventoryNumbers.\r\n                                            /*  subs = [];\r\n                                              for (let i = 0; i < values.cities.length; i++) {\r\n\r\n                                                  if (values.cities[i].filterBy == selected.value) {\r\n                                                      subs.push(values.cities[i])\r\n                                                  }\r\n                                              }*/\r\n                                            //setFieldValue(\"filteredcities\", subs);\r\n                                            // setFieldValue(\"countryId\", selected.value);\r\n                                            this.setState({\r\n                                                countryId: selected.value,\r\n                                                filteredcities:subs\r\n\r\n                                            })\r\n                                        }}\r\n                                            />\r\n                                        </fieldset>\r\n                                      \r\n                                    }\r\n\r\n                                   \r\n                                    {userRole === 'ROLE_Admin' &&\r\n\r\n                                        <fieldset className=\"form-group w90\">\r\n\r\n                                            <label className=\"required-field\">city&nbsp;</label>\r\n                                            <CustomSelect\r\n                                                className={\"\"}\r\n                                                // items={values.filteredcities || filteredcities || cities}\r\n                                                items={this.state.filteredcities || this.state.cities}\r\n                                                // value={values.cityId || ''}\r\n                                                // onChange={(selected) => setFieldValue(\"cityId\", selected.value)}\r\n                                                value={values.cityId || ''}\r\n                                                onChange={(selected) => setFieldValue(\"cityId\", selected.value)}\r\n                                            />\r\n                                            <ErrorMessage name=\"cityId\" component=\"div\"\r\n                                                className=\"alert alert-warning inline-4\" />\r\n\r\n                                        </fieldset>\r\n\r\n                                    }\r\n                                    <fieldset className=\"form-group w100\">\r\n                                        <label className=\"required-field\">email</label>\r\n                                        <Field className=\"form-control\" type=\"email\" name=\"email\"\r\n                                            autoComplete=\"new-password\" />\r\n                                        <ErrorMessage name=\"email\" component=\"div\"\r\n                                            className=\"alert alert-warning \" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group mt-5\">\r\n                                        <button className=\"btn btn-mybtn p-x-5\" type=\"submit\" disabled={!dirty}>Save</button>\r\n                                        <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                    </fieldset>\r\n                                   \r\n                                </div>\r\n                                <div className=\"inline w-50 \">\r\n                                    \r\n                                   \r\n                                    {(this.state.id > 0 && !this.state.changingpassword) &&\r\n                                        <button className=\"btn btn-mybtn mt-3 mb-3  d-flex\" onClick={this.changePassword}>change password</button>}\r\n                                    {(this.state.id > 0 && this.state.changingpassword) &&\r\n                                        <button className=\"btn btn-mybtn mt-3 mb-3  d-flex\" onClick={this.changePassword}>leave password</button>}\r\n                                    {(this.state.id < 1 || this.state.changingpassword) &&\r\n                                        <div>\r\n                                            <fieldset className=\"form-group w90\">\r\n                                                <label className=\"required-field\">password</label>\r\n                                                <Field className=\"form-control \" type=\"password\" name=\"password\"\r\n                                                    autoComplete=\"new-password\" />\r\n                                                <ErrorMessage name=\"password\" component=\"div\"\r\n                                                    className=\"alert alert-warning \" />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group w90\">\r\n                                                <label className=\"required-field\">confirm password</label>\r\n                                                <Field className=\"form-control\" type=\"password\" name=\"confirmpassword\"\r\n                                                    autoComplete=\"new-password\" />\r\n                                                <ErrorMessage name=\"confirmpassword\" component=\"div\"\r\n                                                    className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    }\r\n                                   \r\n                               \r\n                                </div>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryComponent.jsx",["414","415","416","417","418","419","420","421","422","423","424","425"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductDetails.jsx",["426","427","428","429","430","431","432"],"import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport ProductDetailFilter from './Filters/ProductDetailFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport ProductDetailInnerComponent from './ProductDetailInnerComponent';\r\n\r\nimport AuthenticationService from '../service/AuthenticationService'\r\n\r\nconst headers = [\r\n    { label: \"inventory number\", key: \"inventoryNumber\" },\r\n    { label: \"discarded\", key: \"isDiscarded\" },\r\n    { label: \"available\", key: \"isAvailable\" }\r\n    \r\n];\r\n\r\nconst userRole = AuthenticationService.getLoggedUerRole();\r\n\r\nclass ListProductDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            showdts: [],\r\n            pdUpdateShow: {\r\n                pd: {}, show: false\r\n            },\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        ProductDetailDataService.retrieveAll(this.state.search)\r\n            .then(\r\n            response => {\r\n                console.log(\"response.data = \" + response.data);\r\n                console.log(\"response.data = \" + JSON.stringify(response.data));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter\r\n                });\r\n                console.log(\"items = \" + JSON.stringify(this.state.items));\r\n                }\r\n        ).catch(error => {\r\n            this.setState({ errormsg: '' + error })\r\n        })\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        ProductDetailDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        ProductDetailDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n            }\r\n        ).catch(error => {\r\n            console.log(\"error = \" + JSON.stringify(error));\r\n            //console.log(\"error.response.data = \" + error.response.data);\r\n            this.setState({ errormsg:''+error })\r\n        })\r\n    }\r\n\r\n    updateClicked(item, x) {\r\n       \r\n            /* let messages = this.state.message;\r\n             if (messages != null )\r\n                 messages = null;*/\r\n\r\n            let show = this.state.pdUpdateShow;\r\n            show.show = !show.show;\r\n            if (show.show == true) {\r\n                show.pd = JSON.parse(JSON.stringify(item))\r\n                show.x = x;\r\n            } else {\r\n                show.error = ''\r\n            }\r\n            this.setState({\r\n                pdUpdateShow: show,\r\n                message: null,\r\n                pdmessage: [],\r\n                ddmessage: []\r\n            });\r\n        \r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/productdetails/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3\">\r\n\r\n                {this.state.pdUpdateShow && this.state.pdUpdateShow.show == true &&\r\n                    <ProductDetailInnerComponent\r\n                        pdUpdateShow={this.state.pdUpdateShow}\r\n                        items={this.state.items}\r\n                        message={this.state.message}\r\n                       // suppliers={this.state.filter.suppliers}\r\n                        updateClicked={() => this.updateClicked(null)}\r\n                        setItems={(value) => this.setState({ items: value })}\r\n                        setMessage={(value) => this.setState({ message: `update successful` })}\r\n                    //setdeliveryUpdateShow={(value) => this.setState({ deliveryUpdateShow: value })} \r\n                    />}\r\n                {this.state.filter && <ProductDetailFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2\">\r\n                            <strong> Inventory</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                {/*<button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>*/}\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"product-details-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"product-details-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormas: null })}></i></div>}\r\n                       \r\n\r\n                        <table className=\"table border-bottom my-table\" style={{ width: '100%' }}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\" ></th>\r\n                                    <th scope=\"col\">inventory number</th>\r\n                                   \r\n                                    <th scope=\"col\">product name</th>\r\n                                   \r\n                                    <th>date created</th> \r\n                                    <th scope=\"col\" >price</th>\r\n                                    <th scope=\"col\" className=\"wxxs\">discarded</th>\r\n                                    <th scope=\"col\" className=\"wxxs\">available</th>\r\n                                    {userRole == 'ROLE_Mol' && <th className=\"wxxs\">profiles</th>}\r\n                                     \r\n                                    {/*<th >amortization</th>\r\n                                    <th >total amortization</th>\r\n                                     <th >delivery</th>\r\n                                   */}\r\n                                    <th ></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        (item, i) =>\r\n                                            <>\r\n                                                <tr scope=\"row\" key={item.id}>\r\n                                                    <td className=\"hoverable\"\r\n                                                        onClick={() => {\r\n                                                            let showdts = this.state.showdts;\r\n                                                            if (showdts == undefined) showdts = [];\r\n                                                            showdts[i] = showdts[i] ? false : true;\r\n                                                            this.setState({ showdts: showdts })\r\n                                                        }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                            aria-hidden=\"true\"></i></td>\r\n                                                <td>{item.inventoryNumber}</td>                                                \r\n                                                <td>{item.productName}</td>                                               \r\n                                                <td>{new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                    month: \"long\",\r\n                                                    day: \"2-digit\",\r\n                                                    year: \"numeric\", \r\n                                                    }).format(new Date(item.dateCreated))}</td>\r\n                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                        style: \"currency\",\r\n                                                        currency: \"BGN\",\r\n                                                        maximumFractionDigits: 2\r\n                                                    }).format(item.price)}</td>\r\n                                                <td>{item.discarded ? 'yes' : 'no'}</td>\r\n                                                <td>{item.available ? 'yes' : 'no'}</td>\r\n                                                {userRole == 'ROLE_Mol' && <td className=\"hoverable\"\r\n                                                    onClick={() => {\r\n                                                        this.props.history.push(`/userprofiles?Filter.productDetailId=${item.id}`);\r\n                                                    }}><i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i></td>}\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item, i)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                            </tr>\r\n                                                {this.state.showdts && this.state.showdts[i] &&\r\n                                                    <tr >                                                    \r\n                                                    <td colSpan=\"2\" className=\"pt-3 pb-3 bold-border-bottom\"></td>\r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">\r\n                                                        delivery number : &nbsp;\r\n                                                    {item.deliveryNumber}</td>\r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">type :&nbsp;{item.productType}</td> \r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">                                                   \r\n                                                        amortization : &nbsp;\r\n                                                    {item.amortizationPercent}&nbsp;%</td>                                                   \r\n                                                    <td colSpan=\"4\" className=\"pt-3 pb-3 bold-border-bottom\">                                                                                                                \r\n                                                    total amortization : &nbsp;\r\n                                                    {new Intl.NumberFormat(\"en-GB\", {\r\n                                                    style: \"currency\",\r\n                                                    currency: \"BGN\",\r\n                                                    maximumFractionDigits: 2\r\n                                                    }).format(item.totalAmortization)}                                                       \r\n                                                    &emsp;&emsp;&emsp;                                                               \r\n                                                    </td>\r\n                                                    \r\n                                                    \r\n                                                    </tr>}                                                \r\n                                               </>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListProductDetails","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductDetailFilter.jsx",["433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass ProductDetailFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            priceMoreThan: props.priceMoreThan,\r\n            priceLessThan: props.priceLessThan,\r\n            isDiscarded: props.isDiscarded,\r\n            isAvailable: props.isAvailable,\r\n            deliveryNumbers: props.deliveryNumbers,\r\n            deliveryId: props.deliveryId,\r\n\r\n            productNames: props.productNames,\r\n            productId: props.productId,           \r\n            inventoryNumbers: props.inventoryNumbers,\r\n            filteredInventoryNumbers: props.inventoryNumbers,\r\n            id: props.id,\r\n           // inventoryNumber: props.inventoryNumber,\r\n            productTypes: props.productTypes,\r\n            productType: props.productType,\r\n            dateCreatedBefore: props.dateCreatedBefore,\r\n            dateCreatedAfter: props.dateCreatedAfter,\r\n\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n           \r\n            prefix: props.prefix,            \r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            //console.log('field key =' + key);\r\n            //console.log('field value =' + value);\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                /*if ((values.productType === 'MA' && key === 'amortizationPercentMoreThan') ||\r\n                    (values.productType === 'MA' && key === 'amortizationPercentLessThan') ||\r\n                    (key === 'maxmore') ||\r\n                    (key === 'minless') ||\r\n                    (key === 'maxtotal') ||\r\n                    (key === 'mintotal')) { }\r\n                else*/\r\n                if (key.startsWith('date')) {\r\n                    value = (new Date(value)).toISOString();\r\n                    value = value.substring(0, value.indexOf('T'))\r\n                }\r\n                 newPath += prefix + '.' + key + '=' + value + '&' \r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n\r\n        window.location.href = window.location.pathname;\r\n        // values.name = null;\r\n\r\n        // this.props.history.push('/products');\r\n        /* this.setState({\r\n             all: '',\r\n             name: '',\r\n             productType: '',\r\n             amortizationPercentMoreThan: '',\r\n             amortizationPercentLessThan: '',\r\n             totalCountMoreThan: '',\r\n             totalCountLessThan:''\r\n         });\r\n         console.log('in reset form ');*/\r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, priceMoreThan, priceLessThan, isDiscarded, isAvailable, deliveryNumbers, deliveryId,\r\n            productNames, productId, inventoryNumbers, id, productTypes, productType, dateCreatedBefore,//inventoryNumber\r\n            dateCreatedAfter, amortizationPercentMoreThan, amortizationPercentLessThan, filteredInventoryNumbers} = this.state\r\n\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    all, priceMoreThan, priceLessThan, isDiscarded, isAvailable, deliveryNumbers, deliveryId,\r\n                    productNames, productId, inventoryNumbers, id, productTypes, productType, dateCreatedBefore,\r\n                    dateCreatedAfter, amortizationPercentMoreThan, amortizationPercentLessThan, filteredInventoryNumbers//inventoryNumber,\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>product&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3 foo\"}\r\n                                    items={productNames}\r\n                                    value={values.productId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"productId\", selected.value);\r\n                                        let subs = values.filteredInventoryNumbers;\r\n                                       // let sub = values.filteredInventoryNumbers.\r\n                                        subs = [];\r\n                                        for (let i = 0; i < values.inventoryNumbers.length; i++) {\r\n\r\n                                            if (values.inventoryNumbers[i].filterBy == selected.value) {\r\n                                                subs.push(values.inventoryNumbers[i])\r\n                                            }\r\n                                        }\r\n                                        setFieldValue(\"filteredInventoryNumbers\", subs);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            {console.log(\"values.inventoryNumbers.length = \" + values.inventoryNumbers.length)}\r\n                            {console.log(\"values.filteredInventoryNumbers.length = \" + values.filteredInventoryNumbers.length)}\r\n                            <div className=\"inline\">\r\n                                <label>inventory number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4 foo\"}\r\n                                    items={values.filteredInventoryNumbers}\r\n                                    value={values.id}\r\n                                    onChange={(selected) => setFieldValue(\"id\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            {!this.props.short&&\r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">price&nbsp;</label>\r\n                                <div className=\"inline px-2 border \" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-100px\" type=\"number\" min=\"0\" max={values.priceLessThan || \"\"}\r\n                                            name=\"priceMoreThan\" />\r\n                                        <label className=\"pl-1 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-100px\" type=\"number\" min={values.priceMoreThan || 0}\r\n                                            name=\"priceLessThan\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">date created&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">after&nbsp;</label>\r\n                                    <div className=\"inline \">\r\n                                        <DatePicker className=\"form-control in-inline inline-2 foo\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                            locale=\"en-GB\"\r\n                                            maxDate={values.dateCreatedBefore}\r\n                                            selected={values.dateCreatedAfter && new Date(values.dateCreatedAfter)}\r\n                                            onChange={date => setFieldValue(\"dateCreatedAfter\", date)} />\r\n                                    </div>\r\n\r\n                                    <label className=\"pl-1 mb-1 fw-s\">before&nbsp;</label>\r\n                                    <DatePicker className=\"form-control in-inline inline-2 foo\"\r\n                                        dateFormat=\"MMMM dd yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        minDate={values.dateCreatedAfter}\r\n                                        selected={values.dateCreatedBefore && new Date(values.dateCreatedBefore)}\r\n                                        onChange={date => setFieldValue(\"dateCreatedBefore\", date)}\r\n                                        highlightDates={new Date()} />\r\n                                </div>\r\n                            </div>\r\n                            {!this.props.short &&\r\n                            <>\r\n                            {values.productTypes &&\r\n                                <div className=\"inline\">\r\n                                    <label>product type :</label>\r\n                                    {\r\n                                        productTypes.map((type) =>\r\n                                            <div className=\"inline\">\r\n                                                <Field\r\n                                                    className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                    value={type.value} checked={type.name === values.productType}\r\n                                                    onChange={(value) => {\r\n                                                        console.log('value of checked = ' + value.target.value);\r\n                                                        setFieldValue(\"productType\", value.target.value == values.productType ? null : value.target.value);\r\n                                                    }}\r\n                                                />\r\n                                                {type.name}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            }\r\n                               \r\n\r\n                                {/*values.productType == 'STA' ? \"inline d-none\" : \"inline\"*/}  \r\n                                <div className=\"inline\"\r\n                                >\r\n                                    <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-75px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                            name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan} />&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-75px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                            name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan}/>&nbsp;%\r\n                                        </div>\r\n                            </div>\r\n                            {values.deliveryNumbers &&\r\n                                <div className=\"inline\">\r\n                                    <label>delivery&nbsp;</label>\r\n                                    <CustomSelect\r\n                                        className={\"inline inline-2\"}\r\n                                        items={deliveryNumbers}\r\n                                        value={values.deliveryId}\r\n                                        onChange={(selected) => setFieldValue(\"deliveryId\", selected.value)}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                           \r\n\r\n                            <div className=\"inline pr-2 mr-2\">\r\n                                <Field\r\n                                    className=\"mr-2 pt-3\" type=\"checkbox\" name=\"isDiscarded\"                                    \r\n                                    value={true} checked={values.isDiscarded == true}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isDiscarded\", values.isDiscarded == true ? null : true);\r\n                                    }}\r\n                                />discarded\r\n                                <Field\r\n                                    className=\"mx-2 pt-3\" type=\"checkbox\" name=\"isDiscarded\"\r\n                                    value={false} checked={values.isDiscarded == false}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isDiscarded\", values.isDiscarded == false ? null : false);\r\n                                    }}\r\n                                />not discarded\r\n                            </div>\r\n\r\n                            <div className=\"inline pr-2 mr-2\">\r\n                                <Field\r\n                                    className=\"mr-2 pt-3\" type=\"checkbox\" name=\"isAvailable\"\r\n                                    value={true} checked={values.isAvailable == true}\r\n                                    onChange={(value) => {\r\n                                        // console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isAvailable\", values.isAvailable == true ? null : true);\r\n                                    }}\r\n                                />available\r\n                                <Field\r\n                                    className=\"mx-2 pt-3\" type=\"checkbox\" name=\"isAvailable\"\r\n                                    value={false} checked={values.isAvailable == false}\r\n                                    onChange={(value) => {\r\n                                        // console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isAvailable\", values.isAvailable == false ? null : false);\r\n                                    }}\r\n                                />missing\r\n                            </div>\r\n                                </>\r\n\r\n                        }\r\n\r\n\r\n                           \r\n                                \r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"reset\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductDetailFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserProfilesComponent.jsx",["450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserProfileDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserProfileFilter.jsx",["476","477","478","479","480","481","482","483"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveryDetailInnerComponent.jsx",["484","485","486","487","488"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\InventoryNumberInnerComponent.jsx",["489","490","491","492","493","494","495","496","497"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryInnerComponent.jsx",["498","499"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DDInnerComponent.jsx",["500","501","502","503","504","505","506","507","508","509"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDetailDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductDetailInnerComponent.jsx",["510","511","512","513","514","515","516","517","518","519","520"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserProfileInnerComponent.jsx",["521","522","523","524","525","526","527","528","529","530","531","532"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\TimelineInnerComponent.jsx",["533","534","535","536","537","538","539","540","541","542","543"],"import React, { Component } from 'react';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport UserProfileDataService from '../service/UserProfileDataService';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\n\r\n\r\nclass TimelineInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                items: [],      \r\n            filter: props.filter,\r\n            users:[],\r\n            firstId: '',\r\n            lastId: '',\r\n            count: '',\r\n            errormsg: null,\r\n            givenAtErrors:null,\r\n            returnAtErrors: null,\r\n            timeErrors: null,\r\n            deletedIds:null\r\n            \r\n            \r\n            }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n\r\n   \r\n    componentDidMount() {\r\n        \r\n\r\n      \r\n        let search = `?productDetailId=` + this.state.filter.productDetailId + `&givenAfter=` + this.state.filter.givenAfter;\r\n        search += this.state.returnedBefore ? `&returnedBefore=` + this.state.filter.returnedBefore : ``;\r\n        this.refresh(search)\r\n    } \r\n\r\n    refresh(search) {\r\n        UserProfileDataService.retrieveTimeline(search)\r\n            .then(\r\n            response => { \r\n                console.log(\"response = \" + JSON.stringify(response));\r\n                let users = JSON.parse(JSON.stringify(this.state.filter.userNames));\r\n                users.push(response.data.select);\r\n                    this.setState({\r\n                        items: response.data.items || [],\r\n                        firstId: response.data.firstId,\r\n                        lastId: response.data.lastId,\r\n                        count: response.data.count,\r\n                        users:users\r\n                       // pager: response.data.pager,\r\n                    });\r\n                }\r\n        ).catch((error) => {\r\n            let msg = error.response && typeof error.response.data == 'string' ? error.response.data :\r\n                error.response.data.message ? error.response.data.message : error;\r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n    }\r\n\r\n    getFilteredInventoty() {//original\r\n        let filteredInventory = (this.state.filter.productDetailId) ? this.state.filter.inventoryNumbers.find(n => n.value == this.state.filter.productDetailId).name\r\n            : null;\r\n        return filteredInventory\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"in submit\");\r\n        /* let item = {\r\n             items: values.items,\r\n             firstId: this.state.firstId,\r\n             lastId: this.state.lastId,\r\n             targetDate: values.targetDate\r\n         }*/\r\n\r\n        values.items.map(i => {\r\n            let g = i.givenAt;\r\n            g = new Date(g);\r\n            console.log(\"g before turn = \" + g);\r\n            console.log(\"type og g = \" + typeof g);\r\n            g.setHours(g.getHours() - g.getTimezoneOffset() / 60);\r\n            console.log(\"g after turn = \" + g);\r\n\r\n        }\r\n        )\r\n        console.log(\"values to submit = \" + JSON.stringify(values));\r\n        UserProfileDataService.saveTimeline(values)\r\n            .then(\r\n                response => {\r\n                   // console.log(\"response ok = \" + JSON.stringify(response));\r\n                    let msg = response.data + ' items saved';\r\n                    msg += values.deletedIds && values.deletedIds.length > 0 ? ', ' + values.deletedIds.length + ' deleted' : '';\r\n                    msg+= ' successfully';\r\n                    this.props.refresh();\r\n                    this.props.setMessage(msg);\r\n                   // this.props.setMessage(response)\r\n                    \r\n\r\n\r\n                }\r\n            ).catch((error) => {\r\n                console.log(\"error = \" + error);\r\n               // console.log(\"json error.response = \" + JSON.stringify(error.response));\r\n                let msg = error.response && error.response.data && typeof error.response.data == 'string' ? error.response.data :\r\n                   \r\n                    error.response && error.response.data && typeof error.response.data == 'object'\r\n                        && error.response.data.message != null ? error.response && error.response.data &&error.response.data.message :\r\n                        error.response && error.response.data && typeof error.response.data == 'object'\r\n                        && error.response.data.message == null ? 'errors found !!!' : error;\r\n                //console.log(\"errormsg = \" + msg);\r\n                \r\n                this.setState({ errormsg: msg })\r\n\r\n                console.log(\"json error.response = \" + JSON.stringify(error.response));\r\n                if (error.response && typeof error.response.data == 'object' && error.response.data.items != null) {\r\n                    console.log(\"typeof error.response.data == 'object' \");\r\n                   /* let items = this.state.items;\r\n                    items = error.response.data.items;\r\n                    let givenAtErrors = this.state.givenAtErrors;\r\n                    givenAtErrors = error.response.givenAtErrors;\r\n                    let returnAtErrors = this.state.returnAtErrors;*/\r\n                    this.setState({\r\n                        errormsg: msg,\r\n                        items: error.response.data.items,\r\n                        givenAtErrors: error.response.data.givenAtErrors,\r\n                        returnAtErrors: error.response.data.returnAtErrors,\r\n                        timeErrors: error.response.data.timeErrors\r\n                    })\r\n\r\n                   // values.items = error.response.data.items;\r\n                   // values.givenAtErrors = error.response.data.givenAtErrors;\r\n                   // values.returnAtErrors = error.response.data.returnAtErrors;\r\n\r\n\r\n                }/* else {\r\n                    this.setState({ errormsg: msg })\r\n                }*/\r\n           /* console.log(\"error = \" + error);\r\n            console.log(\"json error.response = \" + JSON.stringify(error.response));\r\n            console.log(\" error.response && typeof error.response.data == 'string'  = \" + error.response && typeof error.response.data == 'string');\r\n            console.log(\" error.response && typeof error.response.data == 'object'  = \" + error.response && typeof error.response.data == 'object');*/\r\n            \r\n    })\r\n    }\r\n\r\n    validate(values) {\r\n       console.log(\"values.items.length = \"+values.items.length)\r\n        let errors = {}\r\n       \r\n        values.items.map((item, i) => {\r\n                    \r\n            if (item.givenAt == null) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].givenAt = 'field is required !!!'\r\n            }\r\n            else if ((values.items.length - 1) != i && item.returnedAt == null) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = 'field is required !!!'}\r\n            else if (item.returnedAt != null && new Date(item.returnedAt) < new Date(item.givenAt)) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = \"can't be before given at !!!\"\r\n            }\r\n        })\r\n        console.log(\"validate errors = \" + JSON.stringify(errors))\r\n        return errors\r\n    }\r\n\r\n    onprofileRemove(i, values, setFieldValue) {\r\n        this.nulifyErrors(values,setFieldValue);\r\n        console.log(\"remove profile i = \"+i)\r\n        let items = values.items;\r\n        let deletedIds = values.deletedIds;\r\n        if (items[i].id != null) {\r\n            if (deletedIds == null) deletedIds = [];\r\n            deletedIds.push(items[i].id)\r\n        }\r\n        items.splice(i, 1);\r\n       /* this.setState({\r\n            items: items,\r\n            deletedIds: deletedIds\r\n        })*/\r\n\r\n        setFieldValue(\"items\", items);\r\n        setFieldValue(\"deletedIds\", deletedIds);\r\n    }\r\n    onprofileAdd(i, values, setFieldValue) {\r\n        console.log(\"adding profile\");\r\n        this.nulifyErrors(values,setFieldValue);\r\n       /* let items = this.state.items;\r\n        let item = { id:null, productDetailId:this.state.filter.productDetailId, userId:null, givenAt:null, returnedAt:null };\r\n        items.splice(i+1, 0, item);//arr.splice(index, 0, item); will insert item into arr at the specified index (deleting 0 items first,\r\n        this.setState({ items: items })*/\r\n\r\n        let items = values.items;\r\n        let item = { id: null, productDetailId: this.state.filter.productDetailId, userId: null, givenAt: null, returnedAt: null };\r\n        items.splice(i + 1, 0, item); //arr.splice(index, 0, item); will insert item into arr at the specified index (deleting 0 items first,\r\n        setFieldValue(\"items\", items);\r\n\r\n    }\r\n\r\n    nulifyErrors(values,setFieldValue) {\r\n        /*let givenAtErrors = this.state.givenAtErrors;\r\n        let returnAtErrors = this.state.returnAtErrors;\r\n        let timeErrors = this.state.timeErrors;\r\n        givenAtErrors = returnAtErrors = timeErrors = null;*/\r\n        /*this.setState({\r\n            givenAtErrors: null,\r\n            returnAtErrors: null,\r\n            timeErrors:null\r\n        })*/\r\n        /*let givenAtErrors = values.givenAtErrors;\r\n        let returnAtErrors = values.returnAtErrors;\r\n        let timeErrors = values.timeErrors;*/\r\n        setFieldValue(\"givenAtErrors\", null);\r\n        setFieldValue(\"returnAtErrors\", null);\r\n        setFieldValue(\"timeErrors\", null);\r\n    }\r\n   \r\n\r\n    render() {\r\n        console.log(\"rendering\");\r\n\r\n        let { items, firstId, lastId, count, givenAtErrors, returnAtErrors, timeErrors, deletedIds } = this.state;\r\n        //let givenAtErrors= [];\r\n        //let returnAtErrors= [];\r\n        //let deletedIds = [];\r\n        let minDate = this.state.items[0] && new Date(this.state.items[0].givenAt);\r\n        let length = this.state.items.length;\r\n        let maxDate = (length > 0 && this.state.items[length - 1].returnedAt && new Date(this.state.items[length - 1].returnedAt))|| new Date();\r\n        console.log(\"min = \" + minDate);\r\n        return (\r\n            <Formik\r\n                initialValues={{ items, firstId, lastId, count, givenAtErrors, returnAtErrors, timeErrors , deletedIds}}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n            >\r\n                {({ setFieldValue, values }) => (                       \r\n                            <Form>\r\n                                <div className=\"pt-2 px-2 mx-3 d-flex flex-wrap \">\r\n                                    <div >\r\n                                        <button className=\"button btn-mybtn\" style={{ padding: \".3rem 1.8rem .4rem 1.8rem\" }} type=\"submit\">Save changes</button>\r\n                                        <button className=\"button btn-delete\" style={{ padding: \".3rem 1.8rem .4rem 1.8rem\" }} onClick={() => { }\r\n                                        }>Cancel</button>\r\n                                    </div>\r\n                                    <div className=\" d-inline-flex justify-content-end flex-grow-1 mr-5\">\r\n                                        <label className=\"pager-label mr-3\">showing&nbsp;{1}-{this.state.count}&nbsp; of &nbsp; {this.state.count}</label>\r\n                                        <label className=\"pager-label mr-3\">for &nbsp;{this.getFilteredInventoty()}</label></div>\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <table className=\"table border-bottom my-table mt-2\">\r\n                            <thead>\r\n                                <tr className=\"\">\r\n                                    <th style={{ width: \"30px\" }}></th>\r\n                                    <th className=\"wl\">user</th>\r\n                                    <th className=\"w20\">given at</th>\r\n                                    <th className=\"w20\">returned at</th>\r\n                                    <th ></th>\r\n                                        </tr>\r\n                            </thead></table>\r\n                        {console.log(\"values.givenAtErrors instanceof Array = \" + (values.givenAtErrors instanceof Array))\r\n                        }\r\n                        {console.log(\"this.state.givenAtErrors = \" + JSON.stringify(this.state.givenAtErrors))\r\n                        }\r\n                        {/* <p style={{ fontSize: \"75%\", marginLeft:\"15px\" }}> ps : profiles without user name will be added to your profile </p>*/}\r\n                            {\r\n                                values.items &&\r\n                                values.items.map((item, i) =>\r\n                                <fieldset key={item.id || i} className=\"d-flex align-items-top pb-1 pt-1 w100\">\r\n                                    {//console.log(\"item.id = \" + (item.id))\r\n                                    }\r\n                                    {//console.log(\"JSON this.state.first = \" + JSON.stringify(this.state.first))\r\n                                    }\r\n                                    {//console.log(\" this.state.first = \" + (this.state.first))\r\n                                    }\r\n                                    {//console.log(\"typof this.state.first = \" + (typeof this.state.first))\r\n                                    }\r\n                                    {//console.log(\"item.id == this.state.first = \" + (item.id == this.state.first))\r\n                                    }\r\n                                        <div className=\"inline\" style={{ width: \"30px\" }}>{i + 1}-</div>\r\n                                    <div className=\"inline wl\">\r\n                                            {/* <label>user&nbsp;</label>*/}\r\n                                            <CustomSelect\r\n                                                className={\"inline inline-3\"}\r\n                                                items={this.state.users}\r\n                                                value={values.items[i].userId}\r\n                                                onChange={(selected) => setFieldValue(`items.${i}.userId`, selected.value)}\r\n                                        />                                        \r\n                                    </div>\r\n                                    {/*console.log(\"this.state.givenAtErrors = \" + JSON.stringify(this.state.givenAtErrors))*/\r\n                                    }\r\n                                    \r\n                                    <div className=\"inline w20\">\r\n                                            {/*<label className=\"mb-1\">given at&nbsp;</label>*/}\r\n                                            <DatePicker className=\"form-control inline-2\"\r\n                                                dateFormat=\"dd MMMM yyyy\"\r\n                                                locale=\"en-GB\"\r\n                                               // maxDate={values.dateCreatedBefore}\r\n                                            disabled={item.id == firstId}\r\n                                            minDate={minDate}\r\n                                            maxDate={maxDate}\r\n                                            selected={(values.items[i].givenAt && new Date(values.items[i].givenAt)) || null}\r\n                                            onChange={date => setFieldValue(`items.${i}.givenAt`, date)} />\r\n                                        <ErrorMessage name={`${i}.givenAt`} component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\" /> \r\n                                        {values.givenAtErrors instanceof Array\r\n                                            && values.givenAtErrors[i]\r\n                                            &&\r\n                                            <div className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\">\r\n                                            {values.givenAtErrors[i]}\r\n                                            </div>\r\n                                        }\r\n                                        </div>\r\n                                    <div className=\"inline w20\">\r\n                                            {/* <label className=\"mb-1\">returned at&nbsp;</label>*/}\r\n                                            <DatePicker className=\"form-control inline-2\"\r\n                                                dateFormat=\"dd MMMM yyyy\"\r\n                                                locale=\"en-GB\"\r\n                                                // maxDate={values.dateCreatedBefore}\r\n                                            disabled={item.id == lastId}\r\n                                            selected={(values.items[i].returnedAt && new Date(values.items[i].returnedAt))|| null}\r\n                                            onChange={date => setFieldValue(`items.${i}.returnedAt`, date)} />\r\n                                        <ErrorMessage name={`items.${i}.returnedAt`} component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\"/>\r\n                                        {values.returnAtErrors instanceof Array\r\n                                            && values.returnAtErrors[i]\r\n                                            &&\r\n                                            <div className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\">\r\n                                                {values.returnAtErrors[i]}\r\n                                            </div>\r\n                                        }\r\n                                        {values.timeErrors instanceof Array\r\n                                        && values.timeErrors[i]\r\n                                        &&\r\n                                            <div className=\"alert alert-warning mr-3 mbt-01 p-1 pl-2\">\r\n                                            {values.timeErrors[i]}\r\n                                        </div>\r\n                                    }\r\n                                    </div>\r\n\r\n                                   \r\n                                    <div className=\"inline\">\r\n                                       \r\n                                        <button className=\"btn btn-mybtn btn-delete m-0 ml-1\" type=\"button\"\r\n                                            disabled={item.id == this.state.firstId || item.id == this.state.lastId}\r\n                                            onClick={() => {\r\n                                                this.onprofileRemove(i, values, setFieldValue);\r\n                                            }}><i class=\"fa fa-close ml-auto\">\r\n                                            </i></button>\r\n                                       \r\n                                        {\r\n                                            values.items.length - 1 != i &&\r\n                                            <button className=\"btn btn-mybtn m-0 ml-1\" type=\"button\"\r\n                                                onClick={() => {\r\n                                                    this.onprofileAdd(i, values, setFieldValue);\r\n                                                }}><i class=\"fa fa-plus ml-auto\">\r\n                                                </i></button>\r\n                                        }\r\n                                    </div>\r\n                                    \r\n\r\n                                    </fieldset>\r\n                                    )} \r\n                          \r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default TimelineInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CountryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCitiesComponent.jsx",["544"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport CityFilter from './Filters/CityFilter';\r\nimport '../myStyles/Style.css';\r\n\r\nclass ListCitiesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',           \r\n            message: null,\r\n           \r\n\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        // this.deleteChildClicked = this.deleteChildClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"version = \" + React.version);\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        console.log(\"search = \" + this.state.search);\r\n        CountryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                       \r\n                    });\r\n                }).catch((error) => {\r\n                    this.setState({\r\n                        errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n                    })\r\n                })\r\n    }\r\n\r\n    addClicked() {\r\n        \r\n    }\r\n    updateClicked(id) {\r\n        \r\n    }\r\n    deleteClicked(id) {\r\n       \r\n    }\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n\r\n    render() {\r\n      \r\n        return (\r\n            <div className=\"px-3\">\r\n\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                {this.state.filter && <CityFilter {...this.state.filter} />}\r\n               \r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Countries</strong>\r\n                        </h5>\r\n                       \r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                \r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n                       \r\n                            <table className=\"table border-bottom my-table\" >\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">name</th>\r\n                                        <th scope=\"col\" >zone</th>\r\n                                        <th scope=\"col\" >country</th>\r\n                                        <th >currency</th>\r\n                                        <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.state.items.map(\r\n                                            item =>\r\n                                                <tr>\r\n                                                    <td>{item.name}</td>\r\n                                                    <td>\r\n                                                        {item.timeZone}\r\n                                                    </td>\r\n                                                    <td >{item.country.name}</td>\r\n                                                    <td >{item.country.currency}</td>\r\n                                                    <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                        <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                        )}\r\n                                </tbody>\r\n                            </table>                       \r\n                    </div>\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCitiesComponent",["545","546"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CityFilter.jsx",["547","548","549","550","551"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCountriesComponent.jsx",["552","553","554","555","556"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CountryInnerComponent.jsx",["557","558"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CityInnerComponent.jsx",["559","560","561","562"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCategoriesComponent.jsx",["563","564","565","566"],"import React, { Component } from 'react';\r\nimport CategoryDataService from '../service/CategoryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport CategoryFilter from './Filters/CategoryFilter';\r\nimport '../myStyles/Style.css';\r\nimport CategoryInnerComponent from './CategoryInnerComponent'\r\n\r\nclass ListCategoriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            categoryUpdateShow: {\r\n                category: {}, show: false\r\n            },\r\n\r\n\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)      \r\n        \r\n    }\r\n\r\n    componentDidMount() {       \r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {        \r\n        CategoryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                    });\r\n                }).catch((error) => {\r\n                    this.setState({\r\n                        errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n                    })\r\n                })\r\n    }\r\n\r\n   \r\n    updateClickedInner = (item) => {\r\n        /* let messages = this.state.message;\r\n         if (messages != null )\r\n             messages = null;*/\r\n        item = item || {};\r\n        let show = this.state.categoryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n\r\n            show.category = JSON.parse(JSON.stringify(item))\r\n\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            categoryUpdateShow: show,\r\n            message: null,           \r\n        });\r\n    }\r\n    deleteClicked(id) {\r\n        CategoryDataService.delete(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                let errormsg = error.response && error.response.data ?\r\n                    error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n                //let errormessage = this.state.dderrormessage;\r\n                let msg = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n                msg = msg.indexOf(\"ConstraintViolationException\")>-1 ? \"can't delete item with associated records !!!\" : msg\r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n\r\n    }\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"px-3\">\r\n                {this.state.categoryUpdateShow && this.state.categoryUpdateShow.show == true &&\r\n                    <CategoryInnerComponent\r\n                        categoryUpdateShow={this.state.categoryUpdateShow}\r\n                        updateClickedInner={() => this.updateClickedInner(null)}\r\n                        setMessage={(value) => this.setState({ message: value})}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                {this.state.filter && <CategoryFilter {...this.state.filter} />}\r\n\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Categories</strong>\r\n                        </h5>\r\n\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={() => this.updateClickedInner({})}>Add New</button>\r\n\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n                                   \r\n                                    <th scope=\"col\" >type</th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        item =>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    {item.productType}\r\n                                                </td>\r\n                                                <td>{item.name}</td>\r\n                                               \r\n                                               \r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCategoriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CategoryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CategoryFilter.jsx",["567","568","569","570"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass CategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values = \" + JSON.stringify(values));\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log(\"new path = \" + newPath);\r\n        newPath = path + '?' + newPath;\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        window.location.href = window.location.pathname;\r\n\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n         else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { name, names, productType, productTypes, filteredNames } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ name, names, productType, productTypes, filteredNames }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes&&productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                   // console.log('value of checked = ' + value.target.value);\r\n                                                   \r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value.target.value);\r\n                                                   \r\n                                                    setFieldValue(\"productType\", value);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.name || ''}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                           \r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CategoryInnerComponent.jsx",["571","572","573","574"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserCategoriesComponent.jsx",["575","576","577","578","579"],"import React, { Component } from 'react';\r\nimport UserCategoryDataService from '../service/UserCategoryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserCategoryFilter from './Filters/UserCategoryFilter';\r\nimport '../myStyles/Style.css';\r\nimport UserCategoryInnerComponent from './UserCategoryInnerComponent'\r\n\r\nclass ListUserCategoriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            categoryUpdateShow: {\r\n                category: {}, show: false\r\n            },\r\n\r\n\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        UserCategoryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                    });\r\n                }).catch((error) => {\r\n                    this.setState({\r\n                        errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n                    })\r\n                })\r\n    }\r\n\r\n\r\n    updateClickedInner = (item) => {\r\n        /* let messages = this.state.message;\r\n         if (messages != null )\r\n             messages = null;*/\r\n        console.log(\"item = \" + JSON.stringify(item))\r\n        item = item || {};\r\n        let show = this.state.categoryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n\r\n            show.category = JSON.parse(JSON.stringify(item))\r\n\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            categoryUpdateShow: show,\r\n            message: null,\r\n        });\r\n    }\r\n    deleteClicked(id) {\r\n        UserCategoryDataService.delete(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                let errormsg = error.response && error.response.data ?\r\n                    error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n                //let errormessage = this.state.dderrormessage;\r\n                let msg = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n                msg = msg.indexOf(\"ConstraintViolationException\") > -1 ? \"can't delete item with associated records !!!\" : msg\r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n\r\n    }\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"px-3\">\r\n                {this.state.categoryUpdateShow && this.state.categoryUpdateShow.show == true &&\r\n                    <UserCategoryInnerComponent\r\n                        categoryUpdateShow={this.state.categoryUpdateShow}\r\n                        updateClickedInner={() => this.updateClickedInner(null)}\r\n                        setMessage={(value) => this.setState({ message: value })}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n\r\n                \r\n                {this.state.filter && <UserCategoryFilter {...this.state.filter} />}\r\n\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Categories</strong>\r\n                        </h5>\r\n\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={() => this.updateClickedInner({})}>Add New</button>\r\n\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormsg: null })}></i></div>}\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n\r\n                                    <th scope=\"col\" >type</th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">amortization</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        item =>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    {item.category.productType}\r\n                                                </td>\r\n                                                <td>{item.category.name}</td>\r\n                                                <td>{item.category.productType == 'LTA' ? item.amortizationPercent + '%' : '-'}</td>\r\n\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListUserCategoriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserCategoryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserCategoryFilter.jsx",["580","581","582","583","584","585","586","587","588"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass UserCategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            categoryId: props.categoryId,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values = \" + JSON.stringify(values));\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log(\"new path = \" + newPath);\r\n        newPath = path + '?' + newPath;\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        window.location.href = window.location.pathname;\r\n\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { categoryId, names, productType, productTypes, filteredNames, amortizationPercentMoreThan, amortizationPercentLessThan } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ categoryId, names, productType, productTypes, filteredNames, amortizationPercentMoreThan, amortizationPercentLessThan }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes && productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                    // console.log('value of checked = ' + value.target.value);\r\n                                                    value = value.target.value;\r\n                                                    value = values.productType == value ? null : value;\r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value);\r\n\r\n                                                    setFieldValue(\"productType\", value);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.categoryId || ''}\r\n                                    onChange={(selected) => setFieldValue(\"categoryId\", selected.value)}\r\n                                />\r\n                            </div>\r\n\r\n                           \r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-50px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                            name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan} />&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-50px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                            name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan} />&nbsp;%\r\n                                        </div>\r\n                                </div>\r\n                           \r\n\r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserCategoryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserCategoryInnerComponent.jsx",["589","590","591","592","593","594","595"],{"ruleId":"596","replacedBy":"597"},{"ruleId":"598","replacedBy":"599"},{"ruleId":"600","severity":1,"message":"601","line":1,"column":8,"nodeType":"602","messageId":"603","endLine":1,"endColumn":12},{"ruleId":"600","severity":1,"message":"604","line":9,"column":8,"nodeType":"602","messageId":"603","endLine":9,"endColumn":29},{"ruleId":"605","severity":1,"message":"606","line":15,"column":25,"nodeType":"607","endLine":15,"endColumn":63},{"ruleId":"596","replacedBy":"608"},{"ruleId":"598","replacedBy":"609"},{"ruleId":"600","severity":1,"message":"601","line":1,"column":8,"nodeType":"602","messageId":"603","endLine":1,"endColumn":12},{"ruleId":"605","severity":1,"message":"606","line":57,"column":25,"nodeType":"607","endLine":57,"endColumn":82},{"ruleId":"610","severity":1,"message":"611","line":65,"column":74,"nodeType":"612","messageId":"613","endLine":65,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":70,"column":74,"nodeType":"612","messageId":"613","endLine":70,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":78,"column":78,"nodeType":"612","messageId":"613","endLine":78,"endColumn":80},{"ruleId":"610","severity":1,"message":"611","line":81,"column":74,"nodeType":"612","messageId":"613","endLine":81,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":89,"column":74,"nodeType":"612","messageId":"613","endLine":89,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":92,"column":74,"nodeType":"612","messageId":"613","endLine":92,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":96,"column":74,"nodeType":"612","messageId":"613","endLine":96,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":99,"column":74,"nodeType":"612","messageId":"613","endLine":99,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":104,"column":64,"nodeType":"612","messageId":"613","endLine":104,"endColumn":66},{"ruleId":"610","severity":1,"message":"611","line":111,"column":68,"nodeType":"612","messageId":"613","endLine":111,"endColumn":70},{"ruleId":"610","severity":1,"message":"611","line":29,"column":22,"nodeType":"612","messageId":"613","endLine":29,"endColumn":24},{"ruleId":"610","severity":1,"message":"611","line":45,"column":72,"nodeType":"612","messageId":"613","endLine":45,"endColumn":74},{"ruleId":"610","severity":1,"message":"611","line":52,"column":30,"nodeType":"612","messageId":"613","endLine":52,"endColumn":32},{"ruleId":"610","severity":1,"message":"611","line":17,"column":34,"nodeType":"612","messageId":"613","endLine":17,"endColumn":36},{"ruleId":"610","severity":1,"message":"611","line":45,"column":24,"nodeType":"612","messageId":"613","endLine":45,"endColumn":26},{"ruleId":"610","severity":1,"message":"611","line":83,"column":65,"nodeType":"612","messageId":"613","endLine":83,"endColumn":67},{"ruleId":"605","severity":1,"message":"606","line":83,"column":107,"nodeType":"607","endLine":83,"endColumn":179},{"ruleId":"610","severity":1,"message":"611","line":87,"column":65,"nodeType":"612","messageId":"613","endLine":87,"endColumn":67},{"ruleId":"605","severity":1,"message":"606","line":87,"column":106,"nodeType":"607","endLine":87,"endColumn":178},{"ruleId":"605","severity":1,"message":"606","line":90,"column":82,"nodeType":"607","endLine":90,"endColumn":160},{"ruleId":"610","severity":1,"message":"611","line":93,"column":65,"nodeType":"612","messageId":"613","endLine":93,"endColumn":67},{"ruleId":"605","severity":1,"message":"606","line":93,"column":106,"nodeType":"607","endLine":93,"endColumn":178},{"ruleId":"605","severity":1,"message":"606","line":114,"column":51,"nodeType":"607","endLine":114,"endColumn":160},{"ruleId":"605","severity":1,"message":"606","line":123,"column":51,"nodeType":"607","endLine":123,"endColumn":155},{"ruleId":"600","severity":1,"message":"614","line":2,"column":24,"nodeType":"602","messageId":"603","endLine":2,"endColumn":29},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":46,"column":51,"nodeType":"618","messageId":"619","endLine":46,"endColumn":53},{"ruleId":"620","severity":1,"message":"621","line":5,"column":1,"nodeType":"622","endLine":50,"endColumn":2},{"ruleId":"610","severity":1,"message":"611","line":29,"column":62,"nodeType":"612","messageId":"613","endLine":29,"endColumn":64},{"ruleId":"600","severity":1,"message":"614","line":2,"column":24,"nodeType":"602","messageId":"603","endLine":2,"endColumn":29},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":46,"column":51,"nodeType":"618","messageId":"619","endLine":46,"endColumn":53},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":52,"column":51,"nodeType":"618","messageId":"619","endLine":52,"endColumn":53},{"ruleId":"610","severity":1,"message":"611","line":142,"column":101,"nodeType":"612","messageId":"613","endLine":142,"endColumn":103},{"ruleId":"610","severity":1,"message":"611","line":147,"column":95,"nodeType":"612","messageId":"613","endLine":147,"endColumn":97},{"ruleId":"610","severity":1,"message":"611","line":175,"column":109,"nodeType":"612","messageId":"613","endLine":175,"endColumn":111},{"ruleId":"610","severity":1,"message":"611","line":176,"column":71,"nodeType":"612","messageId":"613","endLine":176,"endColumn":73},{"ruleId":"610","severity":1,"message":"611","line":179,"column":109,"nodeType":"612","messageId":"613","endLine":179,"endColumn":111},{"ruleId":"610","severity":1,"message":"611","line":180,"column":71,"nodeType":"612","messageId":"613","endLine":180,"endColumn":73},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":58,"column":51,"nodeType":"618","messageId":"619","endLine":58,"endColumn":53},{"ruleId":"610","severity":1,"message":"623","line":61,"column":54,"nodeType":"612","messageId":"613","endLine":61,"endColumn":56},{"ruleId":"600","severity":1,"message":"624","line":5,"column":8,"nodeType":"602","messageId":"603","endLine":5,"endColumn":20},{"ruleId":"600","severity":1,"message":"625","line":115,"column":15,"nodeType":"602","messageId":"603","endLine":115,"endColumn":22},{"ruleId":"610","severity":1,"message":"611","line":153,"column":85,"nodeType":"612","messageId":"613","endLine":153,"endColumn":87},{"ruleId":"610","severity":1,"message":"611","line":165,"column":115,"nodeType":"612","messageId":"613","endLine":165,"endColumn":117},{"ruleId":"610","severity":1,"message":"611","line":227,"column":116,"nodeType":"612","messageId":"613","endLine":227,"endColumn":118},{"ruleId":"610","severity":1,"message":"611","line":235,"column":84,"nodeType":"612","messageId":"613","endLine":235,"endColumn":86},{"ruleId":"610","severity":1,"message":"611","line":90,"column":34,"nodeType":"612","messageId":"613","endLine":90,"endColumn":36},{"ruleId":"600","severity":1,"message":"626","line":112,"column":15,"nodeType":"602","messageId":"603","endLine":112,"endColumn":22},{"ruleId":"627","severity":1,"message":"628","line":173,"column":53,"nodeType":"629","endLine":173,"endColumn":64},{"ruleId":"610","severity":1,"message":"611","line":177,"column":73,"nodeType":"612","messageId":"613","endLine":177,"endColumn":75},{"ruleId":"610","severity":1,"message":"611","line":189,"column":93,"nodeType":"612","messageId":"613","endLine":189,"endColumn":95},{"ruleId":"600","severity":1,"message":"626","line":106,"column":15,"nodeType":"602","messageId":"603","endLine":106,"endColumn":22},{"ruleId":"610","severity":1,"message":"611","line":156,"column":47,"nodeType":"612","messageId":"613","endLine":156,"endColumn":49},{"ruleId":"610","severity":1,"message":"611","line":170,"column":55,"nodeType":"612","messageId":"613","endLine":170,"endColumn":57},{"ruleId":"610","severity":1,"message":"611","line":83,"column":41,"nodeType":"612","messageId":"613","endLine":83,"endColumn":43},{"ruleId":"610","severity":1,"message":"611","line":146,"column":45,"nodeType":"612","messageId":"613","endLine":146,"endColumn":47},{"ruleId":"616","severity":1,"message":"617","line":162,"column":20,"nodeType":"618","messageId":"619","endLine":162,"endColumn":22},{"ruleId":"616","severity":1,"message":"617","line":163,"column":37,"nodeType":"618","messageId":"619","endLine":163,"endColumn":39},{"ruleId":"600","severity":1,"message":"630","line":227,"column":21,"nodeType":"602","messageId":"603","endLine":227,"endColumn":27},{"ruleId":"610","severity":1,"message":"611","line":230,"column":42,"nodeType":"612","messageId":"613","endLine":230,"endColumn":44},{"ruleId":"610","severity":1,"message":"611","line":242,"column":49,"nodeType":"612","messageId":"613","endLine":242,"endColumn":51},{"ruleId":"610","severity":1,"message":"611","line":262,"column":44,"nodeType":"612","messageId":"613","endLine":262,"endColumn":46},{"ruleId":"610","severity":1,"message":"611","line":311,"column":33,"nodeType":"612","messageId":"613","endLine":311,"endColumn":35},{"ruleId":"610","severity":1,"message":"611","line":323,"column":23,"nodeType":"612","messageId":"613","endLine":323,"endColumn":25},{"ruleId":"610","severity":1,"message":"611","line":345,"column":23,"nodeType":"612","messageId":"613","endLine":345,"endColumn":25},{"ruleId":"610","severity":1,"message":"611","line":368,"column":23,"nodeType":"612","messageId":"613","endLine":368,"endColumn":25},{"ruleId":"610","severity":1,"message":"611","line":476,"column":34,"nodeType":"612","messageId":"613","endLine":476,"endColumn":36},{"ruleId":"610","severity":1,"message":"611","line":476,"column":74,"nodeType":"612","messageId":"613","endLine":476,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":478,"column":38,"nodeType":"612","messageId":"613","endLine":478,"endColumn":40},{"ruleId":"610","severity":1,"message":"611","line":510,"column":37,"nodeType":"612","messageId":"613","endLine":510,"endColumn":39},{"ruleId":"610","severity":1,"message":"611","line":551,"column":74,"nodeType":"612","messageId":"613","endLine":551,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":563,"column":86,"nodeType":"612","messageId":"613","endLine":563,"endColumn":88},{"ruleId":"610","severity":1,"message":"611","line":574,"column":74,"nodeType":"612","messageId":"613","endLine":574,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":616,"column":53,"nodeType":"612","messageId":"613","endLine":616,"endColumn":55},{"ruleId":"610","severity":1,"message":"611","line":624,"column":66,"nodeType":"612","messageId":"613","endLine":624,"endColumn":68},{"ruleId":"610","severity":1,"message":"623","line":626,"column":72,"nodeType":"612","messageId":"613","endLine":626,"endColumn":74},{"ruleId":"610","severity":1,"message":"611","line":631,"column":66,"nodeType":"612","messageId":"613","endLine":631,"endColumn":68},{"ruleId":"610","severity":1,"message":"611","line":632,"column":77,"nodeType":"612","messageId":"613","endLine":632,"endColumn":79},{"ruleId":"610","severity":1,"message":"611","line":642,"column":67,"nodeType":"612","messageId":"613","endLine":642,"endColumn":69},{"ruleId":"610","severity":1,"message":"611","line":643,"column":71,"nodeType":"612","messageId":"613","endLine":643,"endColumn":73},{"ruleId":"610","severity":1,"message":"611","line":653,"column":70,"nodeType":"612","messageId":"613","endLine":653,"endColumn":72},{"ruleId":"610","severity":1,"message":"611","line":661,"column":69,"nodeType":"612","messageId":"613","endLine":661,"endColumn":71},{"ruleId":"610","severity":1,"message":"611","line":672,"column":53,"nodeType":"612","messageId":"613","endLine":672,"endColumn":55},{"ruleId":"610","severity":1,"message":"611","line":847,"column":53,"nodeType":"612","messageId":"613","endLine":847,"endColumn":55},{"ruleId":"600","severity":1,"message":"626","line":100,"column":15,"nodeType":"602","messageId":"603","endLine":100,"endColumn":22},{"ruleId":"627","severity":1,"message":"628","line":152,"column":49,"nodeType":"629","endLine":152,"endColumn":60},{"ruleId":"610","severity":1,"message":"623","line":121,"column":40,"nodeType":"612","messageId":"613","endLine":121,"endColumn":42},{"ruleId":"610","severity":1,"message":"611","line":158,"column":36,"nodeType":"612","messageId":"613","endLine":158,"endColumn":38},{"ruleId":"600","severity":1,"message":"631","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":41},{"ruleId":"610","severity":1,"message":"611","line":93,"column":75,"nodeType":"612","messageId":"613","endLine":93,"endColumn":77},{"ruleId":"610","severity":1,"message":"611","line":130,"column":68,"nodeType":"612","messageId":"613","endLine":130,"endColumn":70},{"ruleId":"610","severity":1,"message":"611","line":142,"column":63,"nodeType":"612","messageId":"613","endLine":142,"endColumn":65},{"ruleId":"610","severity":1,"message":"611","line":291,"column":75,"nodeType":"612","messageId":"613","endLine":291,"endColumn":77},{"ruleId":"610","severity":1,"message":"611","line":291,"column":119,"nodeType":"612","messageId":"613","endLine":291,"endColumn":121},{"ruleId":"616","severity":1,"message":"617","line":296,"column":85,"nodeType":"618","messageId":"619","endLine":296,"endColumn":87},{"ruleId":"610","severity":1,"message":"611","line":297,"column":66,"nodeType":"612","messageId":"613","endLine":297,"endColumn":68},{"ruleId":"610","severity":1,"message":"611","line":305,"column":77,"nodeType":"612","messageId":"613","endLine":305,"endColumn":79},{"ruleId":"610","severity":1,"message":"611","line":309,"column":74,"nodeType":"612","messageId":"613","endLine":309,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":327,"column":101,"nodeType":"612","messageId":"613","endLine":327,"endColumn":103},{"ruleId":"610","severity":1,"message":"611","line":500,"column":78,"nodeType":"612","messageId":"613","endLine":500,"endColumn":80},{"ruleId":"610","severity":1,"message":"611","line":112,"column":27,"nodeType":"612","messageId":"613","endLine":112,"endColumn":29},{"ruleId":"600","severity":1,"message":"626","line":137,"column":15,"nodeType":"602","messageId":"603","endLine":137,"endColumn":22},{"ruleId":"610","severity":1,"message":"611","line":141,"column":74,"nodeType":"612","messageId":"613","endLine":141,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":203,"column":47,"nodeType":"612","messageId":"613","endLine":203,"endColumn":49},{"ruleId":"627","severity":1,"message":"628","line":217,"column":53,"nodeType":"629","endLine":217,"endColumn":64},{"ruleId":"610","severity":1,"message":"611","line":221,"column":73,"nodeType":"612","messageId":"613","endLine":221,"endColumn":75},{"ruleId":"610","severity":1,"message":"611","line":240,"column":59,"nodeType":"612","messageId":"613","endLine":240,"endColumn":61},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":62,"column":51,"nodeType":"618","messageId":"619","endLine":62,"endColumn":53},{"ruleId":"610","severity":1,"message":"623","line":65,"column":54,"nodeType":"612","messageId":"613","endLine":65,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":139,"column":85,"nodeType":"612","messageId":"613","endLine":139,"endColumn":87},{"ruleId":"610","severity":1,"message":"611","line":207,"column":105,"nodeType":"612","messageId":"613","endLine":207,"endColumn":107},{"ruleId":"610","severity":1,"message":"611","line":225,"column":109,"nodeType":"612","messageId":"613","endLine":225,"endColumn":111},{"ruleId":"610","severity":1,"message":"611","line":226,"column":71,"nodeType":"612","messageId":"613","endLine":226,"endColumn":73},{"ruleId":"610","severity":1,"message":"611","line":229,"column":109,"nodeType":"612","messageId":"613","endLine":229,"endColumn":111},{"ruleId":"610","severity":1,"message":"611","line":230,"column":71,"nodeType":"612","messageId":"613","endLine":230,"endColumn":73},{"ruleId":"610","severity":1,"message":"611","line":249,"column":78,"nodeType":"612","messageId":"613","endLine":249,"endColumn":80},{"ruleId":"610","severity":1,"message":"611","line":252,"column":89,"nodeType":"612","messageId":"613","endLine":252,"endColumn":91},{"ruleId":"610","severity":1,"message":"611","line":257,"column":79,"nodeType":"612","messageId":"613","endLine":257,"endColumn":81},{"ruleId":"610","severity":1,"message":"611","line":260,"column":89,"nodeType":"612","messageId":"613","endLine":260,"endColumn":91},{"ruleId":"610","severity":1,"message":"611","line":268,"column":78,"nodeType":"612","messageId":"613","endLine":268,"endColumn":80},{"ruleId":"610","severity":1,"message":"611","line":271,"column":89,"nodeType":"612","messageId":"613","endLine":271,"endColumn":91},{"ruleId":"610","severity":1,"message":"611","line":276,"column":79,"nodeType":"612","messageId":"613","endLine":276,"endColumn":81},{"ruleId":"610","severity":1,"message":"611","line":279,"column":89,"nodeType":"612","messageId":"613","endLine":279,"endColumn":91},{"ruleId":"610","severity":1,"message":"611","line":74,"column":38,"nodeType":"612","messageId":"613","endLine":74,"endColumn":40},{"ruleId":"610","severity":1,"message":"611","line":139,"column":38,"nodeType":"612","messageId":"613","endLine":139,"endColumn":40},{"ruleId":"610","severity":1,"message":"611","line":140,"column":19,"nodeType":"612","messageId":"613","endLine":140,"endColumn":21},{"ruleId":"610","severity":1,"message":"611","line":168,"column":23,"nodeType":"612","messageId":"613","endLine":168,"endColumn":25},{"ruleId":"600","severity":1,"message":"626","line":272,"column":15,"nodeType":"602","messageId":"603","endLine":272,"endColumn":22},{"ruleId":"610","severity":1,"message":"611","line":274,"column":44,"nodeType":"612","messageId":"613","endLine":274,"endColumn":46},{"ruleId":"610","severity":1,"message":"611","line":276,"column":63,"nodeType":"612","messageId":"613","endLine":276,"endColumn":65},{"ruleId":"610","severity":1,"message":"611","line":285,"column":83,"nodeType":"612","messageId":"613","endLine":285,"endColumn":85},{"ruleId":"610","severity":1,"message":"611","line":311,"column":35,"nodeType":"612","messageId":"613","endLine":311,"endColumn":37},{"ruleId":"610","severity":1,"message":"611","line":316,"column":71,"nodeType":"612","messageId":"613","endLine":316,"endColumn":73},{"ruleId":"610","severity":1,"message":"611","line":323,"column":75,"nodeType":"612","messageId":"613","endLine":323,"endColumn":77},{"ruleId":"610","severity":1,"message":"611","line":341,"column":43,"nodeType":"612","messageId":"613","endLine":341,"endColumn":45},{"ruleId":"610","severity":1,"message":"611","line":370,"column":35,"nodeType":"612","messageId":"613","endLine":370,"endColumn":37},{"ruleId":"610","severity":1,"message":"611","line":386,"column":51,"nodeType":"612","messageId":"613","endLine":386,"endColumn":53},{"ruleId":"610","severity":1,"message":"611","line":401,"column":63,"nodeType":"612","messageId":"613","endLine":401,"endColumn":65},{"ruleId":"610","severity":1,"message":"611","line":401,"column":108,"nodeType":"612","messageId":"613","endLine":401,"endColumn":110},{"ruleId":"610","severity":1,"message":"611","line":402,"column":81,"nodeType":"612","messageId":"613","endLine":402,"endColumn":83},{"ruleId":"610","severity":1,"message":"611","line":403,"column":81,"nodeType":"612","messageId":"613","endLine":403,"endColumn":83},{"ruleId":"610","severity":1,"message":"611","line":404,"column":81,"nodeType":"612","messageId":"613","endLine":404,"endColumn":83},{"ruleId":"610","severity":1,"message":"611","line":410,"column":67,"nodeType":"612","messageId":"613","endLine":410,"endColumn":69},{"ruleId":"610","severity":1,"message":"611","line":411,"column":74,"nodeType":"612","messageId":"613","endLine":411,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":422,"column":70,"nodeType":"612","messageId":"613","endLine":422,"endColumn":72},{"ruleId":"610","severity":1,"message":"623","line":422,"column":96,"nodeType":"612","messageId":"613","endLine":422,"endColumn":98},{"ruleId":"610","severity":1,"message":"623","line":427,"column":103,"nodeType":"612","messageId":"613","endLine":427,"endColumn":105},{"ruleId":"610","severity":1,"message":"611","line":430,"column":84,"nodeType":"612","messageId":"613","endLine":430,"endColumn":86},{"ruleId":"610","severity":1,"message":"611","line":484,"column":85,"nodeType":"612","messageId":"613","endLine":484,"endColumn":87},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"600","severity":1,"message":"632","line":40,"column":13,"nodeType":"602","messageId":"603","endLine":40,"endColumn":17},{"ruleId":"616","severity":1,"message":"617","line":57,"column":51,"nodeType":"618","messageId":"619","endLine":57,"endColumn":53},{"ruleId":"610","severity":1,"message":"623","line":66,"column":54,"nodeType":"612","messageId":"613","endLine":66,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":67,"column":25,"nodeType":"612","messageId":"613","endLine":67,"endColumn":27},{"ruleId":"610","severity":1,"message":"611","line":67,"column":48,"nodeType":"612","messageId":"613","endLine":67,"endColumn":50},{"ruleId":"610","severity":1,"message":"611","line":129,"column":53,"nodeType":"612","messageId":"613","endLine":129,"endColumn":55},{"ruleId":"610","severity":1,"message":"611","line":189,"column":85,"nodeType":"612","messageId":"613","endLine":189,"endColumn":87},{"ruleId":"610","severity":1,"message":"611","line":26,"column":34,"nodeType":"612","messageId":"613","endLine":26,"endColumn":36},{"ruleId":"610","severity":1,"message":"611","line":26,"column":74,"nodeType":"612","messageId":"613","endLine":26,"endColumn":76},{"ruleId":"610","severity":1,"message":"611","line":28,"column":38,"nodeType":"612","messageId":"613","endLine":28,"endColumn":40},{"ruleId":"610","severity":1,"message":"611","line":51,"column":56,"nodeType":"612","messageId":"613","endLine":51,"endColumn":58},{"ruleId":"610","severity":1,"message":"611","line":73,"column":61,"nodeType":"612","messageId":"613","endLine":73,"endColumn":63},{"ruleId":"600","severity":1,"message":"633","line":3,"column":8,"nodeType":"602","messageId":"603","endLine":3,"endColumn":27},{"ruleId":"610","severity":1,"message":"611","line":27,"column":41,"nodeType":"612","messageId":"613","endLine":27,"endColumn":43},{"ruleId":"610","severity":1,"message":"611","line":28,"column":15,"nodeType":"612","messageId":"613","endLine":28,"endColumn":17},{"ruleId":"610","severity":1,"message":"611","line":38,"column":18,"nodeType":"612","messageId":"613","endLine":38,"endColumn":20},{"ruleId":"610","severity":1,"message":"611","line":42,"column":32,"nodeType":"612","messageId":"613","endLine":42,"endColumn":34},{"ruleId":"610","severity":1,"message":"611","line":69,"column":51,"nodeType":"612","messageId":"613","endLine":69,"endColumn":53},{"ruleId":"610","severity":1,"message":"611","line":82,"column":51,"nodeType":"612","messageId":"613","endLine":82,"endColumn":53},{"ruleId":"610","severity":1,"message":"611","line":100,"column":19,"nodeType":"612","messageId":"613","endLine":100,"endColumn":21},{"ruleId":"610","severity":1,"message":"611","line":101,"column":22,"nodeType":"612","messageId":"613","endLine":101,"endColumn":24},{"ruleId":"610","severity":1,"message":"611","line":46,"column":31,"nodeType":"612","messageId":"613","endLine":46,"endColumn":33},{"ruleId":"610","severity":1,"message":"611","line":88,"column":48,"nodeType":"612","messageId":"613","endLine":88,"endColumn":50},{"ruleId":"600","severity":1,"message":"633","line":3,"column":8,"nodeType":"602","messageId":"603","endLine":3,"endColumn":27},{"ruleId":"600","severity":1,"message":"634","line":6,"column":8,"nodeType":"602","messageId":"603","endLine":6,"endColumn":18},{"ruleId":"600","severity":1,"message":"635","line":8,"column":8,"nodeType":"602","messageId":"603","endLine":8,"endColumn":37},{"ruleId":"610","severity":1,"message":"611","line":54,"column":38,"nodeType":"612","messageId":"613","endLine":54,"endColumn":40},{"ruleId":"610","severity":1,"message":"611","line":54,"column":65,"nodeType":"612","messageId":"613","endLine":54,"endColumn":67},{"ruleId":"610","severity":1,"message":"611","line":80,"column":49,"nodeType":"612","messageId":"613","endLine":80,"endColumn":51},{"ruleId":"616","severity":1,"message":"617","line":140,"column":25,"nodeType":"618","messageId":"619","endLine":140,"endColumn":27},{"ruleId":"610","severity":1,"message":"623","line":141,"column":33,"nodeType":"612","messageId":"613","endLine":141,"endColumn":35},{"ruleId":"610","severity":1,"message":"611","line":141,"column":54,"nodeType":"612","messageId":"613","endLine":141,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":141,"column":94,"nodeType":"612","messageId":"613","endLine":141,"endColumn":96},{"ruleId":"600","severity":1,"message":"636","line":6,"column":16,"nodeType":"602","messageId":"603","endLine":6,"endColumn":26},{"ruleId":"610","severity":1,"message":"611","line":35,"column":34,"nodeType":"612","messageId":"613","endLine":35,"endColumn":36},{"ruleId":"610","severity":1,"message":"611","line":39,"column":27,"nodeType":"612","messageId":"613","endLine":39,"endColumn":29},{"ruleId":"610","severity":1,"message":"611","line":39,"column":72,"nodeType":"612","messageId":"613","endLine":39,"endColumn":74},{"ruleId":"610","severity":1,"message":"611","line":39,"column":111,"nodeType":"612","messageId":"613","endLine":39,"endColumn":113},{"ruleId":"610","severity":1,"message":"611","line":87,"column":49,"nodeType":"612","messageId":"613","endLine":87,"endColumn":51},{"ruleId":"610","severity":1,"message":"611","line":96,"column":49,"nodeType":"612","messageId":"613","endLine":96,"endColumn":51},{"ruleId":"610","severity":1,"message":"611","line":128,"column":88,"nodeType":"612","messageId":"613","endLine":128,"endColumn":90},{"ruleId":"610","severity":1,"message":"611","line":135,"column":89,"nodeType":"612","messageId":"613","endLine":135,"endColumn":91},{"ruleId":"610","severity":1,"message":"611","line":145,"column":88,"nodeType":"612","messageId":"613","endLine":145,"endColumn":90},{"ruleId":"610","severity":1,"message":"611","line":152,"column":89,"nodeType":"612","messageId":"613","endLine":152,"endColumn":91},{"ruleId":"600","severity":1,"message":"637","line":7,"column":8,"nodeType":"602","messageId":"603","endLine":7,"endColumn":27},{"ruleId":"610","severity":1,"message":"611","line":103,"column":54,"nodeType":"612","messageId":"613","endLine":103,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":139,"column":58,"nodeType":"612","messageId":"613","endLine":139,"endColumn":60},{"ruleId":"610","severity":1,"message":"611","line":147,"column":86,"nodeType":"612","messageId":"613","endLine":147,"endColumn":88},{"ruleId":"610","severity":1,"message":"611","line":185,"column":46,"nodeType":"612","messageId":"613","endLine":185,"endColumn":48},{"ruleId":"610","severity":1,"message":"611","line":189,"column":78,"nodeType":"612","messageId":"613","endLine":189,"endColumn":80},{"ruleId":"610","severity":1,"message":"623","line":302,"column":28,"nodeType":"612","messageId":"613","endLine":302,"endColumn":30},{"ruleId":"610","severity":1,"message":"611","line":305,"column":22,"nodeType":"612","messageId":"613","endLine":305,"endColumn":24},{"ruleId":"610","severity":1,"message":"611","line":325,"column":27,"nodeType":"612","messageId":"613","endLine":325,"endColumn":29},{"ruleId":"610","severity":1,"message":"611","line":448,"column":19,"nodeType":"612","messageId":"613","endLine":448,"endColumn":21},{"ruleId":"638","severity":1,"message":"639","line":536,"column":79,"nodeType":"640","messageId":"641","endLine":536,"endColumn":81},{"ruleId":"638","severity":1,"message":"639","line":536,"column":116,"nodeType":"640","messageId":"641","endLine":536,"endColumn":118},{"ruleId":"600","severity":1,"message":"614","line":6,"column":24,"nodeType":"602","messageId":"603","endLine":6,"endColumn":29},{"ruleId":"600","severity":1,"message":"631","line":6,"column":31,"nodeType":"602","messageId":"603","endLine":6,"endColumn":41},{"ruleId":"610","severity":1,"message":"611","line":69,"column":124,"nodeType":"612","messageId":"613","endLine":69,"endColumn":126},{"ruleId":"616","severity":1,"message":"617","line":83,"column":28,"nodeType":"618","messageId":"619","endLine":83,"endColumn":30},{"ruleId":"616","severity":1,"message":"617","line":157,"column":36,"nodeType":"618","messageId":"619","endLine":157,"endColumn":38},{"ruleId":"610","severity":1,"message":"623","line":164,"column":48,"nodeType":"612","messageId":"613","endLine":164,"endColumn":50},{"ruleId":"610","severity":1,"message":"611","line":311,"column":63,"nodeType":"612","messageId":"613","endLine":311,"endColumn":65},{"ruleId":"610","severity":1,"message":"611","line":332,"column":63,"nodeType":"612","messageId":"613","endLine":332,"endColumn":65},{"ruleId":"610","severity":1,"message":"611","line":357,"column":63,"nodeType":"612","messageId":"613","endLine":357,"endColumn":65},{"ruleId":"610","severity":1,"message":"611","line":357,"column":96,"nodeType":"612","messageId":"613","endLine":357,"endColumn":98},{"ruleId":"610","severity":1,"message":"623","line":364,"column":69,"nodeType":"612","messageId":"613","endLine":364,"endColumn":71},{"ruleId":"610","severity":1,"message":"611","line":47,"column":46,"nodeType":"612","messageId":"613","endLine":47,"endColumn":48},{"ruleId":"596","replacedBy":"642"},{"ruleId":"598","replacedBy":"643"},{"ruleId":"600","severity":1,"message":"614","line":2,"column":24,"nodeType":"602","messageId":"603","endLine":2,"endColumn":29},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":46,"column":51,"nodeType":"618","messageId":"619","endLine":46,"endColumn":53},{"ruleId":"610","severity":1,"message":"623","line":48,"column":54,"nodeType":"612","messageId":"613","endLine":48,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":90,"column":68,"nodeType":"612","messageId":"613","endLine":90,"endColumn":70},{"ruleId":"610","severity":1,"message":"611","line":53,"column":46,"nodeType":"612","messageId":"613","endLine":53,"endColumn":48},{"ruleId":"610","severity":1,"message":"611","line":68,"column":23,"nodeType":"612","messageId":"613","endLine":68,"endColumn":25},{"ruleId":"610","severity":1,"message":"611","line":89,"column":23,"nodeType":"612","messageId":"613","endLine":89,"endColumn":25},{"ruleId":"610","severity":1,"message":"611","line":137,"column":84,"nodeType":"612","messageId":"613","endLine":137,"endColumn":86},{"ruleId":"610","severity":1,"message":"611","line":145,"column":78,"nodeType":"612","messageId":"613","endLine":145,"endColumn":80},{"ruleId":"610","severity":1,"message":"611","line":41,"column":37,"nodeType":"612","messageId":"613","endLine":41,"endColumn":39},{"ruleId":"610","severity":1,"message":"611","line":41,"column":87,"nodeType":"612","messageId":"613","endLine":41,"endColumn":89},{"ruleId":"638","severity":1,"message":"639","line":24,"column":73,"nodeType":"640","messageId":"641","endLine":24,"endColumn":75},{"ruleId":"638","severity":1,"message":"639","line":24,"column":110,"nodeType":"640","messageId":"641","endLine":24,"endColumn":112},{"ruleId":"610","severity":1,"message":"611","line":41,"column":83,"nodeType":"612","messageId":"613","endLine":41,"endColumn":85},{"ruleId":"610","severity":1,"message":"611","line":41,"column":135,"nodeType":"612","messageId":"613","endLine":41,"endColumn":137},{"ruleId":"610","severity":1,"message":"611","line":44,"column":46,"nodeType":"612","messageId":"613","endLine":44,"endColumn":48},{"ruleId":"610","severity":1,"message":"611","line":57,"column":23,"nodeType":"612","messageId":"613","endLine":57,"endColumn":25},{"ruleId":"610","severity":1,"message":"611","line":81,"column":38,"nodeType":"612","messageId":"613","endLine":81,"endColumn":40},{"ruleId":"610","severity":1,"message":"611","line":98,"column":86,"nodeType":"612","messageId":"613","endLine":98,"endColumn":88},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":42,"column":51,"nodeType":"618","messageId":"619","endLine":42,"endColumn":53},{"ruleId":"610","severity":1,"message":"623","line":44,"column":54,"nodeType":"612","messageId":"613","endLine":44,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":65,"column":39,"nodeType":"612","messageId":"613","endLine":65,"endColumn":41},{"ruleId":"600","severity":1,"message":"624","line":4,"column":8,"nodeType":"602","messageId":"603","endLine":4,"endColumn":20},{"ruleId":"610","severity":1,"message":"611","line":19,"column":37,"nodeType":"612","messageId":"613","endLine":19,"endColumn":39},{"ruleId":"610","severity":1,"message":"611","line":87,"column":101,"nodeType":"612","messageId":"613","endLine":87,"endColumn":103},{"ruleId":"610","severity":1,"message":"611","line":94,"column":101,"nodeType":"612","messageId":"613","endLine":94,"endColumn":103},{"ruleId":"610","severity":1,"message":"611","line":44,"column":46,"nodeType":"612","messageId":"613","endLine":44,"endColumn":48},{"ruleId":"610","severity":1,"message":"611","line":58,"column":23,"nodeType":"612","messageId":"613","endLine":58,"endColumn":25},{"ruleId":"610","severity":1,"message":"611","line":82,"column":38,"nodeType":"612","messageId":"613","endLine":82,"endColumn":40},{"ruleId":"610","severity":1,"message":"611","line":99,"column":86,"nodeType":"612","messageId":"613","endLine":99,"endColumn":88},{"ruleId":"610","severity":1,"message":"611","line":153,"column":80,"nodeType":"612","messageId":"613","endLine":153,"endColumn":82},{"ruleId":"600","severity":1,"message":"615","line":2,"column":31,"nodeType":"602","messageId":"603","endLine":2,"endColumn":43},{"ruleId":"616","severity":1,"message":"617","line":44,"column":51,"nodeType":"618","messageId":"619","endLine":44,"endColumn":53},{"ruleId":"610","severity":1,"message":"623","line":46,"column":54,"nodeType":"612","messageId":"613","endLine":46,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":67,"column":39,"nodeType":"612","messageId":"613","endLine":67,"endColumn":41},{"ruleId":"610","severity":1,"message":"611","line":101,"column":80,"nodeType":"612","messageId":"613","endLine":101,"endColumn":82},{"ruleId":"610","severity":1,"message":"611","line":130,"column":109,"nodeType":"612","messageId":"613","endLine":130,"endColumn":111},{"ruleId":"610","severity":1,"message":"611","line":131,"column":71,"nodeType":"612","messageId":"613","endLine":131,"endColumn":73},{"ruleId":"610","severity":1,"message":"611","line":134,"column":109,"nodeType":"612","messageId":"613","endLine":134,"endColumn":111},{"ruleId":"610","severity":1,"message":"611","line":135,"column":71,"nodeType":"612","messageId":"613","endLine":135,"endColumn":73},{"ruleId":"610","severity":1,"message":"611","line":51,"column":49,"nodeType":"612","messageId":"613","endLine":51,"endColumn":51},{"ruleId":"610","severity":1,"message":"611","line":52,"column":94,"nodeType":"612","messageId":"613","endLine":52,"endColumn":96},{"ruleId":"610","severity":1,"message":"611","line":56,"column":56,"nodeType":"612","messageId":"613","endLine":56,"endColumn":58},{"ruleId":"610","severity":1,"message":"611","line":56,"column":107,"nodeType":"612","messageId":"613","endLine":56,"endColumn":109},{"ruleId":"610","severity":1,"message":"611","line":91,"column":54,"nodeType":"612","messageId":"613","endLine":91,"endColumn":56},{"ruleId":"610","severity":1,"message":"611","line":130,"column":62,"nodeType":"612","messageId":"613","endLine":130,"endColumn":64},{"ruleId":"610","severity":1,"message":"611","line":131,"column":58,"nodeType":"612","messageId":"613","endLine":131,"endColumn":60},"no-native-reassign",["644"],"no-negated-in-lhs",["645"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'AuthenticationServise' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["644"],["645"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Expected '!==' and instead saw '!='.","'CustomSelect' is defined but never used.","'precent' is assigned a value but never used.","'dataAll' is assigned a value but never used.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'length' is assigned a value but never used.","'FieldArray' is defined but never used.","'path' is assigned a value but never used.","'DeliveryDataService' is defined but never used.","'DatePicker' is defined but never used.","'InventoryNumberInnerComponent' is defined but never used.","'withRouter' is defined but never used.","'ProductDetailFilter' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["644"],["645"],"no-global-assign","no-unsafe-negation"]