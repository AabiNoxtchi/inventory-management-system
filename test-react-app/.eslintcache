[{"C:\\Users\\HP\\test-react-app\\src\\index.js":"1","C:\\Users\\HP\\test-react-app\\src\\App.js":"2","C:\\Users\\HP\\test-react-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\test-react-app\\src\\component\\AppInstructor.jsx":"4","C:\\Users\\HP\\test-react-app\\src\\component\\ListCoursesComponent.jsx":"5","C:\\Users\\HP\\test-react-app\\src\\service\\CourseDataService.js":"6","C:\\Users\\HP\\test-react-app\\src\\component\\CourseComponent.jsx":"7","C:\\Users\\HP\\test-react-app\\src\\service\\AuthenticationService.js":"8","C:\\Users\\HP\\test-react-app\\src\\component\\LoginComponent.jsx":"9","C:\\Users\\HP\\test-react-app\\src\\component\\LogoutComponent.jsx":"10","C:\\Users\\HP\\test-react-app\\src\\component\\MenuComponent.jsx":"11","C:\\Users\\HP\\test-react-app\\src\\component\\AuthenticatedRoute.jsx":"12","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\index.js":"13","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\App.js":"14","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\reportWebVitals.js":"15","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AppInstructor.jsx":"16","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthenticationService.js":"17","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LogoutComponent.jsx":"18","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AuthenticatedRoute.jsx":"19","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\MenuComponent.jsx":"20","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LoginComponent.jsx":"21","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CourseDataService.js":"22","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserDataService.js":"23","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthHeader.js":"24","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\PaginationComponent.jsx":"25","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserFilter.jsx":"26","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CustomSelect.jsx":"27","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\footer.jsx":"28","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\SupplierDataService.js":"29","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\SupplierFilter.jsx":"30","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDataService.js":"31","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductFilter.jsx":"32","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDataService.js":"33","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\DeliveryFilter.jsx":"34","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDetailDataService.js":"35","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCoursesComponent.jsx":"36","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CourseComponent.jsx":"37","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\SupplierComponent.jsx":"38","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductComponent.jsx":"39","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductsComponent.jsx":"40","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUsersComponent.jsx":"41","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveriesComponent.jsx":"42","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListSuppliersComponent.jsx":"43","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserComponent.jsx":"44","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryComponent.jsx":"45","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductDetails.jsx":"46","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductDetailFilter.jsx":"47","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserProfilesComponent.jsx":"48","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserProfileDataService.js":"49","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserProfileFilter.jsx":"50","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveryDetailInnerComponent.jsx":"51","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\InventoryNumberInnerComponent.jsx":"52","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryInnerComponent.jsx":"53","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DDInnerComponent.jsx":"54","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDetailDataService.js":"55","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductDetailInnerComponent.jsx":"56","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserProfileInnerComponent.jsx":"57","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\TimelineInnerComponent.jsx":"58","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CountryDataService.js":"59","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCitiesComponent.jsx":"60","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CityFilter.jsx":"61","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCountriesComponent.jsx":"62","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CountryInnerComponent.jsx":"63","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CityInnerComponent.jsx":"64","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCategoriesComponent.jsx":"65","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CategoryDataService.js":"66","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CategoryFilter.jsx":"67","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CategoryInnerComponent.jsx":"68","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserCategoriesComponent.jsx":"69","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserCategoryDataService.js":"70","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserCategoryFilter.jsx":"71","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserCategoryInnerComponent.jsx":"72","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Shared\\Function.js":"73","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\Functions.js":"74","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\HomeComponent.jsx":"75","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\OrderByComponent.jsx":"76","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeleteAllInnerComponent.jsx":"77","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\EventListner.jsx":"78","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\EventListner.js":"79"},{"size":500,"mtime":499162500000,"results":"80","hashOfConfig":"81"},{"size":641,"mtime":1607907244036,"results":"82","hashOfConfig":"81"},{"size":362,"mtime":499162500000,"results":"83","hashOfConfig":"81"},{"size":1385,"mtime":1607913834807,"results":"84","hashOfConfig":"81"},{"size":3279,"mtime":1607822944698,"results":"85","hashOfConfig":"81"},{"size":840,"mtime":1607833218581,"results":"86","hashOfConfig":"81"},{"size":3617,"mtime":1607910567406,"results":"87","hashOfConfig":"81"},{"size":1663,"mtime":1607909799563,"results":"88","hashOfConfig":"81"},{"size":5841,"mtime":1607914025390,"results":"89","hashOfConfig":"81"},{"size":405,"mtime":1607904232280,"results":"90","hashOfConfig":"81"},{"size":1428,"mtime":1607913436644,"results":"91","hashOfConfig":"81"},{"size":475,"mtime":1607901172852,"results":"92","hashOfConfig":"81"},{"size":500,"mtime":499162500000,"results":"93","hashOfConfig":"94"},{"size":2048,"mtime":1617766221939,"results":"95","hashOfConfig":"94"},{"size":362,"mtime":499162500000,"results":"96","hashOfConfig":"94"},{"size":4619,"mtime":1617761079922,"results":"97","hashOfConfig":"94"},{"size":2968,"mtime":1617764532958,"results":"98","hashOfConfig":"94"},{"size":405,"mtime":1607904232280,"results":"99","hashOfConfig":"94"},{"size":608,"mtime":1617569299851,"results":"100","hashOfConfig":"94"},{"size":9086,"mtime":1617568451083,"results":"101","hashOfConfig":"94"},{"size":5346,"mtime":1617224798178,"results":"102","hashOfConfig":"94"},{"size":840,"mtime":1608419356784,"results":"103","hashOfConfig":"94"},{"size":731,"mtime":1616294986251,"results":"104","hashOfConfig":"94"},{"size":313,"mtime":1614091362802,"results":"105","hashOfConfig":"94"},{"size":6976,"mtime":1617545464902,"results":"106","hashOfConfig":"94"},{"size":5520,"mtime":1616874113754,"results":"107","hashOfConfig":"94"},{"size":2150,"mtime":1617034738836,"results":"108","hashOfConfig":"94"},{"size":409,"mtime":1608765652544,"results":"109","hashOfConfig":"94"},{"size":809,"mtime":1615149092175,"results":"110","hashOfConfig":"94"},{"size":5162,"mtime":1616874251665,"results":"111","hashOfConfig":"94"},{"size":722,"mtime":1615149092141,"results":"112","hashOfConfig":"94"},{"size":10218,"mtime":1616874184328,"results":"113","hashOfConfig":"94"},{"size":866,"mtime":1615149178562,"results":"114","hashOfConfig":"94"},{"size":10247,"mtime":1616885828844,"results":"115","hashOfConfig":"94"},{"size":1052,"mtime":1615660389975,"results":"116","hashOfConfig":"94"},{"size":3283,"mtime":1612069746581,"results":"117","hashOfConfig":"94"},{"size":3617,"mtime":1612069192554,"results":"118","hashOfConfig":"94"},{"size":11274,"mtime":1617224798198,"results":"119","hashOfConfig":"94"},{"size":15989,"mtime":1617224798188,"results":"120","hashOfConfig":"94"},{"size":10422,"mtime":1617570813129,"results":"121","hashOfConfig":"94"},{"size":8586,"mtime":1617721446851,"results":"122","hashOfConfig":"94"},{"size":51243,"mtime":1617130164863,"results":"123","hashOfConfig":"94"},{"size":7808,"mtime":1617130164794,"results":"124","hashOfConfig":"94"},{"size":19226,"mtime":1617224682502,"results":"125","hashOfConfig":"94"},{"size":39049,"mtime":1617224798168,"results":"126","hashOfConfig":"94"},{"size":14771,"mtime":1617566157371,"results":"127","hashOfConfig":"94"},{"size":18668,"mtime":1617306779072,"results":"128","hashOfConfig":"94"},{"size":46596,"mtime":1617765360351,"results":"129","hashOfConfig":"94"},{"size":1367,"mtime":1617736527139,"results":"130","hashOfConfig":"94"},{"size":19921,"mtime":1617570478328,"results":"131","hashOfConfig":"94"},{"size":11313,"mtime":1614782459747,"results":"132","hashOfConfig":"94"},{"size":6807,"mtime":1616892347711,"results":"133","hashOfConfig":"94"},{"size":7917,"mtime":1616892457889,"results":"134","hashOfConfig":"94"},{"size":13103,"mtime":1616874619258,"results":"135","hashOfConfig":"94"},{"size":741,"mtime":1615149092127,"results":"136","hashOfConfig":"94"},{"size":11335,"mtime":1617319695923,"results":"137","hashOfConfig":"94"},{"size":39880,"mtime":1617746869954,"results":"138","hashOfConfig":"94"},{"size":23507,"mtime":1617730796668,"results":"139","hashOfConfig":"94"},{"size":1056,"mtime":1616450295246,"results":"140","hashOfConfig":"94"},{"size":5440,"mtime":1616370392369,"results":"141","hashOfConfig":"94"},{"size":6032,"mtime":1616874091683,"results":"142","hashOfConfig":"94"},{"size":10334,"mtime":1617130164882,"results":"143","hashOfConfig":"94"},{"size":6345,"mtime":1617228218189,"results":"144","hashOfConfig":"94"},{"size":5882,"mtime":1616892750881,"results":"145","hashOfConfig":"94"},{"size":6693,"mtime":1617130165107,"results":"146","hashOfConfig":"94"},{"size":728,"mtime":1616460997231,"results":"147","hashOfConfig":"94"},{"size":5389,"mtime":1616463647188,"results":"148","hashOfConfig":"94"},{"size":5255,"mtime":1616892784738,"results":"149","hashOfConfig":"94"},{"size":7652,"mtime":1617566207469,"results":"150","hashOfConfig":"94"},{"size":736,"mtime":1616507341805,"results":"151","hashOfConfig":"94"},{"size":7170,"mtime":1616509726370,"results":"152","hashOfConfig":"94"},{"size":7129,"mtime":1616893419664,"results":"153","hashOfConfig":"94"},{"size":4637,"mtime":1617737349077,"results":"154","hashOfConfig":"94"},{"size":1345,"mtime":1617046799471,"results":"155","hashOfConfig":"94"},{"size":5210,"mtime":1617286179469,"results":"156","hashOfConfig":"94"},{"size":588,"mtime":1617594008766,"results":"157","hashOfConfig":"94"},{"size":4238,"mtime":1617737770619,"results":"158","hashOfConfig":"94"},{"size":1193,"mtime":1617760451348,"results":"159","hashOfConfig":"94"},{"size":564,"mtime":1617761278170,"results":"160","hashOfConfig":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},"1i7ei4d",{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"163"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},"kghst6",{"filePath":"190","messages":"191","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"189"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"189"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"189"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"189"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"189"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"189"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"189"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"189"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"189"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"189"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"189"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"189"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"189"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"189"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"189"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"189"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"189"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"189"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"189"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"189"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"189"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"189"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"189"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"189"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"189"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"189"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"189"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"189"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"189"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"314"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"189"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"189"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"189"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"189"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"189"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"189"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"189"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"189"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"189"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"189"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"189"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"355"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"189"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"189"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"189"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},"C:\\Users\\HP\\test-react-app\\src\\index.js",[],["369","370"],"C:\\Users\\HP\\test-react-app\\src\\App.js",["371"],"C:\\Users\\HP\\test-react-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\AppInstructor.jsx",["372"],"C:\\Users\\HP\\test-react-app\\src\\component\\ListCoursesComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\service\\CourseDataService.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\CourseComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\service\\AuthenticationService.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\LoginComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\component\\LogoutComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\component\\MenuComponent.jsx",["373"],"import React, { Component } from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport AuthenticationService from '../service/AuthenticationService';\r\n\r\nclass MenuComponent extends Component {\r\n    render() {\r\n\r\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n\r\n        return (\r\n            <header>\r\n\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div>\r\n                        < a href=\"#\" className=\"navbar-brand\">Inventory Management System</ a>\r\n                    </div>\r\n                    <ul className=\"navbar-nav\">\r\n                        <li><Link className=\"nav-link\" to=\"/courses\">Courses</Link></li>                        \r\n                    </ul>\r\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\r\n                        {\r\n                            !isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">\r\n                            Login</Link></li>\r\n                        }\r\n                        {\r\n\r\n                            isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\"\r\n                                onClick={AuthenticationService.logout}>Logout</Link></li>\r\n                        }\r\n\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n\r\n\r\n\r\n            )\r\n    }\r\n}\r\n\r\nexport default withRouter(MenuComponent)","C:\\Users\\HP\\test-react-app\\src\\component\\AuthenticatedRoute.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\index.js",[],["374","375"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\App.js",["376","377","378","379","380"],"import logo from './logo.svg';\nimport './App.css';\nimport AppInstructor from './component/AppInstructor';\nimport React, { useEffect, useState } from 'react'\n\nfunction App() {\n // return (\n  /*  <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>*/\n\n  const [listening, setListening] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    let eventSource = undefined;\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribe\");\r\n\r\n            eventSource.onopen = (event) => {\r\n                console.log(\"connection opened\")\r\n            }\r\n\r\n            eventSource.onmessage = (event) => {\r\n                console.log(\"result\", event.data);\r\n                setData(old => [...old, event.data])\r\n            }\r\n\r\n            eventSource.onerror = (event) => {\r\n                console.log(event.target.readyState)\r\n                if (event.target.readyState === EventSource.CLOSED) {\r\n                    console.log('eventsource closed (' + event.target.readyState + ')')\r\n                }\r\n                eventSource.close();\r\n            }\r\n\r\n            setListening(true);\r\n        }\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            console.log(\"eventsource closed\")\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                Received Data\r\n        {data.map(d =>\r\n                    <span key={d}>{d}</span>\r\n                )}\r\n            </header>\r\n        </div>\r\n    );\n\n      {/* <div >\n          <AppInstructor/>\n      </div>*/}\n  //);\n}\n\nexport default App;\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\reportWebVitals.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AppInstructor.jsx",["381","382"],"import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport ListCoursesComponent from './ListCoursesComponent';\r\nimport CourseComponent from './CourseComponent';\r\nimport LoginComponent from './LoginComponent';\r\nimport LogoutComponent from './LogoutComponent';\r\nimport MenuComponent from './MenuComponent';\r\nimport ListUsersComponent from './ListUsersComponent';\r\nimport UserComponent from './UserComponent';\r\nimport FooterComponent from './footer'\r\nimport ListSuppliersComponent from './ListSuppliersComponent';\r\nimport SupplierComponent from './SupplierComponent';\r\nimport ListProductsComponent from './ListProductsComponent';\r\nimport ProductComponent from './ProductComponent';\r\nimport ListDeliveriesComponent from './ListDeliveriesComponent';\r\nimport DeliveryComponent from './DeliveryComponent';\r\nimport ListProductDetails from './ListProductDetails';\r\nimport ListUserProfilesComponent from './ListUserProfilesComponent';\r\n//import ListCitiesComponent from './ListCitiesComponent';\r\nimport ListCountriesComponent from './ListCountriesComponent';\r\nimport ListCategoriesComponent from './ListCategoriesComponent';\r\nimport ListUserCategoriesComponent from './ListUserCategoriesComponent';\r\nimport HomeComponent from './HomeComponent';\r\nimport EventListner from './EventListner'\r\n\r\nimport AuthenticatedRoute from './AuthenticatedRoute';\r\nimport AuthenticationService from '../service/AuthenticationService'\r\n\r\nclass AppInstructor extends Component {\r\n\r\n   \r\n\r\n    render() {\r\n        return (\r\n            <>\r\n\r\n                {/*AuthenticationService.isUserLoggedIn() && < EventListner />*/}\r\n               \r\n            <div className=\"pb-5\">\r\n            <Router>           \r\n                        <MenuComponent menuclicked={false} />  \r\n                                 \r\n                   \r\n                    <Switch>\r\n                    <Route path=\"/\" exact component={LoginComponent} />\r\n                    <Route path=\"/login\" exact component={LoginComponent} />\r\n                    <AuthenticatedRoute path=\"/logout\" exact component={LogoutComponent}/>\r\n                    <AuthenticatedRoute path=\"/courses\" exact component={ListCoursesComponent} />\r\n                    <AuthenticatedRoute path=\"/courses/:id\" component={CourseComponent} />\r\n                    <AuthenticatedRoute path=\"/users\" exact component={ListUsersComponent} />\r\n                    <AuthenticatedRoute path=\"/users?:search\" exact component={ListUsersComponent} />\r\n                            <AuthenticatedRoute path=\"/users/:id\" component={UserComponent} />\r\n                            <AuthenticatedRoute path=\"/suppliers\" exact component={ListSuppliersComponent} />\r\n                            <AuthenticatedRoute path=\"/suppliers?:search\" exact component={ListSuppliersComponent} />\r\n                            <AuthenticatedRoute path=\"/suppliers/:id\" component={SupplierComponent} />\r\n                            <AuthenticatedRoute path=\"/products\" exact component={ListProductsComponent} />\r\n                            <AuthenticatedRoute path=\"products?:search\" exact component={ListProductsComponent} />\r\n                            <AuthenticatedRoute path=\"/products/:id\" component={ProductComponent} />\r\n                            <AuthenticatedRoute path=\"/deliveries\" exact component={ListDeliveriesComponent} />\r\n                            <AuthenticatedRoute path=\"/deliveries/:id\" exact component={DeliveryComponent} />\r\n                            <AuthenticatedRoute path=\"/deliveries/:id/:deliveryView\" exact component={DeliveryComponent} />\r\n                            <AuthenticatedRoute path=\"/productdetails\" exact component={ListProductDetails} />\r\n                            <AuthenticatedRoute path=\"/userprofiles\" exact component={ListUserProfilesComponent} />\r\n                            <AuthenticatedRoute path=\"/countries\" exact component={ListCountriesComponent} />\r\n                            <AuthenticatedRoute path=\"/categories\" exact component={ListCategoriesComponent} />\r\n                            <AuthenticatedRoute path=\"/usercategories\" exact component={ListUserCategoriesComponent} />\r\n                            <AuthenticatedRoute path=\"/home\" exact component={HomeComponent} />\r\n                        </Switch>\r\n                       \r\n                   \r\n                   \r\n            \r\n                </Router>\r\n                <FooterComponent />\r\n                </div>\r\n                </>\r\n           \r\n                \r\n            )\r\n    }\r\n}\r\n\r\nexport default AppInstructor","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthenticationService.js",["383"],"import axios from 'axios';\r\nimport EventListner from './EventListner';\r\n\r\nconst API_URL = 'http://localhost:8080'\r\nconst AUTH_API_URL = `${API_URL}/api/inventory/auth/signin`\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUserName'\r\nexport const USER_ROLE_SESSION_ATTRIBUTE_NAME = 'authenticatedUserRole'\r\nexport const USER_TOKEN_SESSION_ATTRIBUTE_NAME = 'authenticatedUserToken'\r\n\r\n\r\nclass AuthenticationService {\r\n\r\n    executeAuthentication(username, password) {\r\n        return axios.post(`${AUTH_API_URL}`, {\r\n            username,\r\n            password\r\n        });\r\n    }\r\n\r\n    registerSuccessfulLogin(username, token, role) {\r\n        console.log('registerSuccessfull login username = ' + username + 'token = ' + token)\r\n        //EventListner.subscribe();\r\n       // localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        sessionStorage.setItem(USER_ROLE_SESSION_ATTRIBUTE_NAME, role)\r\n       // sessionStorage.setItem(USER_ID_SESSION_ATTRIBUTE_NAME, id)\r\n        sessionStorage.setItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME, this.createToken(token))\r\n        console.log('registerSuccessfull login = ' + sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME))\r\n        console.log('token = ' + sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME))\r\n        console.log('Role = ' + sessionStorage.getItem(USER_ROLE_SESSION_ATTRIBUTE_NAME))\r\n\r\n       // this.setupAxiosInterceptors(this.createToken(token))\r\n       \r\n    }\r\n\r\n    createToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_ROLE_SESSION_ATTRIBUTE_NAME);\r\n        //sessionStorage.removeItem(USER_ID_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedUerName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    getLoggedUerRole() {\r\n        let role = sessionStorage.getItem(USER_ROLE_SESSION_ATTRIBUTE_NAME)\r\n        if (role === null) return ''\r\n        return role\r\n    }\r\n\r\n   \r\n\r\n    getLoggedUerToken() {\r\n        let token = sessionStorage.getItem(USER_TOKEN_SESSION_ATTRIBUTE_NAME)\r\n        if (token === null) return ''\r\n        return token\r\n    }\r\n\r\n  /*  setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }*/\r\n}\r\n\r\nexport default new AuthenticationService()\r\n\r\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LogoutComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AuthenticatedRoute.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\MenuComponent.jsx",["384","385","386","387","388","389","390","391","392","393","394"],"import React, { Component } from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport '../myStyles/Menu.css'\r\n\r\nclass MenuComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n       \r\n        this.state = {\r\n            activeLinkId: 0,\r\n            menuClicked: props.menuClicked||false,\r\n            \r\n        }\r\n        console.log('menu component : activelink = ' + this.state.activeLinkId || 'none');\r\n        console.log(\"pathname = \" + window.location.pathname)\r\n        this.setActiveLink = this.setActiveLink.bind(this);\r\n       \r\n    }\r\n\r\n    setActiveLink(index) {\r\n        this.setState({\r\n            activeLinkId: index,\r\n            menuClicked:false\r\n        });\r\n        console.log('activelink = index=' + index);\r\n    }\r\n\r\n   /* myFunction() {\r\n    var x = document.getElementById(\"myTopnav\");\r\n    if (x.className === \"topnav\") {\r\n        x.className += \" responsive\";\r\n    } else {\r\n        x.className = \"topnav\";\r\n    }\r\n}*/\r\n\r\n    openMenu=()=>{\r\n        console.log(\"open menu clicked\");\r\n        let menuClicked = this.state.menuClicked;\r\n        menuClicked = !menuClicked;\r\n        this.setState({ menuClicked: menuClicked })\r\n    }\r\n\r\n    render() {\r\n        console.log(\"rendering menu  = \");\r\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const { location } = this.props;\r\n        // console.log(\"You are now at {location.pathname} =\" + location.pathname);\r\n        return (\r\n            <header style={{\r\n                height: \"60px\"\r\n            }}>\r\n                {console.log(\"this.state.menuclickd = \" + this.state.menuClicked)}\r\n                   <nav className=\"navbar navbar-expand-md\">\r\n                    <div>\r\n                        {/*< a href=\"/home\" className=\"navbar-brand special-h2-li pl-5\">Inventory UI</ a>*/}\r\n                        <Link className={//this.state.activeLinkId == 1 ||\r\n                            location.pathname == \"/home\" ? \"navbar-brand special-h2-li ml-3 selected\" : \"navbar-brand special-h2-li ml-3\"}\r\n                            onClick={() => this.setActiveLink(1)} to=\"/home\">Inventory UI</Link>\r\n                    </div>\r\n                    {/*<div className={this.state.menuClicked ? \"overlay d-block\" : \"d-none\"}></div>*/}\r\n                    <div className={this.state.menuClicked ? \"clicked ml-auto\" : \"ml-auto\"}>\r\n                        {/* <div className={userRole === 'ROLE_Mol' ? \"mol\" : userRole === 'ROLE_Admin'? \"admin\" : \"other\"}>*/}\r\n                            <ul className=\"navbar-nav justify-content-end\">\r\n\r\n                           \r\n                        {(userRole === 'ROLE_Admin' || userRole === 'ROLE_Mol')&&\r\n                            <li><Link className={//this.state.activeLinkId == 2 ||\r\n                               // window.location.pathname.indexOf(\"/users\") > -1 ? \"nav-link selected\" : \"nav-link\"}\r\n                               location.pathname==\"/users\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(2)} to=\"/users\">users</Link></li>\r\n                            }\r\n                            {(userRole === 'ROLE_Mol' || userRole === 'ROLE_Employee') &&\r\n                                <li><Link className={//this.state.activeLinkId == 7 ||\r\n                                location.pathname ==\"/userprofiles\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                    onClick={() => this.setActiveLink(3)} to=\"/userprofiles\">profiles</Link></li>\r\n                            }\r\n                       \r\n                        {\r\n                            userRole === 'ROLE_Admin' &&\r\n                            <>\r\n                                <li><Link className={//this.state.activeLinkId == 9 ||\r\n                                    location.pathname==\"/categories\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                        onClick={() => this.setActiveLink(4)} to=\"/categories\">categories</Link></li>\r\n\r\n                            <li><Link className={//this.state.activeLinkId == 8 ||\r\n                                location.pathname==\"/countries\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                    onClick={() => this.setActiveLink(5)} to=\"/countries\">countries & cities</Link></li>\r\n                                </>\r\n                        }\r\n                        {userRole === 'ROLE_Mol' &&\r\n                            <>\r\n                       \r\n                            <li><Link className={//this.state.activeLinkId == 4 &&\r\n                               location.pathname==\"/products\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(6)} to=\"/products\">products</Link></li>\r\n                            <li><Link className={//this.state.activeLinkId == 5 ||\r\n                                    location.pathname ==\"/productdetails\" ?//|| window.location.pathname.indexOf(\"/productdetails\") > -1 ?\r\n                                \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(7)} to=\"/productdetails\">inventory</Link></li>\r\n                            <li><Link className={//this.state.activeLinkId == 10 ||\r\n                               location.pathname==\"/usercategories\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(8)} to=\"/usercategories\">categories</Link></li>\r\n                            <li><Link className={//this.state.activeLinkId == 3 ||\r\n                                location.pathname==\"/suppliers\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(9)} to=\"/suppliers\">suppliers</Link></li>\r\n                        \r\n                            <li><Link\r\n                            className={//this.state.activeLinkId == 6 ||\r\n                               location.pathname==\"/deliveries\" ? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(10)} to=\"/deliveries\">deliveries</Link></li>\r\n                            </>\r\n                        }\r\n                            {\r\n                                !isUserLoggedIn && <li className=\"ml-5\"><Link\r\n                                className={this.state.activeLinkId == 0 ? \"nav-link selected\" : \"nav-link\"} to=\"/login\">\r\n                                Login</Link></li>\r\n                        }\r\n                            {\r\n                                isUserLoggedIn && <li className=\"ml-5\"><Link className=\"nav-link\" to=\"/logout\"\r\n                                    onClick={() => { this.setActiveLink('0'); AuthenticationService.logout() }}>Logout</Link></li>\r\n                                }\r\n\r\n                                <li className=\"icon\"><Link\r\n                                    \r\n                                    onClick={() => {\r\n                                        console.log(\"open menu clicked ***********************************************\");\r\n                                        let menuClicked = !this.state.menuClicked;\r\n                                       // menuClicked = !menuClicked;\r\n                                        this.setState({ menuClicked: menuClicked })\r\n                                    }} \r\n                                    to=\"#\"><i class=\"fa fa-bars\"></i></Link></li>\r\n\r\n                                {/*  <a href=\"#\" class=\"icon\" onclick={() => {\r\n                                    console.log(\"open menu clicked ***********************************************\");\r\n                                    let menuClicked = this.state.menuClicked;\r\n                                    menuClicked = !menuClicked;\r\n                                    this.setState({ menuClicked: menuClicked })\r\n                                }}>\r\n                            <i class=\"fa fa-bars\"></i>\r\n                        </a>*/}\r\n                        </ul>\r\n                        </div>\r\n                 \r\n                </nav >\r\n                    \r\n\r\n                {/* <div class=\"topnav\" id=\"myTopnav\">\r\n                    <a href=\"#home\" class=\"active\">Home</a>\r\n                    <a href=\"#news\">News</a>\r\n                    <a href=\"#contact\">Contact</a>\r\n                    <a href=\"#about\">About</a>\r\n                    <a href=\"javascript:void(0);\" class=\"icon\" onclick=\"myFunction()\">\r\n                        <i class=\"fa fa-bars\"></i>\r\n                    </a>\r\n                </div>\r\n\r\n                <div style=\"padding-left:16px\">\r\n                    <h2>Responsive Topnav Example</h2>\r\n                    <p>Resize the browser window to see how it works.</p>\r\n                </div>*/}\r\n\r\n\r\n            </header>\r\n\r\n            )\r\n    }\r\n}\r\n\r\nexport default withRouter(MenuComponent)\r\n//export default MenuComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LoginComponent.jsx",["395","396"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport '../myStyles/Style.css';\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            hasLoginFailed: false,\r\n            showSuccessMsg: false,\r\n            errormsg:null\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.loginClicked = this.loginClicked.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    getErrorMsg = (error) => {\r\n        if (''+error == 'Error: Request failed with status code 401' )\r\n            return 'Invalid user name and/or password'\r\n        else return '' + error\r\n    }\r\n\r\n    loginClicked() {\r\n        AuthenticationService\r\n            .executeAuthentication(this.state.username, this.state.password)\r\n            .then((response) => {\r\n                this.setState({ showSuccessMsg: true })\r\n                this.setState({ hasLoginFailed: false })\r\n                let userRole = response.data.role;\r\n                AuthenticationService.registerSuccessfulLogin(this.state.username, response.data.token, userRole)\r\n               // let userRole = AuthenticationService.getLoggedUerRole();\r\n               \r\n              //  console.log(\"user role = \" + userRole);\r\n              //  console.log(\"user role == 'ROLE_Employee'\" + (userRole == 'ROLE_Employee'));\r\n               /* switch (userRole) {\r\n                    case 'ROLE_Employee':\r\n                        this.props.history.push('/userprofiles');\r\n                    default:\r\n                         this.props.history.push('/courses');\r\n                }*/\r\n                if (userRole == \"ROLE_Employee\") this.props.history.push('/userprofiles');\r\n               // if (userRole == \"ROLE_Admin\") this.props.history.push('/users');\r\n                else this.props.history.push('/home');\r\n                \r\n            }).catch((error) => {\r\n                console.log('error = ' + error);\r\n                this.setState({\r\n                    showSuccessMsg: false,\r\n                    hasLoginFailed: true,\r\n                    errormsg: this.getErrorMsg(error)\r\n                })\r\n        })           \r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.username) {\r\n            errors.username = 'Enter user name'\r\n        } else if (values.username.length < 3) {\r\n            errors.username = 'Enter at least 3 Characters for user name'\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Enter password'\r\n        } else if (values.password.length < 6) {\r\n            errors.password = 'Enter at least 6 Characters for password'\r\n        }\r\n        return errors\r\n    }\r\n\r\n    render() {\r\n        let { username, password } = this.state\r\n        return (\r\n           \r\n               \r\n            <div className=\"container pt-5\">\r\n                <h3 className=\"mb-3\">Login</h3>\r\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">{this.state.errormsg || 'Invalid user name and/or password'}</div>}\r\n                    {this.state.showSuccessMsg && <div>Login Successfull</div>}\r\n                    <Formik\r\n                        initialValues={{ username, password }}\r\n                        onSubmit={this.loginClicked}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>User Name:</label>\r\n                                        <Field className=\"form-control w-25\" type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\r\n                                        <ErrorMessage name=\"username\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Password:</label>\r\n                                        <Field className=\"form-control w-25\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                                        <ErrorMessage name=\"password\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n\r\n                                    <button className=\"btn btn-mybtn p-x-5\" type=\"submit\">Login</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginComponent\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CourseDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthHeader.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\PaginationComponent.jsx",["397","398","399","400","401","402","403","404","405","406","407"],"import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport '../myStyles/Paging.css'\r\n\r\n\r\nclass PaginationComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n           //selectedOption: { value: `${props.itemsPerPage}`, label: `${props.itemsPerPage}` }\r\n            selectedOption: { value: '10', label: '10' }\r\n        }\r\n        this.onPageClicked = this.onPageClicked.bind(this)\r\n        this.onCountChange = this.onCountChange.bind(this)\r\n    }\r\n\r\n    onCountChange = (selectedOption, previousOption) => {\r\n        if (selectedOption.value == this.state.selectedOption.value) return;\r\n        //if (selectedOption.value == previousOption.value) return;\r\n        this.setState({ selectedOption: selectedOption })\r\n        let path =  window.location.pathname;\r\n        let search = this.props.search || window.location.search; //this.props.search || window.location.search;\r\n        let newPath = ``;\r\n        if (search.length < 1) {\r\n\r\n            newPath = `?${this.props.prefix}.itemsPerPage=${selectedOption.value}`;\r\n            newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith(this.props.prefix))\r\n                    continue\r\n                else\r\n                   /* if (i === searchItems.length - 1)\r\n                        newPath += searchItems[i]\r\n                    else*/\r\n                        newPath += searchItems[i] + '&'\r\n            }\r\n            newPath += this.props.prefix + '.itemsPerPage=' + selectedOption.value;\r\n            newPath = this.props.onNewSearch ? '?' + newPath : path + '?' + newPath ;\r\n        }\r\n        this.props.onNewSearch ? this.props.onNewSearch(newPath)\r\n            : window.location.href = newPath;\r\n    }\r\n\r\n    onPageClicked(pageNumber) {\r\n        if (pageNumber == this.props.page) return;\r\n        if(pageNumber < 0)  pageNumber = 0;\r\n        let path = window.location.pathname;\r\n        let search = this.props.search || window.location.search; //this.props.search || window.location.search;\r\n        let newPath = ``;\r\n        if (search.length < 1) {\r\n            newPath = `?${this.props.prefix}.page=${pageNumber}`;\r\n            newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith(this.props.prefix + '.page'))\r\n                    continue\r\n                else                    \r\n                   newPath += searchItems[i]+'&'\r\n            }\r\n            newPath = '?' + newPath + this.props.prefix + '.page=' + pageNumber; \r\n            newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        }\r\n        this.props.onNewSearch ? this.props.onNewSearch(newPath)\r\n            : window.location.href = newPath;\r\n       \r\n    }\r\n\r\n    render() {\r\n        const options = [\r\n            { value: '5', label: '5'},\r\n            { value: '10', label: '10' },\r\n            { value: '20', label: '20' },\r\n            { value: '50', label: '50' },\r\n        ];\r\n\r\n        const current = this.props.page;\r\n        const { selectedOption } = this.state;// { value: `${this.props.itemsPerPage}`, label: `${this.props.itemsPerPage}`}//this.state;\r\n        const numrows = this.props.pagesCount;\r\n        const pageNumbers = [];\r\n        if (numrows < 10)\r\n            for (let i = 1; i <= numrows; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}> <a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(i - 1)}>{i}</a></li >);\r\n            }\r\n        else {\r\n            for (let i = 1; i <= 4; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}><a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(i - 1)}>{i}</a></li>);\r\n            }\r\n            if(current + 1 > 4 && current + 1 < numrows-3 )\r\n                pageNumbers.push(<li key={current + 1} class=\"page-item active\" ><a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(current + 1)}>{current + 1}</a></li>)\r\n                \r\n            for (let i = numrows - 3; i <= numrows; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}><a class=\"page-link\" href=\"#\" onClick={() => this.onPageClicked(i - 1)}>{i}</a></li>);\r\n            }\r\n        }\r\n      \r\n        let begining = this.props.page * this.props.itemsPerPage;\r\n        let ending = Number(this.props.page+1) * Number(this.props.itemsPerPage);       \r\n        begining = this.props.itemsCount >= begining + 1 ? begining += 1 : 0;\r\n        ending = this.props.itemsCount < ending ? ending = this.props.itemsCount : ending;\r\n\r\n        return (            \r\n            <div className=\" d-inline-flex justify-content-end flex-grow-1\">\r\n                <label className=\"pager-label\">showing&nbsp;{begining}-{ending}&nbsp; of &nbsp; {this.props.itemsCount}</label>               \r\n                <Select\r\n                    className=\"select\"\r\n                    value={selectedOption}\r\n                    onChange={(value, selectedOption) => this.onCountChange(value, selectedOption)}\r\n                    options={options}\r\n                    placeholder={\"showing...\"}\r\n                />\r\n                    <nav aria-label=\"Page navigation example\" >               \r\n                    <ul class=\"pagination\">\r\n                            <li class=\"page-item\"><a class=\"page-link\" aria-label=\"Previous\" href=\"#\" onClick={() => this.onPageClicked(this.props.page - 1)} >\r\n                                <span aria-hidden=\"true\">&laquo;</span>\r\n                                <span class=\"sr-only\">Previous</span>\r\n                                </a></li>\r\n                            <ul class=\"pagination\">\r\n                            {\r\n                                pageNumbers\r\n                            }\r\n                            </ul>\r\n                            <li class=\"page-item\"><a class=\"page-link\" aria-label=\"Next\" href=\"#\" onClick={() => this.onPageClicked(this.props.page + 1)}>\r\n                                <span aria-hidden=\"true\">&raquo;</span>\r\n                                <span class=\"sr-only\">Next</span>\r\n                                </a></li>\r\n                    </ul>\r\n                    </nav>                 \r\n            </div>               \r\n            )\r\n    }\r\n}\r\n\r\nexport default PaginationComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserFilter.jsx",["408","409","410"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nclass UserFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all:props.all,\r\n            firstNames: props.firstNames,\r\n            firstName: props.firstName,\r\n            lastNames: props.lastNames,\r\n            lastName: props.lastName,\r\n            userNames: props.userNames,\r\n            userName: props.userName,\r\n            emails: props.emails,\r\n            email: props.email,\r\n            prefix: props.prefix\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'               \r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            if (!key.endsWith(\"s\") && value && value.length>1) {\r\n                newPath += prefix + '.' + key +'='+ value+'&'\r\n            }\r\n           \r\n        })\r\n        newPath = newPath.substring(0, newPath.length-1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n       /* this.setState({\r\n            all: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            userName: '',\r\n            email: '',\r\n        });\r\n        console.log('in reset form ');*/\r\n\r\n        window.location.href = window.location.pathname;\r\n    }\r\n\r\n    render() {  \r\n\r\n        let { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email } = this.state\r\n        return (                        \r\n               \r\n                <Formik\r\n                        initialValues={{ all, firstNames, firstName, lastNames, lastName, userNames, userName, emails, email }}\r\n                        onSubmit={this.onSubmit}                       \r\n                        enableReinitialize={true}\r\n                >\r\n                {({ props, setFieldValue, values}) => (\r\n                    <Form className=\"filter-form\">\r\n                            <fieldset >\r\n                                 <div className=\"inline\">\r\n                                 <label>first name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                        items={firstNames}\r\n                                        value={values.firstName}\r\n                                        onChange={(selected) => setFieldValue(\"firstName\", selected.value)}\r\n                                />\r\n                            </div>  \r\n                            <div className=\"inline\">\r\n                                 <label >last name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                        items={lastNames}\r\n                                        value={values.lastName}\r\n                                        onChange={(selected) => setFieldValue(\"lastName\", selected.value)}\r\n                                />\r\n                            </div>\r\n                                <div className=\"inline\">\r\n                                <label>user name&nbsp;</label>\r\n                                <CustomSelect  \r\n                                    className={\"inline inline-2-5\"}\r\n                                                        name=\"userNames\"\r\n                                       items={userNames}\r\n                                        value={values.userName}\r\n                                        onChange={(selected) => setFieldValue(\"userName\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >email&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                      items={emails}\r\n                                      value={values.email}\r\n                                      onChange={(selected) =>setFieldValue(\"email\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">                                 \r\n                               <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                            </fieldset>\r\n                         </Form>\r\n                       )\r\n                    }\r\n                 </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CustomSelect.jsx",["411","412"],"import React from 'react'\r\nimport Select from 'react-select'\r\nimport './Filter.css'\r\n\r\nexport default ({ onChange, items, value, className, defaultMenuIsOpen, disabled , name , log}) => {\r\n\r\n    const options = []\r\n\r\n    const getOptions = (items) => {\r\n        if (items == null) return;\r\n        if (options.length < 1) {\r\n           // console.log(\"item options i = \" + JSON.stringify(items));\r\n            for (let i = 0; i < items.length; i++) {\r\n              \r\n                //console.log(\"`${items[i][name].name}` = \" + `${items[i][name].name}`);\r\n                //console.log(\"`${items[i][name].name}` = \" + `${items[i][name].name}`);\r\n                options.push(\r\n                    { value: `${items[i].value || items[i].id}`, label: `${items[i].name || (items[i][name] && items[i][name].name) || '...'}` })\r\n            }\r\n           \r\n        }\r\n       // console.log(\"options = \"+JSON.stringify(options))\r\n        return options\r\n    }\r\n    \r\n    const defaultValue = (options, value) => {\r\n        //console.log('value = ' + value + ' option.value = ' + option.value);\r\n        //console.log('value= option.value = ' + (option.value == value));\r\n       // console.log(\"value = \" + value);\r\n        //if (log) {\r\n           // console.log(\"value = \" + value);\r\n           // options.map((o) => {\r\n            //    if (o.value == 'undefined') {\r\n            ///        console.log(\"o.value = \" + o.value);\r\n            //        console.log(\"o.value == value = \" + (o.value == value))\r\n            //    }\r\n           // })\r\n       // }\r\n        return options ? options.find(option => option.value == value) : \"\"\r\n    }\r\n\r\n    return (\r\n       \r\n                <Select\r\n            className={className}\r\n            options={getOptions(items)}\r\n            value={defaultValue(options, value) || 'undefined'}\r\n            onChange={value => onChange(value)}\r\n            placeholder={\"...\"}\r\n            autosize={true}\r\n            clearable={true}\r\n            isSearchable={true}\r\n            defaultMenuIsOpen={defaultMenuIsOpen}\r\n            isDisabled={disabled}\r\n            \r\n\r\n                />\r\n       \r\n        )\r\n}","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\footer.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\SupplierDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\SupplierFilter.jsx",["413","414","415"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nclass SupplierFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            name: props.name,\r\n            names: props.names,\r\n            phoneNumber: props.phoneNumber,\r\n            phoneNumbers: props.phoneNumbers,\r\n            ddcnumber: props.ddcnumber,\r\n            ddcnumbers: props.ddcnumbers,\r\n            emails: props.emails,\r\n            email: props.email,\r\n            prefix: props.prefix\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            if (!key.endsWith(\"s\") && value && value.length > 1) {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({\r\n            all: '',\r\n            name: '',\r\n            phoneNumber: '',\r\n            ddcnumber: '',\r\n            email: '',\r\n        });\r\n        console.log('in reset form ');\r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, name, names, phoneNumber, phoneNumbers, ddcnumber, ddcnumbers, email, emails } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ all, name, names, phoneNumber, phoneNumbers, ddcnumber, ddcnumbers, email, emails }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={names}\r\n                                    value={name}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >phone number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2\"}\r\n                                    items={phoneNumbers}\r\n                                    value={phoneNumber}\r\n                                    onChange={(selected) => setFieldValue(\"phoneNumber\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>DDC number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2\"}\r\n                                    name=\"ddcNumber\"\r\n                                    items={ddcnumbers}\r\n                                    value={ddcnumber}\r\n                                    onChange={(selected) => setFieldValue(\"ddcNumber\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >email&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                    items={emails}\r\n                                    value={email}\r\n                                    onChange={(selected) => setFieldValue(\"email\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SupplierFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductFilter.jsx",["416","417","418","419","420","421","422","423"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nclass ProductFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            name: props.name,\r\n            names: props.names,\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n            totalCountMoreThan: props.totalCountMoreThan,\r\n            totalCountLessThan: props.totalCountLessThan,\r\n            prefix: props.prefix,\r\n            maxmore: 100,\r\n            minless:0,\r\n            mintotal: 0,\r\n            userCategories: props.userCategories,\r\n            filteredUserCategories: props.userCategories,\r\n            userCategoryId: props.userCategoryId\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            console.log('field key =' + key);\r\n            console.log('field value =' + value);\r\n            if (!key.endsWith(\"s\") && value) {\r\n                if ((values.productType === 'STA' && key === 'amortizationPercentMoreThan') ||\r\n                    (values.productType === 'STA' && key === 'amortizationPercentLessThan') ||\r\n                    (key === 'maxmore') ||\r\n                    (key === 'minless') ||\r\n                    (key === 'maxtotal') ||\r\n                    (key === 'mintotal')) { }\r\n                else { newPath += prefix + '.' + key + '=' + value + '&' }\r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n\r\n        window.location.href = window.location.pathname;\r\n       // values.name = null;\r\n\r\n       // this.props.history.push('/products');\r\n       /* this.setState({\r\n            all: '',\r\n            name: '',\r\n            productType: '',\r\n            amortizationPercentMoreThan: '',\r\n            amortizationPercentLessThan: '',\r\n            totalCountMoreThan: '',\r\n            totalCountLessThan:''\r\n        });\r\n        console.log('in reset form ');*/\r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, name, names, productType, productTypes, amortizationPercentMoreThan, amortizationPercentLessThan,\r\n            totalCountMoreThan, totalCountLessThan, maxmore, minless, mintotal, userCategories, userCategoryId, filteredUserCategories} = this.state\r\n\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    all, name, names, productType, productTypes, amortizationPercentMoreThan,\r\n                    amortizationPercentLessThan, totalCountMoreThan, totalCountLessThan, maxmore, minless, mintotal, userCategories, userCategoryId, filteredUserCategories\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values}) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>name&nbsp;</label>\r\n                                <CustomSelect                                    \r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={names}\r\n                                    value={name}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            {\r\n                                <div className=\"inline\" >\r\n                                    <label className=\"mb-1\">total&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min=\"0\" max={values.totalCountLessThan || \"\"}\r\n                                        name=\"totalCountMoreThan\" />\r\n                                    <label className=\"pl-1 mb-1 fw-s\">less than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min={values.totalCountMoreThan || 0}\r\n                                        name=\"totalCountLessThan\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            \r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {                                     \r\n                                    productTypes && productTypes.map((type) =>\r\n                                        <div className=\"inline\">                                        \r\n                                            <Field \r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                    console.log('value of checked = ' + value.target.value);\r\n                                                    setFieldValue(\"productType\", value.target.value == values.productType ? null : value.target.value);\r\n                                                    let subs = values.filteredUserCategories;\r\n                                                    subs = [];\r\n                                                    for (let i = 0; i < values.userCategories.length; i++) {\r\n                                                        \r\n                                                        if (values.userCategories[i].filterBy == value.target.value) {\r\n                                                            subs.push(values.userCategories[i])\r\n                                                        }\r\n                                                    }\r\n                                                    setFieldValue(\"filteredUserCategories\", subs);\r\n                                                }} \r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                   )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={values.filteredUserCategories}\r\n                                    value={values.userCategoryId}\r\n                                    onChange={(selected) => setFieldValue(\"userCategoryId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            {/*values.productType == 'STA' ? \"inline d-none\" : \"inline\"*/} \r\n                            {\r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-50px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                            name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan}/>&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-50px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                            name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan}/>&nbsp;%\r\n                                        </div>\r\n                            </div>\r\n                            }\r\n                           \r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"reset\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\DeliveryFilter.jsx",["424","425","426"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass DeliveryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            number: props.number,\r\n            numbers: props.numbers,\r\n            supplierId: props.supplierId,\r\n            suppliers: props.suppliers,\r\n            productId: props.productId,\r\n            products: props.products,\r\n            dateCreatedBefore: props.dateCreatedBefore,\r\n            dateCreatedAfter: props.dateCreatedAfter,\r\n            totalBillMoreThan: props.totalBillMoreThan,\r\n            totalBillLessThan: props.totalBillLessThan,\r\n            prefix: props.prefix,\r\n            maxmore: 100,\r\n            minless: 0,\r\n            mintotal: 0,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search; //this.props.search || window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n                else if (searchItems[i].startsWith('deliveryView'))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n       /* if (this.props.search == null) newPath += 'deliveryView=DeliveryDetailView&';*/\r\n       // console.log(\"this.props.search = \" + this.props.search);\r\n       // console.log(\"this.props.search == null = \" + (this.props.search == null));\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n           // console.log('field key =' + key);\r\n           // console.log('field value =' + value);\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                if ((key === 'maxmore') ||\r\n                    (key === 'minless') ||\r\n                    (key === 'maxtotal') ||\r\n                    (key === 'mintotal')) { }\r\n                else if (key.startsWith('date')) {\r\n                    value = (new Date(value)).toISOString();\r\n                    value = value.substring(0, value.indexOf('T'))\r\n                       /* new Intl.DateTimeFormat(\"en-GB\", {\r\n                           month: \"numeric\",\r\n                           day: \"2-digit\",\r\n                           year: \"numeric\",                          \r\n                        }).format(new Date(value));*/\r\n                   // console.log('value = '+value)\r\n                    newPath += prefix + '.' + key + '=' + value + '&'\r\n                }\r\n                else { newPath += prefix + '.' + key + '=' + value + '&' }\r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n       // console.log(\"this.props.search = \" + this.props.search);\r\n\r\n        //window.location.href = window.location.pathname; \r\n        let index = window.location.search.indexOf(\"DeliveryDetailView\");\r\n        window.location.href = index < 0 ? window.location.pathname : window.location.pathname + '?deliveryView=DeliveryDetailView';\r\n        // values.name = null;\r\n\r\n        // this.props.history.push('/products');\r\n        /* this.setState({\r\n             all: '',\r\n             name: '',\r\n             productType: '',\r\n             amortizationPercentMoreThan: '',\r\n             amortizationPercentLessThan: '',\r\n             totalCountMoreThan: '',\r\n             totalCountLessThan:''\r\n         });\r\n         console.log('in reset form ');*/\r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, number, numbers, supplierId, suppliers,productId, products, dateCreatedBefore, dateCreatedAfter,\r\n            totalBillMoreThan, totalBillLessThan, maxmore, minless, mintotal } = this.state\r\n\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    all, number, numbers, supplierId, suppliers, productId, products, dateCreatedBefore, dateCreatedAfter,\r\n                    totalBillMoreThan, totalBillLessThan, maxmore, minless, mintotal\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-1-5\"}\r\n                                    items={numbers}\r\n                                    value={values.number}\r\n                                    onChange={(selected) => setFieldValue(\"number\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>supplier&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={suppliers}\r\n                                    value={values.supplierId}\r\n                                    onChange={(selected) => setFieldValue(\"supplierId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">date&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                <label className=\"mb-1 fw-s\">after&nbsp;</label>\r\n                                <div className=\"inline \">\r\n                                <DatePicker className=\"form-control in-inline inline-2\"\r\n                                    dateFormat=\"dd MMMM yyyy\"\r\n                                    locale=\"en-GB\"\r\n                                    maxDate={values.dateCreatedBefore || new Date()}\r\n                                            selected={values.dateCreatedAfter && new Date(values.dateCreatedAfter)}\r\n                                            onChange={date => setFieldValue(\"dateCreatedAfter\", date)}\r\n                                            shouldCloseOnSelect={true}\r\n                                            showYearDropdown\r\n                                            dropdownMode=\"select\"\r\n                                            isClearable/>\r\n                                    </div>\r\n\r\n                                <label className=\"pl-1 mb-1 fw-s\">before&nbsp;</label>\r\n                                <DatePicker className=\"form-control in-inline inline-2\"\r\n                                    dateFormat=\"MMMM dd yyyy\"\r\n                                    locale=\"en-GB\"\r\n                                        minDate={values.dateCreatedAfter}\r\n                                        maxDate={values.dateCreatedBefore||new Date()}\r\n                                    selected={values.dateCreatedBefore && new Date(values.dateCreatedBefore)}\r\n                                        onChange={date => setFieldValue(\"dateCreatedBefore\", date)}\r\n                                        shouldCloseOnSelect={true}\r\n                                        showYearDropdown\r\n                                        dropdownMode=\"select\"\r\n                                        isClearable\r\n                                        highlightDates={new Date()} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>product&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={products}\r\n                                    value={values.productId}\r\n                                    onChange={(selected) => setFieldValue(\"productId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                                <div className=\"inline\">\r\n                                <label className=\"mb-1\">total bill&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min=\"0\" max={values.totalBillLessThan || \"\"}\r\n                                        name=\"totalBillMoreThan\" />\r\n                                    <label className=\"pl-1 mb-1 fw-s\">less than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min={values.totalBillMoreThan || 0}\r\n                                        name=\"totalBillLessThan\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"reset\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeliveryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDetailDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCoursesComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CourseComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\SupplierComponent.jsx",["427"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport SupplierDataService from '../service/SupplierDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect'\r\nimport Function from './Shared/Function'\r\n\r\nclass SupplierComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            phoneNumber: '',\r\n            ddcnumber: '',\r\n            email: '',\r\n            //phoneCodes: [],\r\n           // defaultCodeValue: '',\r\n            //selectedCode:''\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.id)\r\n        if (this.state.id === -1) {\r\n            return\r\n        }\r\n        SupplierDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n               // console.log(\"response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    name: response.data.name||'',\r\n                    phoneNumber: response.data.phoneNumber||'',\r\n                    ddcnumber: response.data.ddcnumber||'',\r\n                    email: response.data.email,\r\n                   // phoneCodes: response.data.phoneCodes,\r\n                   // defaultCodeValue: response.data.defaultCodeValue\r\n                })\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n       /* if (values.phoneNumber.length > 1) {\r\n            let phone = this.getPhone();           \r\n        }*/\r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            phoneNumber: this.getTrimmedNumber(values.phoneNumber),//.length > 1 ? this.getCode() + \"/\" + values.phoneNumber : null,\r\n            ddcnumber: values.ddcnumber,\r\n            email: values.email,\r\n            targetDate: values.targetDate\r\n        }\r\n        console.log('item = ' + JSON.stringify(item));\r\n        SupplierDataService.save(item)\r\n            .then(() => this.props.history.push('/suppliers'))\r\n            .catch(error => {\r\n               // console.log(\"error\" + error);\r\n                console.log(\"error.response.data = \" + JSON.stringify(error.response.data))\r\n                //console.log(\"error.response.data.errors = \" + JSON.stringify(error.response.data.errors))\r\n                //console.log(\"error.response.data.errors[0].codes) = \" + JSON.stringify(error.response.data.errors[0].codes))\r\n               // console.log(\"error.response.data.errors[0].defaultmsg) = \" + error.response.data.errors[0].defaultMessage)\r\n                let msg = Function.getErrorMsg(error);\r\n                   /* \"\" + error.response && typeof error.response.data == 'string' ?\r\n                    error.response.data : error.response.data.errors ?\r\n                        error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                            error.response.data.message : error;*/\r\n               // console.log(\"msg = \" + msg)\r\n                //console.log(\"msg.indexOf nop = \" + (msg.indexOf(\"nop\")))\r\n                //console.log(\"msg.indexOf phone  > 0 = \" + (msg.indexOf(\"phone\") > 0))\r\n                if (msg.indexOf(\"phone\") > -1)\r\n                    actions.setErrors({ phoneNumber: msg }) \r\n                if (msg.indexOf(\"name\") > -1)\r\n                    actions.setErrors({ name: msg }) \r\n                if (msg.indexOf(\"ddcnumber\") > -1)\r\n                    actions.setErrors({ ddcnumber: msg }) \r\n                if (msg.indexOf(\"email\") > -1)\r\n                    actions.setErrors({ email: msg }) \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n\r\n               \r\n               \r\n            } )\r\n    }\r\n\r\n    getTrimmedNumber(value) {\r\n        if (value == null || value.length < 1) return;\r\n       value = value.trim();\r\n        value = value.replace(/ +/g, \" \");\r\n        return value;\r\n    }\r\n\r\n   /* getCode() {\r\n        let code = (this.state.defaultCodeValue.name || this.state.defaultCodeValue.label);\r\n        code = code.substring(code.indexOf(\"/\")+1, code.length);\r\n        return code;\r\n    }*/\r\n\r\n    validate(values) {\r\n\r\n       // console.log(\"values = \" + JSON.stringify(values));\r\n       /* console.log(\"(validating values = \");\r\n        console.log(\"(values.phoneNumber.length = \" + (values.phoneNumber.length));\r\n        console.log(\"(values.phoneNumber.length > 1 = \" + (values.phoneNumber.length > 1));\r\n        console.log(\"(values.phoneNumber[0] = \" + (values.phoneNumber[0]));\r\n        console.log(\"(values.phoneNumber[0]==0 = \" + (values.phoneNumber[0] == \"0\"));*/\r\n\r\n\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.userName = 'Enter atleast 5 Characters'\r\n        } else if (values.name.length >50) {\r\n            errors.userName = 'too Long Max is 50 charachters'\r\n        }\r\n\r\n        if (!values.ddcnumber) {\r\n            errors.ddcnumber = 'required field !!!'\r\n        } else if (values.ddcnumber.length < 4) {\r\n            errors.ddcnumber = 'Enter at least 4 Characters'\r\n        } else if (values.ddcnumber.length > 15) {\r\n            errors.ddcnumber = 'Enter max 15 Characters'\r\n        } \r\n\r\n       /* if (!values.email) {\r\n            errors.email = 'required field !!!'\r\n        } else if (values.email.length < 4) {\r\n            errors.email = 'Enter atleast 4 Characters'\r\n        }*/\r\n\r\n       /* if (values.phoneNumber&&values.phoneNumber.length > 1 && values.phoneNumber[0]==\"0\") {\r\n            errors.phoneNumber = 'phone number must be without leading 0 !!!'\r\n        } else if (values.phoneNumber.length > 15)\r\n            errors.phoneNumber = 'phone number too long !!!'*/\r\n\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n       // this.props.history.push('/suppliers')\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        let { id, name, phoneNumber, ddcnumber, email } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Supplier</h3> : <h3 className=\"mb-3\"> Add New Supplier </h3>}\r\n                <Formik\r\n                    initialValues={{ id, name, phoneNumber, ddcnumber, email }}\r\n                    onSubmit={(values, actions)=>this.onSubmit(values, actions)}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        ({ setFieldValue, values, dirty }) => (\r\n                            <Form>\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <Field className=\"form-control \" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group w-50\">\r\n                                    <label className=\"required-field\">name</label>\r\n                                    <Field className=\"form-control \" type=\"text\" name=\"name\" />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning \" />\r\n                                </fieldset>\r\n                                {/* <fieldset className=\"d-flex\">*/}\r\n                                    {/*  <fieldset className=\"form-group inline w-25\">\r\n                                    <label>country/code</label>\r\n                                        <CustomSelect\r\n                                            style={{overflow:\"auto\"}}\r\n                                        className=\"\"\r\n                                        items={this.state.phoneCodes}\r\n                                            value={this.state.defaultCodeValue.value}\r\n                                            onChange={(value) => {\r\n                                                this.setState({\r\n                                                    defaultCodeValue: value,\r\n                                                    //selectedCode: value.label.substring(value.label.indexOf('+'), value.label.length)\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                        <ErrorMessage name=\"phoneCode\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                </fieldset>*/}\r\n                                    {/* <fieldset className=\"form-group inline\">\r\n                                        <label>code</label>\r\n                                        <p className=\"form-group mt-2 border-bottom\">+{this.state.defaultCodeValue}</p>\r\n                                    </fieldset>*/}\r\n                                <fieldset className=\"form-group inline w-25\">\r\n                                    <label>phone number</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"phoneNumber\" />\r\n                                    <ErrorMessage name=\"phoneNumber\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n                                {/* </fieldset>*/}\r\n                                <fieldset className=\"form-group w-25\">\r\n                                    <label className=\"required-field\">DDC number</label>\r\n                                    <Field className=\"form-control \" type=\"text\" name=\"ddcnumber\" />\r\n                                    <ErrorMessage name=\"ddcnumber\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group w-50\">\r\n                                    <label>email</label>\r\n                                    <Field className=\"form-control \" type=\"email\" name=\"email\" />\r\n                                    <ErrorMessage name=\"email\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                {//console.log(\"values = \" + JSON.stringify(values))\r\n                                }\r\n                                <fieldset className=\"form-group mt-5\">  \r\n                                <button className=\"btn btn-mybtn p-x-5\" type=\"submit\" disabled={!dirty}>Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SupplierComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductComponent.jsx",["428","429","430","431","432"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\nclass ProductComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            description: '',\r\n            productType: '',\r\n            productTypes: [],           \r\n            userCategoryId: '',          \r\n            userCategories: [],\r\n            filteredUserCategories:[],\r\n            //categories: [],           \r\n            amortizationPercent: '',\r\n            //maxamortization: 100,\r\n           // selectedCategoryId: '',\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n       \r\n        ProductDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                console.log('got response in component did mount = ' + JSON.stringify(response));\r\n                if (this.state.id > 0) {\r\n                    this.setState({\r\n                        name: response.data.name||'',\r\n                        description: response.data.description||'',\r\n                        productType: response.data.productType||'',\r\n                        userCategoryId: response.data.userCategoryId||'',//response.data.productType == 'DMA' ? response.data.subCategory : '',\r\n                       // selectedCategoryId: response.data.productType == 'DMA' ? response.data.subCategory.category.id : '',\r\n                        amortizationPercent: response.data.amortizationPercent||''\r\n                    })\r\n                }\r\n                this.setState({\r\n                    productTypes: response.data.productTypes||[],\r\n                    userCategories: response.data.userCategories||[],\r\n                    filteredUserCategories: response.data.userCategories||[],\r\n                    //categories: response.data.categories,\r\n                });\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            description: values.description,\r\n            // productType: values.productType,\r\n            userCategoryId: /*values.productType == 'DMA' ?*/ values.userCategoryId,//: null,\r\n            //amortizationPercent: values.productType == 'DMA' ? values.amortizationPercent : null,           \r\n            targetDate: values.targetDate\r\n        }\r\n        ProductDataService.save(item)\r\n            .then(() => this.props.history.push('/products'))\r\n            .catch(error =>\r\n            {\r\n                let msg = \"\" + error.response && typeof error.response.data == 'string' ?\r\n                    error.response.data : error.response.data.errors ?\r\n                        error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                            error.response.data.message : error;\r\n               // console.log(\"error \" + error)\r\n                actions.setErrors({ phoneNumber: msg })\r\n                if (msg.indexOf(\"name\") > -1)\r\n                    actions.setErrors({ name: msg }) \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.name = 'Enter atleast 5 Characters'\r\n        }\r\n\r\n       /* if (!values.productType) {\r\n            errors.productType = 'required field !!!'\r\n        }*/\r\n\r\n       /* if (values.productType === 'DMA') {\r\n\r\n            if (!values.categories)\r\n                errors.categories = 'required field !!!'*/\r\n        console.log(\"values.userCategryId = \" + values.userCategoryId)\r\n            if (!values.userCategoryId) {\r\n                errors.userCategoryId = 'required field !!!'\r\n            }\r\n           /* if (!values.amortizationPercent) {\r\n                errors.amortizationPercent = 'required field !!!'\r\n            }*/\r\n        //  }\r\n        console.log(\"errors = \" + JSON.stringify(errors))\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        //this.props.history.push('/products')\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        console.log('rendering');\r\n        const precent = \"%\";\r\n        let { id, name, description,  userCategoryId/*, productType, productTypes, amortizationPercent, userCategories,\r\n            filteredUserCategories*/ /*, maxamortization, selectedCategoryId*/ /*categories,*/ } = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Product</h3> : <h3 className=\"mb-3\"> Add New Product </h3>}\r\n                <Formik\r\n                    initialValues={{\r\n                        id, name, description, userCategoryId/*, productTypes, amortizationPercent, productType ,\r\n                        userCategories, filteredUserCategories */ /*, maxamortization, selectedCategoryId*/  /*categories,*/\r\n                    }}\r\n                    onSubmit={(values, actions) => this.onSubmit(values, actions)}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        ({ setFieldValue, values, dirty}) => (\r\n                            <Form>\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label className=\"required-field\">name</label>\r\n                                    <Field className=\"form-control w-50\" type=\"text\" name=\"name\"\r\n                                   />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning  w-25\" />\r\n                                </fieldset>\r\n                                \r\n                                <fieldset className=\"form-group\">\r\n                                    <label>product type</label>\r\n                                    {\r\n                                        this.state.productTypes.map((type) =>\r\n                                            <label className=\"mx-3\">\r\n                                                <Field\r\n                                                    className=\"mx-1\"\r\n                                                    type=\"radio\" name=\"productType\" value={type.value}\r\n                                                    checked={this.state.productType == type.value}\r\n                                                    onChange={(value) => {\r\n                                                        // console.log(\"value producttype = \" + JSON.stringify(value.target.value));\r\n                                                        /*setFieldValue(\"productType\", value.target.value);*/\r\n                                                        this.setState({ productType: value.target.value })\r\n                                                    ;\r\n                                                        //setFieldValue(\"amortizationPercent\", '');\r\n                                                        //setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\r\n\r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < this.state.userCategories.length; i++) {\r\n\r\n                                                            if (this.state.userCategories[i].category.productType == value.target.value) {\r\n                                                                subs.push(this.state.userCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        /*setFieldValue(\"filteredUserCategories\", subs);*/\r\n                                                        this.setState({ filteredUserCategories: subs })\r\n                                                    }\r\n                                                    }\r\n                                                   \r\n                                                    />\r\n                                                {type.name}\r\n                                    </label>)\r\n                                    }\r\n                                   \r\n                                    <ErrorMessage name=\"productType\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                {/*\r\n                                    values.productType=='DMA'  ? (\r\n                                   \r\n                                    <div>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>category</label>\r\n                                                <CustomSelect      \r\n                                                    id=\"selectedCategoryId\"\r\n                                                    name=\"selectedCategoryId\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={categories}\r\n                                                    value={subCategory !== '' ? subCategory.category.id : ''}\r\n                                                    onChange={(value) => {\r\n                                                        setFieldValue(\"selectedCategoryId\", value.value);\r\n                                                        setFieldValue(\"amortizationPercent\", '');\r\n                                                        setFieldValue(\"maxamortization\", categories.find(c => c.id == value.value).amortizationPercent);\r\n                                                        \r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < values.subCategories.length; i++) {\r\n                                                          \r\n                                                            if (values.subCategories[i].category.id == value.value) {\r\n                                                                subs.push(values.subCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        setFieldValue(\"filteredSubCategories\", subs);\r\n                                                    }\r\n                                                    }\r\n                                      \r\n                                            />\r\n                                        <ErrorMessage name=\" selectedCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    ) : null\r\n                               */ }                        \r\n                               \r\n                                        \r\n                                        <fieldset className=\"form-group\">\r\n                                        <label className=\"required-field\">category</label>\r\n                                        <CustomSelect\r\n                                                    name=\"category\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={this.state.filteredUserCategories}//categories.find(c => c.id == values.selectedCategoryId).subCategories}\r\n                                                    value={values.userCategoryId}\r\n                                                    onChange={(value) => {\r\n                                                        let sub = this.state.filteredUserCategories.find(s => s.id == value.value);\r\n                                                        setFieldValue(\"userCategoryId\", value.value);\r\n                                                        console.log(\"sub = \" + JSON.stringify(sub));\r\n                                                        this.setState({\r\n                                                            amortizationPercent: sub.amortizationPercent,\r\n                                                            //productType: this.state.productType == '' ? sub.category.productType\r\n                                                        })\r\n                                                       // setFieldValue(\"amortizationPercent\", sub.amortizationPercent)\r\n                                                        if (this.state.productType == '')\r\n                                                            this.setState({                                                              \r\n                                                                productType: sub.category.productType\r\n                                                            })\r\n                                                            //setFieldValue(\"productType\", sub.category.productType)\r\n                                                    }}\r\n                                        />\r\n                                        <ErrorMessage name=\"userCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning w-50\" />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>amortization percent</label><br/>\r\n                                        <Field className=\"form-control ws inline pt-2 pb-2\" readOnly type=\"number\" value={this.state.amortizationPercent}  />&nbsp;%\r\n                                                \r\n                                            </fieldset>\r\n                                       \r\n                               \r\n\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>description</label>\r\n                                    <Field className=\"form-control w-50\" as=\"textarea\" type=\"textarea\" name=\"description\" />\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group mt-5\">    \r\n                                <button className=\"btn btn-mybtn p-x-5\" disabled={!dirty} type=\"submit\">Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductsComponent.jsx",["433","434","435","436","437"],"import React, { Component } from 'react';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport ProductFilter from './Filters/ProductFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nconst headers = [\r\n    { label: \"Name\", key: \"name\" },\r\n    { label: \"product Type\", key: \"productType\" },\r\n    { label: \"amortization Percent\", key: \"amortizationPercent\" },\r\n    { label: \"sub-Category\", key: \"subCategory\" }\r\n];\r\n\r\nclass ListProductsComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            showdts: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n       ProductDataService.retrieveAll(this.state.search)\r\n            .then(\r\n           response => {\r\n               //console.log(\"items = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        ProductDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        ProductDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            let errormsg = error.response && error.response.data ?\r\n                error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n            //let errormessage = this.state.dderrormessage;\r\n            let msg = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n            msg = msg.indexOf(\"ConstraintViolationException\") > -1 ? \"can't delete item with associated records !!!\" : msg\r\n            this.setState({\r\n                errormsg: msg\r\n            })\r\n        })\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/products/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/products/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }   \r\n\r\n    render() {\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n               \r\n                {this.state.filter && <ProductFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 pb-3\">\r\n                            <strong> Products</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"products-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"products-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormas: null })}></i></div>}\r\n                       \r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n\r\n                        <table className=\"table border-bottom my-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\" className=\"ws\">product Type</th>\r\n                                    <th scope=\"col\">category</th>\r\n                                  \r\n                                    <th scope=\"col\" className=\"ws\">amortization</th>\r\n                                    <th scope=\"col\" className=\"ws\">total</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        (item, i) =>\r\n                                           <>\r\n                                                <tr scope=\"row\" key={item.id}>\r\n                                                    <td className=\"hoverable\"\r\n                                                        onClick={() => {\r\n                                                            let showdts = this.state.showdts;\r\n                                                            if (showdts == undefined) showdts = [];\r\n                                                            showdts[i] = showdts[i] ? false : true;\r\n                                                            this.setState({ showdts: showdts })\r\n                                                        }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                            aria-hidden=\"true\"></i></td>\r\n                                                <td className=\"hoverable\"\r\n                                                    onClick={() => {\r\n                                                        this.props.history.push(`/productDetails?Filter.productId=${item.id}`)\r\n                                                    }}>{item.name}</td>\r\n                                                <td>{item.userCategory.category.productType}</td>\r\n                                                <td>{ item.userCategory.category.name }</td>\r\n\r\n                                                <td>{item.userCategory.category.productType =='LTA'? item.userCategory.amortizationPercent + '%' : '-' }</td>\r\n                                                <td>{item.total ? item.total : '0'}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                                </tr>\r\n                                                {this.state.showdts && this.state.showdts[i] &&\r\n                                                    <tr >\r\n                                                        <td></td>\r\n                                                    <td colSpan=\"1\">description :&nbsp;</td>\r\n                                                    <td colSpan=\"4\" className=\"pt-3 pb-3 bold-border-bottom\">\r\n                                                        {item.description}\r\n                                                    </td>\r\n                                                    <td></td>\r\n                                                        \r\n\r\n                                                    </tr>}       \r\n                                                </>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListProductsComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUsersComponent.jsx",["438","439","440"],"import React, { Component } from 'react';\r\nimport UserDataService from '../service/UserDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserFilter from './Filters/UserFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport AuthenticationService from '../service/AuthenticationService'\r\n\r\nconst headers = [\r\n    { label: \"First Name\", key: \"firstName\" },\r\n    { label: \"Last Name\", key: \"lastName\" },\r\n    { label: \"User Name\", key: \"userName\" },\r\n    { label: \"Email\", key: \"email\" }\r\n];\r\n\r\n\r\n\r\nclass ListUsersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();       \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        UserDataService.retrieveAll(this.state.search)\r\n            .then(\r\n            response => {\r\n                console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        UserDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items }); \r\n                this.csvLink.current.link.click()\r\n        })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n       UserDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n            )\r\n    }\r\n\r\n    undoDeleteClicked(id) {\r\n\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/users/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/users/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null})\r\n    }\r\n\r\n    render() {\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                    {this.state.filter && <UserFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                            <h5 className=\"panel-title p-2 pb-3\">\r\n                                <strong> Users</strong>\r\n                            </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap \">\r\n                                <div >\r\n                                    <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"users-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\"); \r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"users-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                                </div>                              \r\n                                    {this.state.pager && <PaginationComponent {...this.state.pager} />}                              \r\n                            </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}<i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n\r\n                      \r\n                    <table className= \"table border-bottom my-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>first name</th>\r\n                                <th>last name</th>\r\n                                <th>user name</th>\r\n                                    <th>email</th>\r\n                                    {console.log(\"userRole  = \" + (userRole))}\r\n                                    {console.log(\"userRole === 'ROLE_Admin'  = \"+(userRole === 'ROLE_Admin' ))}\r\n                                    {userRole === 'ROLE_Admin' && <th> city </th>}\r\n                                    {userRole =='ROLE_Mol' && <th>profiles</th>}\r\n                                <th>Update &emsp;&nbsp; Delete</th>                                                                     \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                    item =>\r\n                                        <tr key={item.id}>\r\n                                            <td>{item.firstName}</td>\r\n                                            <td>{item.lastName}</td>\r\n                                            <td>{item.userName}</td>\r\n                                            <td>{item.email}</td>\r\n                                            {userRole === 'ROLE_Admin' && <td> {item.countryName}/{item.cityName} </td>}\r\n                                            {userRole == 'ROLE_Mol' && <td className=\"hoverable\"\r\n                                                onClick={() => {\r\n                                                    this.props.history.push(`/userProfiles?Filter.userId=${item.id}`);\r\n                                                }}>&nbsp;>></td>}\r\n                                            {item.deleted && <td>\r\n                                                &nbsp;&nbsp;deleted&emsp;&nbsp;&nbsp;{\r\n                                                    /*<button className=\"btn btn-mybtn btn-delete\" onClick={() => this.undoDeleteClicked(item.id)}>Undo</button>*/}\r\n                                            </td>}\r\n                                            {!item.deleted && <td>\r\n\r\n                                                <button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>}\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                            </table>\r\n                       \r\n                </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ListUsersComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveriesComponent.jsx",["441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470"],"import React, { Component } from 'react';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport DeliveryFilter from './Filters/DeliveryFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\n//import ListDeliveryDetailInnerComponent from './ListDeliveryDetailInnerComponent';\r\nimport InventoryNumberInnerComponent from './InventoryNumberInnerComponent';\r\nimport DeliveryInnerComponent from './DeliveryInnerComponent'\r\nimport DDInnerComponent from './DDInnerComponent'\r\n\r\nconst headers = [\r\n    { label: \"number\", key: \"number\" },\r\n    { label: \"date\", key: \"date\" },\r\n    { label: \"supplier\", key: \"supplierName\" },\r\n    { label: \"total bill\", key: \"total\" },  \r\n];\r\nconst headers2 = [\r\n    { label: \"delivery\", key: \"number\" },\r\n    { label: \"date\", key: \"date\" },\r\n    { label: \"supplier\", key: \"supplierName\" },    \r\n    { label: \"product\", key: \"productName\" },\r\n    { label: \"quantity\", key: \"quantity\" },\r\n    { label: \"unit price\", key: \"pricePerUnit\" },\r\n];\r\n\r\nclass ListDeliveriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],            \r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            message: null,\r\n            ddmessage: [],\r\n            dderrormessage:[],\r\n            ddShow: [],\r\n            pdShow: [],\r\n            pdmessage: [],\r\n            pdUpdateShow: {\r\n                pd: {}, show: false\r\n            },\r\n            ddUpdateShow: {\r\n                dd: {}, show: false\r\n            },\r\n            \r\n            deliveryUpdateShow: {\r\n                delivery: {},show:false}\r\n           \r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n       // this.deleteChildClicked = this.deleteChildClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"version = \" + React.version);\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        DeliveryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n            response => {\r\n                \r\n               this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                   deliveryView: response.data.deliveryView || 'DeliveryView',\r\n                   //pdShow: [],\r\n                        //search: this.getSearchString()\r\n               });\r\n           }).catch((error) => {\r\n               this.setState({                  \r\n                   errormsg:  ''+ error == 'Error: Request failed with status code 401' ?  'need to login again !!!' : '' + error\r\n               })\r\n           })\r\n    }\r\n\r\n    /*\r\n    getSearchString = () => {\r\n        let search = window.location.search || '';\r\n        let index = search.indexOf(\"&deliveryView=DeliveryDetailView&\");\r\n        if (index > 0) {\r\n            search = search.replace(\"&deliveryView=DeliveryDetailView&\", \"\");\r\n            \r\n            // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n        }\r\n        else {\r\n            index = search.indexOf(\"deliveryView=DeliveryDetailView&\");\r\n            if (index > 0) {\r\n                search = search.replace(\"deliveryView=DeliveryDetailView&\", \"\");\r\n                // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n            }\r\n            index = search.indexOf(\"&deliveryView=DeliveryDetailView\");\r\n            if (index > 0) {\r\n                search = search.replace(\"&deliveryView=DeliveryDetailView\", \"\");\r\n                // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n            }\r\n            else {\r\n                index = search.indexOf(\"deliveryView=DeliveryDetailView\");\r\n                if (index > 0) {\r\n                    search = search.replace(\"deliveryView=DeliveryDetailView\", \"\")\r\n                    // this.setState({ deliveryView: 'DeliveryDetailView' })\r\n                }\r\n            }\r\n        }\r\n       \r\n        if (search == '?') search = '';\r\n        console.log(\"search = \" + search);\r\n        return search\r\n    }*/\r\n\r\n   /* getRetrieveSearchString = () => {\r\n        let search = this.state.search;\r\n        if (this.state.deliveryView == 'DeliveryDetailView') {\r\n            console.log(\"search = \"+search)\r\n        }\r\n       \r\n            return search\r\n       \r\n    }*/\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        DeliveryDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                //console.log(\"data has childs = \" + (response.data.deliveryDetails != null));\r\n                let downloadData = [];\r\n                let data = response.data.items || response.data.daoitems;\r\n                data = data.map(row => ({\r\n                    ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                        month: \"numeric\",\r\n                        day: \"2-digit\",\r\n                        year: \"numeric\",\r\n                    }).format(new Date(row.date))\r\n                }));\r\n                if (this.state.deliveryView == 'DeliveryDetailView') {\r\n                    this.getDetailData(data, downloadData);\r\n                   \r\n                } else {\r\n\r\n                    downloadData = data\r\n                }\r\n\r\n                this.setState({\r\n                    alldata: downloadData\r\n                });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getDetailData = (data, arr) => {\r\n        data.map(i => {\r\n            i.deliveryDetails.map(x => {\r\n                arr.push({\r\n                    number: i.number,\r\n                    date: i.date,\r\n                    supplierName: i.supplierName,\r\n                    productName: x.productName,\r\n                    quantity: x.quantity,\r\n                    pricePerUnit: x.pricePerOne\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;       \r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n        }\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        newSearch += 'Pager.itemsPerPage=2147483647';       \r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id, x) {\r\n        \r\n        DeliveryDataService.delete(id)\r\n            .then(\r\n            response => {\r\n                let show = this.state.pdShow;\r\n                if (this.state.items[x]) {\r\n                    show.splice(x, 1);                   \r\n                }\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                    pdShow: show,\r\n                    pdmessage: [],\r\n                    ddmessage:[]\r\n                })\r\n                    this.refresh()\r\n                }\r\n            )\r\n    }\r\n\r\n    /**\r\n     * ******************\r\n     * @param {any} id\r\n     */\r\n    \r\n    deleteChildClicked(id, x, y, parentid) {//child id\r\n        \r\n        DeliveryDataService.deleteChild(id, parentid)\r\n            .then(\r\n            response => {\r\n                let length = this.state.items[x].deliveryDetails.length;\r\n\r\n                let show = this.state.pdShow;\r\n                if (this.state.pdShow[x] == undefined) show[x] = [];\r\n\r\n                let ddmessage = this.state.ddmessage;\r\n                let message = this.state.message;\r\n                let pdmessage = this.state.pdmessage;\r\n                pdmessage = [];\r\n              \r\n               /* if (length == 1) {\r\n                    show.splice(x, 1);\r\n                    message = `Delete successful`;\r\n                    ddmessage = []\r\n                } else {*/\r\n                    if (this.state.pdShow[x][y] == undefined) show[x][y] = {}\r\n                    show[x].splice(y, 1);\r\n                    ddmessage[x] = `Delete successful`;\r\n                    message = ''\r\n                //}\r\n\r\n                this.setState({\r\n                    pdShow: show,\r\n                    pdmessage: pdmessage,\r\n                    ddmessage: ddmessage,\r\n                    message: message\r\n                }) \r\n               \r\n                    this.refresh()\r\n            }\r\n        ).catch(error => {\r\n            let errormsg = error.response && error.response.data ?\r\n                error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n            let dderrormessage = this.state.dderrormessage;\r\n            dderrormessage[x] = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n            this.setState({\r\n                dderrormessage: dderrormessage,\r\n            })\r\n            })\r\n    }\r\n\r\n    /**********************************/\r\n    \r\n    deletePDChildClicked = (value, x, y, id) => {       \r\n       /* if (this.state.items[x].deliveryDetails[y].quantity == 1) {\r\n            \r\n            this.deleteChildClicked(id,x,y)            \r\n        }\r\n        else {*/\r\n            ProductDetailDataService.delete(value)\r\n                .then(\r\n                    response => {                       \r\n                        ProductDetailDataService.retrieveAllNumbers(\"?deliveryDetailId=\" + id)\r\n                            .then(response => {\r\n                                let show = this.state.pdShow;\r\n                                show[x][y].data = response.data;\r\n                                let items = this.state.items;\r\n                                items[x].deliveryDetails[y].quantity = items[x].deliveryDetails[y].quantity - 1;\r\n                                items[x].total = items[x].total - items[x].deliveryDetails[y].pricePerOne;\r\n                                let pdmessages = this.state.pdmessage;                               \r\n                                if (pdmessages[x] == null) pdmessages[x] = [];\r\n                                pdmessages[x][y] = `Delete successful`;\r\n\r\n                                this.setState({\r\n                                    items: items,\r\n                                    pdShow: show,\r\n                                    pdmessage: pdmessages,\r\n                                    message: '',\r\n                                    ddmessage:[]\r\n                                })\r\n                            }).catch(error => {\r\n                                let pdmessages = this.state.pdmessage;\r\n                                if (pdmessages[x] == null) pdmessages[x] = [];\r\n                                pdmessages[x][y] = `error ` + error;\r\n                                this.setState({                                    \r\n                                    pdmessage: pdmessages,                                   \r\n                                })\r\n                            })                       \r\n                    })\r\n       // }\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.state.deliveryView == 'DeliveryDetailView' ? \r\n            this.props.history.push(`/deliveries/${id}/DeliveryDetailView`) :\r\n            this.props.history.push(`/deliveries/${id}`)\r\n    }\r\n\r\n    updateClickedInner = (item, x) => {\r\n       /* let messages = this.state.message;\r\n        if (messages != null )\r\n            messages = null;*/ \r\n\r\n        let show = this.state.deliveryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.delivery = JSON.parse(JSON.stringify(item))\r\n            show.x = x;            \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            deliveryUpdateShow: show,\r\n            message: null,\r\n            pdmessage: [],\r\n            ddmessage:[]\r\n        });     \r\n    }\r\n\r\n    updateChildClicked = (dd, x, y) => {\r\n\r\n       /* let ddmessages = this.state.ddmessage;\r\n        if (ddmessages[x] != null )\r\n            ddmessages[x] = null;*/\r\n\r\n        let show = this.state.ddUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.dd = JSON.parse(JSON.stringify(dd))\r\n            show.x = x;\r\n            show.y = y;\r\n           \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            ddUpdateShow: show,\r\n            ddmessage: [],\r\n            pdmessage: [],\r\n            message:null\r\n        });      \r\n    }\r\n   \r\n    updatePdChildClicked = (pd, x, y, i, ddid) => {    \r\n       /* let pdmessages = this.state.pdmessage;\r\n        if (pdmessages[x] != null && pdmessages[x][y] != null) \r\n            pdmessages[x][y] = null; */     \r\n\r\n        let show = this.state.pdUpdateShow ;       \r\n        show.show = !show.show;\r\n        if (show.show == true) {          \r\n            show.pd = JSON.parse(JSON.stringify(pd))\r\n            show.x = x;\r\n            show.y = y;\r\n            show.i = i;\r\n            show.ddid = ddid;\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            pdUpdateShow: show,\r\n            //pdmessage: pdmessages,\r\n            ddmessage: [],\r\n            pdmessage: [],\r\n            message: null\r\n        });      \r\n    }\r\n\r\n   \r\n\r\n    \r\n    /*saveUpdatedPd = () => {\r\n        if (this.state.pdUpdateShow.pd.name == this.state.pdShow[this.state.pdUpdateShow.x][this.state.pdUpdateShow.y].data[this.state.pdUpdateShow.i].name) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number hasn't changed\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (this.state.pdUpdateShow.pd.name.length == 0) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number can't be empty\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else {           \r\n            ProductDetailDataService.updateNumber(this.state.pdUpdateShow.pd)\r\n                .then(response => {\r\n                    this.updatePdChildClicked(null);\r\n                   \r\n                    let x = this.state.pdUpdateShow.x;\r\n                    let y = this.state.pdUpdateShow.y;\r\n                    \r\n                    let pdshow = this.state.pdShow;\r\n                    pdshow[x][y].data[this.state.pdUpdateShow.i].name = response.data;\r\n\r\n                    let pdmessages = this.state.pdmessage;\r\n                    if (pdmessages[x] == null) pdmessages[x] = [];\r\n                    pdmessages[x][y] = `Update successful`;                    \r\n\r\n                    this.setState({                       \r\n                        pdShow: pdshow,\r\n                        pdmessage: pdmessages\r\n                    })\r\n                }).catch(error => {\r\n                    let show = this.state.pdUpdateShow;\r\n                    show.error = '' + error.response.data;\r\n                    this.setState({ pdUpdateShow: show })\r\n                })\r\n        }\r\n    }*/\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/deliveries/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    setView(value) {\r\n        /*if (value.target.value === 'DeliveryDetailView' && this.state.deliveryView !== 'DeliveryDetailView') {\r\n            let search = this.state.search;           \r\n            let newsearch = search.length > 0 ? search + '&deliveryView=DeliveryDetailView' : '?deliveryView=DeliveryDetailView';\r\n            window.location.href = ``+window.location.pathname+newsearch;          \r\n        }  */   \r\n       /* if (value.target.value === 'DeliveryView' && this.state.deliveryView == 'DeliveryDetailView') {\r\n            let search = this.state.search;\r\n            let newsearch = search.length > 0 ? search + '&deliveryView=DeliveryView' : '?deliveryView=DeliveryView';\r\n            window.location.href = `` + window.location.pathname + newsearch;\r\n        } */\r\n        let path = window.location.pathname;\r\n        let newPath = ``;\r\n        let search =  window.location.search;\r\n        if (search.length < 1) {\r\n            newPath = path + `?deliveryView=${value.target.value}`;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith('deliveryView'))\r\n                    continue\r\n                else\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n            newPath = path + '?' + newPath + 'deliveryView=' + value.target.value;\r\n        }\r\n        window.location.href = newPath;\r\n       \r\n    }\r\n\r\n   /**\r\n    * **********\r\n    * @param {any} x\r\n    * @param {any} y\r\n    * @param {any} id\r\n    */\r\n    \r\n    getProductDetails( x, y, id) {\r\n      \r\n        if (this.state.pdShow[x] == undefined || this.state.pdShow[x][y] == undefined) {\r\n             let show = this.state.pdShow;\r\n            if (this.state.pdShow[x] == undefined) show[x] = [];\r\n\r\n            ProductDetailDataService.retrieveAllNumbers(\"?deliveryDetailId=\" + id )\r\n                .then(response => {\r\n                    console.log(\"pds = \" + JSON.stringify(response.data));\r\n                    show[x][y] = {}\r\n                    show[x][y].show = true;\r\n                    show[x][y].data = response.data;\r\n                this.setState({ pdShow: show });\r\n            })\r\n        }\r\n        else {\r\n            let show = this.state.pdShow;\r\n            show[x][y].show = !show[x][y].show;\r\n            this.setState({ pdShow: show })\r\n        }\r\n    }\r\n\r\n    showdd = (x) => {\r\n        let ddShow = this.state.ddShow;\r\n        ddShow[x] = !ddShow[x];\r\n        this.setState({ ddShow: ddShow })\r\n    }\r\n\r\n    getPageData = () => {\r\n        const data = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        }));\r\n        if (this.state.deliveryView == 'DeliveryView')\r\n            return data;\r\n        else {\r\n            let downloadData = [];\r\n            downloadData = this.getDetailData(data, downloadData);\r\n            return downloadData;\r\n        }\r\n    }\r\n\r\n    render() {\r\n       /* let downloadData = [];\r\n        let databefore = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        })); \r\n        if (this.state.deliveryView != 'DeliveryView') {\r\n            \r\n            downloadData = this.getDetailData(databefore, downloadData);\r\n\r\n            \r\n        }\r\n        const data = downloadData || databefore;*/\r\n\r\n        const data = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        })); \r\n        const data2 = [];\r\n        if (this.state.deliveryView !== 'DeliveryView') {\r\n           this.getDetailData(data, data2);}\r\n\r\n       \r\n        return (\r\n            <div className=\"px-3\">\r\n                {console.log(\"rendering\")}\r\n                {this.state.pdUpdateShow && this.state.pdUpdateShow.show == true &&\r\n                    <InventoryNumberInnerComponent\r\n                    pdUpdateShow={this.state.pdUpdateShow}\r\n                    pdShow={this.state.pdShow}\r\n                    pdmessage={this.state.pdmessage}\r\n                    updatePdChildClicked={() => this.updatePdChildClicked(null)}\r\n                    setpdShow={(value) => this.setState({ pdShow: value })}\r\n                    setpdMessage={(value) => this.setState({ pdmessage: value })}\r\n                    refresh={() => this.refresh()}\r\n\r\n                    //setpdUpdateShow={(value) => this.setState({ pdUpdateShow: value })} \r\n                    />}\r\n                {this.state.deliveryUpdateShow && this.state.deliveryUpdateShow.show == true &&\r\n                    <DeliveryInnerComponent\r\n                    deliveryUpdateShow={this.state.deliveryUpdateShow}\r\n                    items={this.state.items}\r\n                    message={this.state.message}\r\n                    suppliers={this.state.filter.suppliers}\r\n                    updateClickedInner={() => this.updateClickedInner(null)}\r\n                    setItems={(value) => this.setState({ items: value })}\r\n                    setMessage={(value) => this.setState({ message: `update successful` })}\r\n                    //setdeliveryUpdateShow={(value) => this.setState({ deliveryUpdateShow: value })} \r\n                    />}\r\n                {this.state.ddUpdateShow && this.state.ddUpdateShow.show == true &&\r\n                    <DDInnerComponent\r\n                        ddUpdateShow={this.state.ddUpdateShow}\r\n                        items={this.state.items}\r\n                        ddmessage={this.state.ddmessage}\r\n                        products={this.state.filter.products}\r\n                        updateChildClicked={() => this.updateChildClicked(null)}\r\n                        setItems={(value) => this.setState({ items: value })}\r\n                        setddMessage={(value) => this.setState({ ddmessage: value})}\r\n                    //setdeliveryUpdateShow={(value) => this.setState({ deliveryUpdateShow: value })} \r\n                    />}\r\n                {/*<>\r\n                    <div className={this.state.pdUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                    <div className={this.state.pdUpdateShow.show ? \"modal d-block\" : \"d-none\"}>\r\n\r\n\r\n                        <span class=\"close\" onClick={() => this.updatePdChildClicked(null)}>&times;</span>\r\n                        <h2>update inventory number </h2>\r\n                        {this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 && <div className=\"alert alert-success d-flex\">{this.state.pdUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.pdUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ pdUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                        <p >number : </p>\r\n                        <input type=\"text\" value={this.state.pdUpdateShow.pd.name} onChange={(value) => {\r\n                            let show = this.state.pdUpdateShow;\r\n                            show.pd.name = value.target.value;\r\n                            this.setState({ pdUpdateShow: show })\r\n                        }} />\r\n                        <button className=\"btn btn-mybtn px-5 mt-3 ml-5\" onClick={this.saveUpdatedPd}>Save</button>\r\n                        <button className=\"btn btn-mybtn btn-delete px-5 mt-3 ml-3\" onClick={() => this.updatePdChildClicked(null)}>Cancel</button>\r\n\r\n                    </div>\r\n                </>*/}\r\n                   \r\n               \r\n               \r\n                {this.state.filter && <DeliveryFilter {...this.state.filter}\r\n                    search={this.state.deliveryView == 'DeliveryView' ? this.state.search : null}/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Deliveries</strong>\r\n                        </h5>\r\n                        <label className=\"mx-1 pull-right mr-5\">\r\n                            <input className=\"mx-1 m-2 mt-3 \" type=\"radio\" name=\"DeliveryView\" value=\"DeliveryDetailView\"\r\n                                checked={this.state.deliveryView == 'DeliveryDetailView'}\r\n                                onClick={\r\n                                    (value) => this.state.deliveryView != 'DeliveryDetailView' ?                              \r\n                                    this.setView(value) : {}} />Delivery&Details View\r\n                        </label>\r\n                        <label className=\"mx-1 pull-right mr-5\">\r\n                            <input className=\"mx-1 m-2 mt-3 \" type=\"radio\" name=\"DeliveryView\" value=\"DeliveryView\"\r\n                                checked={this.state.deliveryView == 'DeliveryView'}\r\n                                onClick={(value) => this.state.deliveryView == 'DeliveryDetailView' ? this.setView(value) : {}}//this.setState({ deliveryView: 'DeliveryView' }) : {}}\r\n                            />Delivery View\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={this.state.deliveryView == 'DeliveryView' ? data : data2}\r\n                                    headers={ this.state.deliveryView == 'DeliveryView' ? headers : headers2 } filename={\"deliveries-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {}}\r\n                                >Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"deliveries-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={this.state.deliveryView == 'DeliveryView' ? headers : headers2}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {\r\n                                this.state.pager &&\r\n                                <PaginationComponent {...this.state.pager}\r\n                                    search={this.state.deliveryView == 'DeliveryView' ? this.state.search : null}/>\r\n                            }\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }        \r\n                       \r\n                        {\r\n                            this.state.deliveryView == 'DeliveryDetailView' &&                            \r\n                                    this.state.items.map(\r\n                                        (item, x) =>\r\n                                            <div className=\"panel-body\">\r\n                                                <table className=\"table  border table-s\">\r\n                                                    <tbody>\r\n                                                        <tr >\r\n                                                            <th className=\"wl pl-5 hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    this.showdd(x)\r\n                                                                }}> Number : {item.number} </th>\r\n                                                            <th className=\"wl pl-3 hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    this.showdd(x)\r\n                                                                }}\r\n                                                            > Date : {\r\n                                                                new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                                    month: \"long\",\r\n                                                                    day: \"2-digit\",\r\n                                                                    year: \"numeric\",                                                                  \r\n                                                                }).format(new Date(item.date))\r\n                                                            }</th>\r\n                                                            <th className=\" wl hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    this.showdd(x)\r\n                                                                }}> Supplier : {item.supplierName || '-'}</th>\r\n                                                            <th className=\"d-flex justify-content-end mr-1\">\r\n                                                                <button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item, x)}>Update</button>\r\n                                                                <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id, x)}>Delete</button>\r\n                                                            </th>\r\n                                                         </tr>\r\n                                                         <tr>\r\n                                                            <td colspan=\"4\">\r\n                                                                {this.state.ddShow && this.state.ddShow[x] &&\r\n                                                                    <>\r\n                                                                        {/*item.deliveryDetails && \r\n                                                                    <ListDeliveryDetailInnerComponent\r\n                                                                        item={item}\r\n                                                                        x={x}\r\n                                                                        pdShow={this.state.pdShow}\r\n                                                                        pdmessage={this.state.pdmessage}\r\n                                                                        setmessage={(msg) => this.setState({ message: msg })}\r\n                                                                        refresh={this.refresh}\r\n                                                                        items={this.state.items}\r\n                                                                        setStateItems={(value) => this.setState({ items: value })}\r\n                                                                        // pdUpdateShow={this.state.pdUpdateShow}\r\n                                                                        // setStatepdUpdateShow={(value) => this.setState({ pdUpdateShow: value })}\r\n                                                                        updatePdChildClicked={(pd, x, y, i) => this.updatePdChildClicked(pd, x, y, i)}\r\n                                                                        historyPush={(value) => this.props.history.push(value)}\r\n                                                                        setStatePdShow={(value) => this.setState({ pdShow: value })}\r\n                                                                        setStatePdMessage={(value) => this.setState({ pdmessage: value })}/>*/}\r\n                                                                        {\r\n                                                                            this.state.ddmessage && this.state.ddmessage[x] &&\r\n                                                                            <div className=\"alert alert-success d-flex\">{this.state.ddmessage[x]}\r\n                                                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => {\r\n                                                                                    let ddmessages = this.state.ddmessage;\r\n                                                                                    ddmessages[x] = null;\r\n                                                                                    this.setState({ ddmessage: ddmessages })\r\n                                                                                }}></i>\r\n                                                                            </div>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.state.dderrormessage && this.state.dderrormessage[x] &&\r\n                                                                        <div className=\"alert alert-warning d-flex\">{this.state.dderrormessage[x]}\r\n                                                                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => {\r\n                                                                                let dderrormessages = this.state.dderrormessage;\r\n                                                                                dderrormessages[x] = null;\r\n                                                                                this.setState({ dderrormessage: dderrormessages })\r\n                                                                            }}></i>\r\n                                                                        </div>\r\n                                                                    }\r\n                                                                        <table className=\"table border x-Table \">\r\n                                                                            <tbody>\r\n                                                                                <tr>\r\n                                                                                    <td>Product</td>\r\n                                                                                    <td>Quantity</td>\r\n                                                                                    <td>Unit Price</td>\r\n                                                                                    <td>Total</td>\r\n                                                                                <td style={{ width: '140px', padding: '.2rem .5rem' }}>\r\n                                                                                    <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                     onClick={() => this.updateChildClicked(null, x, null)}>add one</button>\r\n                                                                                </td>\r\n                                                                                </tr>\r\n                                                                                {\r\n                                                                                    item.deliveryDetails.map(\r\n                                                                                        (dd, y) =>\r\n                                                                                            <>\r\n                                                                                                <tr key={dd.id}>\r\n                                                                                                    <td><p className=\"hoverable\"\r\n                                                                                                        onClick={() => {\r\n                                                                                                            this.getProductDetails(x, y, dd.id)\r\n                                                                                                        }}>{dd.productName}</p></td>\r\n                                                                                                    <td className=\"hoverable\"\r\n                                                                                                        onClick={() => {\r\n                                                                                                            this.getProductDetails(x, y, dd.id)\r\n                                                                                                        }}><p>{dd.quantity}</p></td>\r\n                                                                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                                                        style: \"currency\",\r\n                                                                                                        currency: \"BGN\",\r\n                                                                                                        maximumFractionDigits: 2\r\n                                                                                                    }).format(dd.pricePerOne)}</td>\r\n                                                                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                                                        style: \"currency\",\r\n                                                                                                        currency: \"BGN\",\r\n                                                                                                        maximumFractionDigits: 2\r\n                                                                                                    }).format(dd.pricePerOne * dd.quantity)}  </td>\r\n                                                                                                    <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateChildClicked(dd, x, y)}>Update</button>\r\n                                                                                                        <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteChildClicked(dd.id, x, y, item.id)}>Delete</button></td>\r\n                                                                                                </tr>\r\n                                                                                                {\r\n                                                                                                    this.state.pdShow[x] && this.state.pdShow[x][y] && this.state.pdShow[x][y].show\r\n                                                                                                    &&\r\n                                                                                                    <tr>\r\n                                                                                                        <td colspan=\"5\">\r\n                                                                                                            {\r\n                                                                                                                this.state.pdmessage[x] && this.state.pdmessage[x][y] &&\r\n                                                                                                                <div className=\"alert alert-success d-flex\">{this.state.pdmessage[x][y]}\r\n                                                                                                                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                                                                                        onClick={() => {\r\n                                                                                                                            let pdmessages = this.state.pdmessage;\r\n                                                                                                                            pdmessages[x][y] = null;\r\n                                                                                                                            this.setState({ pdmessage: pdmessages })\r\n                                                                                                                        }}>\r\n                                                                                                                    </i>\r\n                                                                                                                </div>\r\n                                                                                                            }\r\n                                                                                                            <table className=\"ml-5 mb-3\" style={{ width: '80%' }}>\r\n                                                                                                                <tr><td style={{ width: '10%' }}>number</td>\r\n                                                                                                                    <td className=\"pl-5\">inventory number</td>\r\n                                                                                                                    <td style={{ width: '140px', padding: '.2rem .5rem'}}>                                                                                                                       \r\n                                                                                                                        <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                                                               onClick={() => this.updatePdChildClicked(null, x, y, null, dd.id)}>add one</button>                                                                                                                        \r\n                                                                                                                    </td></tr>\r\n                                                                                                                {this.state.pdShow[x][y].data.map((pd, i) =>\r\n                                                                                                                    <tr>\r\n                                                                                                                        <td >{i + 1}</td>\r\n                                                                                                                        <td className=\"pl-5 pb-3 hoverable\"\r\n                                                                                                                            onClick={() => {\r\n                                                                                                                                this.props.history.push(`/productDetails?Filter.id=${pd.value}`)\r\n                                                                                                                            }}>\r\n                                                                                                                            {pd.name}\r\n                                                                                                                        </td>\r\n                                                                                                                        <td><button className=\"btn btn-mybtn mr-1\" onClick={() => {\r\n                                                                                                                            this.updatePdChildClicked(pd, x, y, i)\r\n                                                                                                                        }}>Update</button>\r\n                                                                                                                            <button className=\"btn btn-mybtn btn-delete\"\r\n                                                                                                                                onClick={() => this.deletePDChildClicked(pd.value, x, y, dd.id)}>\r\n                                                                                                                                Delete</button></td>\r\n                                                                                                                    </tr>\r\n                                                                                                                )}\r\n                                                                                                            </table>\r\n                                                                                                        </td>\r\n                                                                                                    </tr>\r\n                                                                                                }\r\n                                                                                            </>\r\n                                                                                    )}\r\n                                                                            </tbody>\r\n                                                                        </table>\r\n                                                                    </>\r\n                                                                }\r\n                                                                   \r\n                                                                \r\n                                                                <span class=\"pull-right\" style={{ marginRight: '100px' }}><strong>Total Bill : {new Intl.NumberFormat(\"en-GB\", {\r\n                                                                    style: \"currency\",\r\n                                                                    currency: \"BGN\",\r\n                                                                    maximumFractionDigits: 2\r\n                                                                }).format(item.total)} </strong> {}</span>\r\n                                                         </td>\r\n                                                        </tr>\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>                                            \r\n                                         )}                      \r\n\r\n                        {                            \r\n                            this.state.deliveryView == 'DeliveryView' &&\r\n                             <table className=\"table border-bottom my-table\" >\r\n                                <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">number</th>\r\n                                            <th scope=\"col\" >date</th>\r\n                                            <th scope=\"col\" >supplier</th>                                   \r\n                                            <th >total</th>\r\n                                            <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                    </tr>\r\n                                </thead>                           \r\n                                <tbody>\r\n                                    {\r\n                                        this.state.items.map(\r\n                                            item =>\r\n                                                <tr>\r\n                                                    <td>{item.number}</td>\r\n                                                    <td>\r\n                                                        {new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                            month: \"long\",\r\n                                                            day: \"2-digit\",\r\n                                                            year: \"numeric\",\r\n                                                        }).format(new Date(item.date))}\r\n                                                    </td>\r\n                                                    <td >{item.supplierName || '-'}</td>\r\n                                                    <td >{\r\n                                                        new Intl.NumberFormat(\"en-GB\", {\r\n                                                            style: \"currency\",\r\n                                                            currency: \"BGN\",\r\n                                                            maximumFractionDigits: 2\r\n                                                        }).format(item.total)}</td>\r\n                                                    <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                        <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                        )}                                    \r\n                            </tbody>\r\n                        </table>\r\n                       }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListDeliveriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListSuppliersComponent.jsx",["471","472","473"],"import React, { Component } from 'react';\r\nimport SupplierDataService from '../service/SupplierDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport SupplierFilter from './Filters/SupplierFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport Function from './Shared/Function'\r\n\r\nconst headers = [\r\n    { label: \"Name\", key: \"name\" },\r\n    { label: \"Phone Number\", key: \"phoneNumber\" },\r\n    { label: \"DDC Number\", key: \"ddcnumber\" },\r\n    { label: \"Email\", key: \"email\" }\r\n];\r\n\r\nclass ListSuppliersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        SupplierDataService.retrieveAll(this.state.search)\r\n            .then(\r\n            response => {\r\n                this.setState({\r\n                    items: response.data.items,\r\n                    pager: response.data.pager,\r\n                    filter: response.data.filter\r\n                })\r\n            }).catch((error) => {\r\n                console.log(\"error = \")\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg)       \r\n            })\r\n               \r\n    }\r\n\r\n    showError(msg) {\r\n        let time = 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(({ errormsg }) => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    } \r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n       SupplierDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n       SupplierDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n            )\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/suppliers/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/suppliers/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3\">\r\n                {this.state.filter && <SupplierFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 pb-3\">\r\n                            <strong> Suppliers</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"suppliers-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"suppliers-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}<i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">phone number</th>\r\n                                    <th scope=\"col\">DDC number</th>\r\n                                    <th scope=\"col\">email</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        item =>\r\n                                            <tr scope=\"row\" key={item.id}>\r\n                                                <td>{item.name}</td>\r\n                                                <td>{item.phoneNumber}</td>\r\n                                                <td>{item.ddcnumber}</td>\r\n                                                <td>{item.email}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                            </tr>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListSuppliersComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserComponent.jsx",["474","475","476"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport UserDataService from '../service/UserDataService';\r\nimport '../myStyles/Style.css';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass UserComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id || -1,\r\n            firstName: '',\r\n            lastName: '',\r\n            userName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmpassword: '',\r\n            changingpassword: this.props.match.params.id > 0 ? false : true,\r\n            countries: null,\r\n            cities: null,\r\n            filteredcities: null,\r\n            countryId: null,\r\n            cityId:''\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        let userRole = this.getUserRole();\r\n        console.log(\"component mount userRole  = \" + (userRole))\r\n       \r\n        console.log(this.state.id)\r\n        console.log(\"(this.state.id === -1 && userRole !== 'ROLE_Admin') = \" + ((this.state.id === -1 && userRole !== 'ROLE_Admin')));\r\n        if (this.state.id === -1 && userRole !== 'ROLE_Admin') {\r\n            return\r\n        }\r\n        UserDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                console.log(\"response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                   // userRole: userRole,\r\n                    firstName: response.data.firstName||'',\r\n                    lastName: response.data.lastName||'',\r\n                    userName: response.data.userName||'',\r\n                    email: response.data.email||'',\r\n                    countries: userRole === 'ROLE_Admin' ? response.data.countries : null,\r\n                    cities: userRole === 'ROLE_Admin' ? response.data.cities : null,\r\n                    filteredcities: userRole === 'ROLE_Admin' ? response.data.countryId ? \r\n                        this.filterCities([], response.data.cities, response.data.countryId): response.data.cities : null,\r\n                    countryId: userRole === 'ROLE_Admin' && response.data.countryId ? response.data.countryId : null,\r\n                    cityId: userRole === 'ROLE_Admin' && response.data.cityId ? response.data.cityId+'' : ''\r\n                })\r\n            })\r\n    }\r\n\r\n    getUserRole() {\r\n        return AuthenticationService.getLoggedUerRole();\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n        let user = {\r\n            id: this.state.id,\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            username: values.userName,\r\n            email: values.email,\r\n            password: this.state.changingpassword ? values.password : null,\r\n            cityId: this.getUserRole() === 'ROLE_Admin' ? values.cityId : null,\r\n            targetDate: values.targetDate\r\n        }\r\n        console.log(\"user to update = \" + JSON.stringify(user))\r\n        UserDataService.save(user)\r\n            .then(() => this.props.history.push('/users'))\r\n            .catch(error => {\r\n                console.log(\"error = \" + error);\r\n                //console.log(\"error.response.data = \" + JSON.stringify(error.response.data))\r\n                //let msg = error.response && typeof error.response.data == 'string' ? error.response.data :\r\n                //  error.response.data.message ? error.response.data.message : error;\r\n                let msg = Function.getErrorMsg(error);\r\n                console.log(\"msg = \" + msg);\r\n                    /*\"\" + error &&\r\n                    // error.response && error.response.data && typeof error.response.data == 'string' ?\r\n                    //error.response.data :\r\n                    error.response && error.response.data ?\r\n                    error.response.data.errors ?\r\n                        error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                            error.response.data.message : \r\n                                    error : 'something went wrong !!!';*/\r\n                           \r\n\r\n                if (msg.indexOf(\"Email\") > -1)\r\n                    actions.setErrors({ email: msg })\r\n                if (msg.indexOf(\"User name\") > -1)\r\n                    actions.setErrors({ username: msg })\r\n                if (msg.indexOf(\"Password\") > -1)\r\n                    actions.setErrors({ Password: msg })\r\n                this.showError(msg);\r\n                \r\n               \r\n    })\r\n    }\r\n\r\n   \r\n    showError(msg) {\r\n        let time = 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(({ errormsg }) => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.userName) {\r\n            errors.userName = 'required field !!!'\r\n        } else if (values.userName.length < 4) {\r\n            errors.userName = 'Enter at least 4 Characters'\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = 'required field !!!'\r\n        } else if (values.email.length < 4) {\r\n            errors.email = 'Enter at least 4 Characters'\r\n        }\r\n\r\n        if (this.state.id === -1 || this.state.changingpassword) {\r\n            if (!values.password) {\r\n                errors.password = 'required field !!!'\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Enter at least 6 Characters'\r\n            } else if (values.password != values.confirmpassword) {\r\n                errors.confirmpassword='password and confirm password don\\'t match'\r\n            }\r\n        }\r\n\r\n        if (this.getUserRole() === 'ROLE_Admin' && !values.cityId) {\r\n            errors.cityId = 'required field !!!'           \r\n        }\r\n\r\n        return errors\r\n    }\r\n\r\n   cancelForm() {\r\n      // this.props.history.push('/users')\r\n       window.history.back();\r\n    }\r\n\r\n    changePassword = () => {\r\n        this.setState({\r\n            changingpassword: this.state.changingpassword ? false : true\r\n        })\r\n    }\r\n\r\n    onFocus = event => {\r\n        console.log(\"on focus \");\r\n\r\n        if (event.target.autocomplete) {\r\n            event.target.autocomplete = \"whatever\";\r\n        }\r\n\r\n    }\r\n\r\n    filterCities(subs, cities, value) {\r\n       \r\n        subs = []\r\n        for (let i = 0; i < cities.length; i++) {\r\n\r\n            if (cities[i].filterBy == value) {\r\n                subs.push(cities[i])\r\n            }\r\n        }\r\n\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        const userRole = this.getUserRole();\r\n        let { id, firstName, lastName, userName, email, password, confirmpassword,/* countries, cities, filteredcities, countryId,*/ cityId } = this.state\r\n       \r\n        return (\r\n            <div className=\"container pt-5\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update User</h3> : <h3 className=\"mb-3\"> Add New User </h3>}\r\n                <Formik\r\n                    initialValues={{ id, firstName, lastName, userName, email, password, confirmpassword,/* countries, cities, filteredcities, countryId,*/ cityId }}\r\n                    onSubmit={(values, actions) => this.onSubmit(values, actions)}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                        ({ setFieldValue, values, dirty }) => (\r\n                            <Form className=\"d-flex flex-wrap\">\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\" style={{ width: \"100%\" }}>{this.state.errormsg}</div>}\r\n                                {console.log(\"values = \" + JSON.stringify(values))}\r\n\r\n                                <div className=\"inline w50\">\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                   \r\n                                    <fieldset className=\"form-group w90\">\r\n                                        <label>first name</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"firstName\"\r\n                                        autoComplete=\"new-password\"/>\r\n                                        <ErrorMessage name=\"firstName\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group w90\">\r\n                                        <label>last name</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"lastName\"\r\n                                            autoComplete=\"new-password\" />\r\n                                        <ErrorMessage name=\"lastName\" component=\"div\"\r\n                                            className=\"alert alert-warning\" />\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group w90\">\r\n                                        <label className=\"required-field\">user name</label>\r\n\r\n                                        <Field className=\"form-control \" type=\"text\" name=\"userName\"\r\n                                            autoComplete=\"new-password\" />\r\n                                        <ErrorMessage name=\"userName\" component=\"div\"\r\n                                            className=\"alert alert-warning \" />\r\n                                    </fieldset>\r\n\r\n                                    \r\n\r\n                                   \r\n                                    \r\n                               \r\n                                   \r\n                                {//console.log(\"userRole  = \" + (userRole))\r\n                                }\r\n                                {//console.log(\"userRole === 'ROLE_Admin' = \" + (userRole === 'ROLE_Admin'))\r\n                                }\r\n                                {//console.log(\"countries = \" + JSON.stringify(countries))\r\n                                }\r\n                                    {//console.log(\"filteredcities = \" + JSON.stringify(filteredcities))\r\n                                    }\r\n                                {//console.log(\"values.filteredcities = \" + JSON.stringify(values.filteredcities))\r\n                                }\r\n                               \r\n\r\n                               \r\n\r\n                                {userRole === 'ROLE_Admin' &&\r\n                                   \r\n                                        <fieldset className=\"inline form-group pl-0 w90\">\r\n\r\n                                            <label>Country&nbsp;</label>\r\n                                            <CustomSelect\r\n                                                className={\"\"}\r\n                                                items={this.state.countries}\r\n                                              //  value={values.countryId || ''}\r\n                                            value={this.state.countryId || ''}\r\n                                               /* onChange={(selected) => {\r\n                                                    setFieldValue(\"countryId\", selected.value);\r\n\r\n                                                    let subs = values.filteredcities;\r\n                                                    subs = this.filterCities(subs, values.cities, selected.value);\r\n                                                    // let sub = values.filteredInventoryNumbers.\r\n                                                    /*  subs = [];\r\n                                                      for (let i = 0; i < values.cities.length; i++) {\r\n\r\n                                                          if (values.cities[i].filterBy == selected.value) {\r\n                                                              subs.push(values.cities[i])\r\n                                                          }\r\n                                                      }*/\r\n                                                   // setFieldValue(\"filteredcities\", subs);\r\n                                  //  }}*/\r\n                                        onChange={(selected) => {\r\n                                            \r\n\r\n                                            let subs = this.state.filteredcities;\r\n                                            subs = this.filterCities(subs, this.state.cities, selected.value);\r\n                                            // let sub = values.filteredInventoryNumbers.\r\n                                            /*  subs = [];\r\n                                              for (let i = 0; i < values.cities.length; i++) {\r\n\r\n                                                  if (values.cities[i].filterBy == selected.value) {\r\n                                                      subs.push(values.cities[i])\r\n                                                  }\r\n                                              }*/\r\n                                            //setFieldValue(\"filteredcities\", subs);\r\n                                            // setFieldValue(\"countryId\", selected.value);\r\n                                            this.setState({\r\n                                                countryId: selected.value,\r\n                                                filteredcities:subs\r\n\r\n                                            })\r\n                                        }}\r\n                                            />\r\n                                        </fieldset>\r\n                                      \r\n                                    }\r\n\r\n                                   \r\n                                    {userRole === 'ROLE_Admin' &&\r\n\r\n                                        <fieldset className=\"form-group w90\">\r\n\r\n                                            <label className=\"required-field\">city&nbsp;</label>\r\n                                            <CustomSelect\r\n                                                className={\"\"}\r\n                                                // items={values.filteredcities || filteredcities || cities}\r\n                                                items={this.state.filteredcities || this.state.cities}\r\n                                                // value={values.cityId || ''}\r\n                                                // onChange={(selected) => setFieldValue(\"cityId\", selected.value)}\r\n                                                value={values.cityId || ''}\r\n                                                onChange={(selected) => setFieldValue(\"cityId\", selected.value)}\r\n                                            />\r\n                                            <ErrorMessage name=\"cityId\" component=\"div\"\r\n                                                className=\"alert alert-warning inline-4\" />\r\n\r\n                                        </fieldset>\r\n\r\n                                    }\r\n                                    <fieldset className=\"form-group w100\">\r\n                                        <label className=\"required-field\">email</label>\r\n                                        <Field className=\"form-control\" type=\"email\" name=\"email\"\r\n                                            autoComplete=\"new-password\" />\r\n                                        <ErrorMessage name=\"email\" component=\"div\"\r\n                                            className=\"alert alert-warning \" />\r\n                                    </fieldset>\r\n                                   \r\n                                   \r\n                                </div>\r\n                                <div className=\"inline w-50 \">\r\n                                    \r\n                                   \r\n                                    {(this.state.id > 0 && !this.state.changingpassword) &&\r\n                                        <button className=\"btn btn-mybtn mt-3 mb-3  d-flex\" onClick={this.changePassword}>change password</button>}\r\n                                    {(this.state.id > 0 && this.state.changingpassword) &&\r\n                                        <button className=\"btn btn-mybtn mt-3 mb-3  d-flex\" onClick={this.changePassword}>leave password</button>}\r\n                                    {(this.state.id < 1 || this.state.changingpassword) &&\r\n                                        <div>\r\n                                            <fieldset className=\"form-group w90\">\r\n                                                <label className=\"required-field\">password</label>\r\n                                                <Field className=\"form-control \" type=\"password\" name=\"password\"\r\n                                                    autoComplete=\"new-password\" />\r\n                                                <ErrorMessage name=\"password\" component=\"div\"\r\n                                                    className=\"alert alert-warning \" />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group w90\">\r\n                                                <label className=\"required-field\">confirm password</label>\r\n                                                <Field className=\"form-control\" type=\"password\" name=\"confirmpassword\"\r\n                                                    autoComplete=\"new-password\" />\r\n                                                <ErrorMessage name=\"confirmpassword\" component=\"div\"\r\n                                                    className=\"alert alert-warning\" />\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    }\r\n                                   \r\n                               \r\n                                </div>\r\n\r\n                                <fieldset className=\"form-group mt-5\">\r\n                                    <button className=\"btn btn-mybtn p-x-5\" type=\"submit\" disabled={!dirty}>Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryComponent.jsx",["477","478","479","480","481","482","483","484","485","486","487","488"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nclass DeliveryComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n       this.state = {\r\n            id: this.props.match.params.id,\r\n            deliveryView: this.props.match.params.deliveryView || '',\r\n            number: '',\r\n            date: '',\r\n            supplierId: '',\r\n            suppliers: [],\r\n            deliveryDetailEditVMs: [],\r\n            products: [],\r\n            index: '',\r\n            ddEditVMerror: {},           \r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        DeliveryDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                 this.setState({\r\n                    supplierId: response.data.supplierId || '',  \r\n                    number: response.data.number, \r\n                    date: response.data.date || new Date(),\r\n                    suppliers: response.data.suppliers,  \r\n                    deliveryDetailEditVMs: response.data.deliveryDetailEditVMs || [],\r\n                    products: response.data.products || []                    \r\n                });\r\n            })\r\n    }\r\n\r\n   // onSubmit = {(values, { setFieldValue })\r\n    onSubmit(values, actions) {\r\n       // formikBag.setFieldValue(\"EnumErrors\", null);\r\n        //console.log(\"in submit delivery\");\r\n       // console.log(\"in submit delivery values.date = \" + values.date);//JSON.stringify(values));\r\n       // console.log(\"in submit actions!=null = \" + (formikBag!=null));//JSON.stringify(values));\r\n        console.log(\"in submit actions = \" + JSON.stringify(actions));\r\n       // console.log(\"in submit values = \" + JSON.stringify(values));\r\n        let item = {\r\n            id: this.state.id,\r\n            date: values.date,//.toISOString(),\r\n            number: values.number,\r\n            supplierId: values.supplierId,\r\n            deliveryDetailEditVMs: values.deliveryDetailEditVMs,\r\n            deletedDetailsIds: values.deleteddds,\r\n            targetDate: values.targetDate\r\n        };\r\n        console.log(\"in submit delivery item = \" + JSON.stringify(item));\r\n        DeliveryDataService.save(item)\r\n            .then((response) => {\r\n                console.log(\"delivery submit response = \" + response.data);\r\n               let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n               this.props.history.push(path)\r\n            }).catch((error) => {\r\n               // preventDefault();\r\n              //  console.log(\"error.response.data= \" + error.response.data);\r\n               // console.log(\"delivery submit error= \" + error);\r\n                //console.log(\"delivery submit error= \" + JSON.stringify(error));\r\n              /*  this.setState({\r\n                    numErrors: error.response.data //arr\r\n                })*/\r\n\r\n               /* let errors = values.EnumErrors;\r\n                errors = error.response.data;\r\n                actions.setFieldValue(\"EnumErrors\", errors);*/\r\n               // setErrors\r\n\r\n                //values.EnumErrors = error.response.data;\r\n                actions.setFieldValue('EnumErrors', error.response.data);\r\n               // return values\r\n                //console.log(\"after error submit delivery values.supllier.id = \" + values.supplierId);//JSON.stringify(values));\r\n            })\r\n        //console.log(\"after submit delivery values.supllier.id = \" + values.supplierId);//JSON.stringify(values));\r\n    }\r\n\r\n    validate(values) {\r\n        console.log(\"validating : values.supplierId = \" + values.supplierId);\r\n        let errors = {}  \r\n        if (!values.date) {\r\n            errors.date = 'date required field !!!'\r\n        }\r\n        if (this.state.id < 0 && (!values.supplierId || values.supplierId == 'undefined')) {\r\n            errors.supplierId = 'required field !!!'\r\n        }       \r\n        if (values.deliveryDetailEditVMs.length < 1) {\r\n            errors.deliveryDetailEditVMs = 'delivery must have products !!!'\r\n        }\r\n        console.log(\"in validate delivery values errors = \" + JSON.stringify(errors));\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        window.history.back();\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ ddEditVMerror: null })\r\n    }\r\n\r\n    onChangeQuantity(e, values, setFieldValue) {\r\n        console.log(\"in on count change \");\r\n        const productNums = [...values.ddEditVM.productNums];\r\n        const quantity = e.target.value || 0;\r\n        const previousQuantity = parseInt(values.ddEditVM.quantity || '0');\r\n     if (previousQuantity < quantity) {\r\n        for (let i = previousQuantity; i < quantity; i++) {\r\n            productNums.push({ value: '', name: '' });\r\n        }\r\n     } else {\r\n        for (let i = previousQuantity; i >= quantity; i--) {\r\n            let num = productNums.splice(i, 1);\r\n            if (num[0] !== undefined && values.ddEditVM.id !== '') {\r\n               if ( num[0].value !== '') {\r\n                    let deletedNums = values.ddEditVM.deletedNums || [];\r\n                    deletedNums.push(num[0].value);\r\n                    setFieldValue(\"ddEditVM.deletedNums\", deletedNums);                   \r\n                } else {\r\n                    let updatedNums = values.ddEditVM.updatedProductNums || [];\r\n                    let index = updatedNums.findIndex(x => x.value == '-' + i);\r\n                    if (index > -1) updatedNums.splice(index, 1);\r\n                    setFieldValue(\"ddEditVM.updatedProductNums\", updatedNums);\r\n                }\r\n            }\r\n        }}\r\n        setFieldValue(\"ddEditVM.productNums\", productNums);\r\n        setFieldValue(\"ddEditVM.quantity\", e.target.value);\r\n    }\r\n\r\n    onUpdateProductNums(e, id, values, setFieldValue) {\r\n        let updatedProductNums = values.ddEditVM.updatedProductNums || [];        \r\n        let index = updatedProductNums.findIndex(x => x.value == id);\r\n         if (index < 0)\r\n            updatedProductNums.push({ value: id, name: e.target.value });\r\n        else\r\n            updatedProductNums[index].name = e.target.value;\r\n\r\n        setFieldValue(`ddEditVM.updatedProductNums`, updatedProductNums)\r\n    }\r\n\r\n    resetddEditVMForm(values, setFieldValue) {\r\n        let VM = values.ddEditVM;\r\n        VM = {\r\n            id: '', productId: 'undefined', productName: '', quantity: '', pricePerOne: '', productNums: []\r\n        };\r\n        setFieldValue(\"ddEditVM\", VM);\r\n        setFieldValue(\"index\", '');\r\n        setFieldValue(\"ddEditVMerror\", {});\r\n        setFieldValue(\"productNumErrors\", []);\r\n    }\r\n\r\n    render() {\r\n       \r\n        let { id, number, date, supplierId, suppliers, deliveryDetailEditVMs, products, index, ddEditVMerror} = this.state ;\r\n        let ddEditVM = { id: '', productId: '', productName: '', quantity: '', pricePerOne: '', productNums: [], updatedProductNums: [], deletedNums: []};  \r\n        let deleteddds = [];    \r\n        let productNumErrors = []; // client side validation\r\n        let EnumErrors = null;//[];// from server\r\n\r\n        console.log(\"rendering\");\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Delivery</h3> : <h3 className=\"mb-3\"> Add New Delivery </h3>}\r\n                <Formik\r\n                    initialValues={{\r\n                        id, number, date, supplierId, suppliers, deliveryDetailEditVMs, products, index, ddEditVMerror, ddEditVM, deleteddds\r\n                        , productNumErrors, EnumErrors\r\n                    }}\r\n                    //onSubmit={this.onSubmit}\r\n                    // onSubmit={(values, { setFieldValue }) => this.onSubmit(values, { setFieldValue })}\r\n                    onSubmit={async (values, actions) => {\r\n\r\n                       // await new Promise(resolve => setTimeout(resolve, 500));\r\n                        this.onSubmit(values,actions)\r\n                       /* actions.setFieldValue(\"email\", values.email);\r\n                        actions.setFieldValue(\"name\", \"\");\r\n                        actions.setSubmitting(false);*/\r\n                    }}\r\n                    validateOnChange={true}\r\n                    validateOnBlur={true}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {({ dirty, isSubmitting, touched, setFieldValue, values }) => (\r\n                            <Form>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>number</label>\r\n                                    <Field className=\"form-control inline-2-5\" type=\"text\" name=\"number\" disabled\r\n                                    />                                   \r\n                                </fieldset>\r\n                                <fieldset className=\"d-flex align-items-top\">\r\n                                <fieldset className=\"d-inline-block\">\r\n                                    <label className=\"required-field\">date</label>\r\n                                    <div>\r\n                                    <DatePicker\r\n                                            className=\"form-control inline-2-5\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                            locale=\"en-GB\"\r\n                                            selected={(values.date && new Date(values.date))}\r\n                                            maxDate={new Date()}\r\n                                            onChange={date => {\r\n                                               // console.log(\"items.x.date = \" + values.date);\r\n                                                //console.log(\"date changed = \" + date);\r\n                                                setFieldValue(\"date\", date);\r\n                                                //console.log(\"values.date = \"+values.date);\r\n                                            }} />                                   \r\n                                        </div>\r\n                                        <ErrorMessage name=\"date\" component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01\" />\r\n                                </fieldset>                                   \r\n                                    <fieldset className=\"d-inline-block px-5\">\r\n                                    <label className=\"required-field\">supplier</label>\r\n                                    <div>\r\n                                        {console.log(\"values.supplierId\" + values.supplierId)}\r\n                                    <CustomSelect\r\n                                                id=\"supplierId\"\r\n                                                name=\"supplierId\"\r\n                                                className={\"d-inline-block inline-4\"}\r\n                                                items={suppliers}\r\n                                                value={values.supplierId}\r\n                                                onChange={(value) => {\r\n                                                    setFieldValue(\"supplierId\", value.value);                                                    \r\n                                                }}/>    \r\n                                        </div>  \r\n                                        <ErrorMessage name=\"supplierId\" component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01\" />\r\n                                    </fieldset>\r\n                                </fieldset>\r\n                            {/* ********************************************************  */}\r\n\r\n                            <div className=\"mt-5\"><h6>add/update products</h6>\r\n                            <fieldset className=\"d-flex align-items-top  mb-3\">                               \r\n                                  <div className=\"d-flex align-items-top\">\r\n                                    <div className=\"d-inline px-3\">\r\n                                            <label>product :&nbsp;</label>\r\n                                            {console.log(\"values.ddEditVM.productId\" + values.ddEditVM.productId) }\r\n                                        <CustomSelect\r\n                                            className={\"d-inline-block inline-2-5\"}\r\n                                            items={products}\r\n                                            value={values.ddEditVM.productId}\r\n                                            onChange={(selected) => {   \r\n                                                console.log(\"selected product id = \" + selected.value);\r\n                                                setFieldValue(\"ddEditVM.productName\",selected.label);\r\n                                                setFieldValue(\"ddEditVM.productId\",selected.value);\r\n                                            }}/>\r\n                                        {\r\n                                            values.ddEditVMerror.name &&\r\n                                            <div className=\"alert alert-warning d-flex mbt-01\">{values.ddEditVMerror.name}\r\n                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                    onClick={() => setFieldValue(\"ddEditVMerror.name\", null)}></i></div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"d-inline px-3\">\r\n                                        <label className=\"mb-1\">quantity :&nbsp;</label>\r\n                                            <Field className=\"form-control d-inline p-1 inline-100px\" type=\"number\" min=\"0\" name=\"ddEditVM.quantity\"\r\n                                                onChange={e => {                                                                                                 \r\n                                                    this.onChangeQuantity(e, values, setFieldValue)\r\n                                                }}/>\r\n                                        {\r\n                                            values.ddEditVMerror.quantity &&\r\n                                                <div className=\"alert alert-warning d-flex mbt-01\">{values.ddEditVMerror.quantity}\r\n                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                    onClick={() => setFieldValue(\"ddEditVMerror.quantity\", null)}></i></div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"d-inline px-3\">\r\n                                        <label className=\"mb-1\">unit price :&nbsp;</label>\r\n                                        <Field className=\"form-control d-inline p-1 inline-100px\" type=\"number\" min=\"0\" name=\"ddEditVM.pricePerOne\" />\r\n                                        {\r\n                                            values.ddEditVMerror.pricePerOne &&\r\n                                                <div className=\"alert alert-warning d-flex mbt-01\">{values.ddEditVMerror.pricePerOne}\r\n                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                    onClick={() => setFieldValue(\"ddEditVMerror.pricePerOne\", null)}></i></div>\r\n                                        }\r\n                                    </div>\r\n                                  </div>                                   \r\n                                  <div>\r\n                                    <button className=\"btn btn-mybtn mr-1\" type=\"button\" onClick={() => {                                           \r\n                                        let iserror = false;                                       \r\n                                            if (values.ddEditVM.productId == 'undefined' || values.ddEditVM.productId == '') {\r\n                                                setFieldValue(\"ddEditVMerror.name\", 'required field !!!');\r\n                                                iserror = true\r\n                                            }\r\n                                            else {\r\n                                            values.deliveryDetailEditVMs.map((x, y) => {\r\n                                               if (x.productName == values.ddEditVM.productName && (values.index === '' || (values.index !== '' && values.index !== y))) {\r\n                                                    iserror = true;                                                   \r\n                                                    let ddErrorName = values.ddEditVMerror.name;\r\n                                                    ddErrorName = values.ddEditVM.productName + ' already exist\\'s in the list!!!';\r\n                                                    setFieldValue(\"ddEditVMerror.name\", ddErrorName);\r\n                                                }\r\n                                            });\r\n                                            }\r\n                                            if (values.ddEditVM.pricePerOne == '') {\r\n                                                setFieldValue(\"ddEditVMerror.pricePerOne\", 'required field !!!');\r\n                                                iserror = true\r\n                                            }\r\n                                            if (values.ddEditVM.quantity == '') {\r\n                                                setFieldValue(\"ddEditVMerror.quantity\", 'required field !!!');\r\n                                                iserror = true\r\n                                            }\r\n                                            if (values.ddEditVM.quantity > 0) {\r\n                                                let ddErrorNums = values.productNumErrors;\r\n                                                for (let i = 0; i < values.ddEditVM.quantity; i++) {\r\n                                                    if (values.ddEditVM.productNums[i].name.length < 1) {                                                        \r\n                                                         ddErrorNums[i] = 'required field !!!';                                                      \r\n                                                        iserror = true;                                                       \r\n                                                    }\r\n                                                    else if (values.ddEditVM.productNums[i].name.length < 4) {\r\n                                                        ddErrorNums[i] = 'too short !!!';\r\n                                                        iserror = true;\r\n                                                    }\r\n                                                    else {\r\n                                                        let isSame = false;\r\n                                                        for (let j = 0; j < i; j++) {\r\n                                                            if (values.ddEditVM.productNums[i].name == values.ddEditVM.productNums[j].name) {\r\n                                                                isSame = true;\r\n                                                                iserror = true;\r\n                                                            }\r\n                                                        }\r\n                                                        ddErrorNums[i] = isSame ? 'same number exists !!!' : '';\r\n                                                    }                                                 \r\n                                                }\r\n                                                setFieldValue(\"productNumErrors\", ddErrorNums);\r\n                                            }\r\n                                        if(!iserror) {\r\n                                            if (values.index === '') {\r\n                                                let list = values.deliveryDetailEditVMs;\r\n                                                list.push(values.ddEditVM);\r\n                                                  setFieldValue(\"deliveryDetailEditVMs\", list)\r\n                                            }\r\n                                            else {\r\n                                                let list = values.deliveryDetailEditVMs;                                              \r\n                                                list[values.index] = values.ddEditVM; // edited;\r\n                                                setFieldValue(\"deliveryDetailEditVMs\", list);\r\n                                            }                                           \r\n                                           \r\n                                            this.resetddEditVMForm(values, setFieldValue)\r\n                                        }\r\n\r\n                                    }}>{values.index !== '' ? \"Update\" : \"Add\"}</button>\r\n                                        <button className=\"btn btn-mybtn btn-delete\" type=\"button\" onClick={() => {\r\n                                            this.resetddEditVMForm(values, setFieldValue)                                            \r\n                                        }}>reset</button>\r\n                                  </div>\r\n                                </fieldset>                               \r\n                                <fieldset className=\"mb-1\">\r\n                                    {\r\n                                        values.ddEditVM.productNums &&\r\n                                        values.ddEditVM.productNums.map((num, i) => \r\n                                            <div key={num.value || i} className=\"ml-3\">                                               \r\n                                                <label className=\"required-field\">inventory number {i + 1} :&nbsp;</label>\r\n                                                <Field\r\n                                                    name={`ddEditVM.productNums.${i}.name`}\r\n                                                    type=\"text\"\r\n                                                    className={'form-control d-inline-block inline-4'}\r\n                                                    onChange={e => {                                                      \r\n                                                        if (values.ddEditVM.id !== '') this.onUpdateProductNums(e, num.value || '-'+i, values, setFieldValue)\r\n                                                        setFieldValue(`ddEditVM.productNums.${i}.name`, e.target.value);                                                       \r\n                                                    }}/>  \r\n                                                {                                                   \r\n                                                    <button className=\"btn btn-mybtn btn-delete mb-1 ml-1\" type=\"button\"\r\n                                                        onClick={() => {\r\n                                                            let list = values.ddEditVM.productNums;                                                           \r\n                                                            list.splice(i, 1)\r\n                                                            setFieldValue(\"ddEditVM.productNums\", list)\r\n                                                           // if (num.value !== '') {\r\n                                                            if (values.ddEditVM.id !== '') {\r\n                                                                let updatedProductNums = values.ddEditVM.updatedProductNums || [];\r\n                                                                let index = updatedProductNums.findIndex(x => x.value === num.value || x.value === `-${i}` );\r\n                                                               \r\n                                                                if (index > -1) {\r\n                                                                    console.log(\"index = \" + index);\r\n                                                                    updatedProductNums.splice(index, 1)\r\n                                                                    setFieldValue(\"ddEditVM.updatedProductNums\", updatedProductNums)\r\n                                                                }/* else {\r\n                                                                    index = updatedProductNums.findIndex(x => x.value === `-${i}`)\r\n                                                                    console.log(\"index = \" + index);\r\n                                                                    updatedProductNums.splice(index, 1)\r\n                                                                    setFieldValue(\"ddEditVM.updatedProductNums\", list)\r\n                                                                }  */                                                        \r\n                                                                let deleted = values.ddEditVM.deletedNums || [];\r\n                                                                deleted.push(num.value)\r\n                                                                setFieldValue(\"ddEditVM.deletedNums\", deleted)\r\n                                                                }\r\n                                                            setFieldValue(\"ddEditVM.quantity\", values.ddEditVM.quantity - 1)\r\n                                                        }}>Delete</button>\r\n                                                }\r\n                                                {/*this.values&&\r\n                                                    this.values.numErrors && this.values.numErrors instanceof Array\r\n                                                    && values.index !== '' && this.values.numErrors[values.index]\r\n                                                    && this.values.numErrors[values.index][i] &&\r\n                                                    <div className=\"alert alert-warning d-inline ml-1\">                                                       \r\n                                                        {this.values.numErrors[values.index][i]}\r\n                                                    </div>\r\n                                                */}\r\n                                                {/*\r\n                                                    this.state.numErrors && this.state.numErrors instanceof Array\r\n                                                    && values.index !== '' && this.state.numErrors[values.index]\r\n                                                    && this.state.numErrors[values.index][i] &&\r\n                                                    <div className=\"alert alert-warning d-inline ml-1\">                                                       \r\n                                                        {this.state.numErrors[values.index][i]}\r\n                                                    </div>\r\n                                                */}\r\n                                                {\r\n                                                    values.EnumErrors && values.EnumErrors instanceof Array\r\n                                                    && values.index !== '' && values.EnumErrors[values.index]\r\n                                                    && values.EnumErrors[values.index][i] &&\r\n                                                    <div className=\"alert alert-warning d-inline ml-1\">                                                       \r\n                                                        {values.EnumErrors[values.index][i]}\r\n                                                    </div>\r\n                                                }\r\n                                                {\r\n                                                    values.productNumErrors[i] &&\r\n                                                    <div className=\"alert alert-warning d-inline ml-1\">                                                        \r\n                                                        {\r\n                                                            values.productNumErrors[i] \r\n                                                        }\r\n                                                        <i class=\"fa fa-close ml-3 pt-1\"\r\n                                                                onClick={() => setFieldValue(`productNumErrors.${i}`, null)}></i>                                                       \r\n                                                    </div>\r\n                                                }                                                  \r\n                                            </div>\r\n                                        )}\r\n                                </fieldset>\r\n                            </div>\r\n                                {/*************************************************************************/}\r\n\r\n                                <fieldset>\r\n                                    <ErrorMessage name=\"deliveryDetailEditVMs\" component=\"div\"\r\n                                        className=\"alert alert-warning mbt-01\" />\r\n                                </fieldset>\r\n                                {/*\r\n                                    this.state.numErrors &&\r\n                                    <div className=\"alert alert-warning d-flex mbt-01\">Errors found, save not successful !!!</div>\r\n                            */}\r\n                            {\r\n                                values.EnumErrors &&\r\n                                <div className=\"alert alert-warning d-flex mbt-01\">Errors found, save not successful !!!</div>\r\n                            }     \r\n                            <div className=\"mt-3 \"><h6 className=\"required-field\">products</h6>\r\n                                {// <p>enum errors</p>\r\n                                }\r\n                                {//values.EnumErrors && <p>values.EnumErrors = {JSON.stringify(values.EnumErrors)}</p>\r\n                                }\r\n                                {//console.log(\"JSON.stringify(values.EnumErrors) = \" + values.EnumErrors ? JSON.stringify(values.EnumErrors):\"null\") \r\n                                }\r\n                                {//console.log(\"1 \" + Array.isArray(values.numErrors))\r\n                                }\r\n                                {//values.numErrors && <p>values.numErrors instanceof Array =  { Array.isArray(values.numErrors)?\"true\":\"false\"}</p>\r\n                                }\r\n                                {//this.values && this.values.numErrors && <p>this.values.numErrors instanceof Array = {Array.isArray(this.values.numErrors) ? \"true\" : \"false\"}</p>\r\n                                }\r\n                                    <table className=\"table x-Table\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Product</td>\r\n                                                <td>Quantity</td>\r\n                                                <td>Unit Price</td>\r\n                                            <td style={{ width: '173px' , padding: '.35rem .5rem' }}></td>\r\n                                             </tr>\r\n                                    {\r\n                                            deliveryDetailEditVMs.map((dd, index) =>\r\n                                                <>\r\n                                            <tr key={index} className={values.index === index ? \"table-active\" : \"\"}>\r\n                                                    <td>{dd.productName}</td>\r\n                                                    <td>{dd.quantity}</td>\r\n                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                        style: \"currency\",\r\n                                                        currency: \"BGN\",\r\n                                                        maximumFractionDigits: 2\r\n                                                    }).format(dd.pricePerOne)}</td>\r\n                                                        <td style={{ width: '173px' , padding: '.35rem .5rem' }}>\r\n                                                            <button className=\"btn btn-mybtn mr-1\" type=\"button\" onClick={() => { \r\n                                                    console.log(\"index = \" + index);                                                  \r\n                                                        setFieldValue(\"index\", index);\r\n                                                        setFieldValue(\"ddEditVM\", dd)\r\n                                                    }}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" type=\"button\"\r\n                                                        onClick={() => {\r\n                                                            let list = values.deliveryDetailEditVMs;                                                            \r\n                                                            list.splice(index, 1)\r\n                                                            setFieldValue(\"deliveryDetailEditVMs\", list)                                                           \r\n                                                            if (dd.id > 0) {\r\n                                                                let deleted = values.deleteddds;\r\n                                                                deleted.push(dd.id)\r\n                                                                setFieldValue(\"deleteddds\", deleted)                                                                \r\n                                                            }\r\n                                                            if (values.index == index) {\r\n                                                                this.resetddEditVMForm(values, setFieldValue)\r\n                                                            }                                                           \r\n                                                        }}>Delete</button>\r\n                                                        </td>\r\n                                                        {\r\n                                                            values.EnumErrors && values.EnumErrors[index] &&\r\n                                                            <td style={{ width: '4%', padding: '.75rem' }}>\r\n                                                            <div className=\"alert alert-warning d-inline p-2\">\r\n                                                                <i class=\"fa fa-bomb \"\r\n                                                                    onClick={() => { }}></i>\r\n                                                                </div>\r\n                                                            </td>\r\n                                                        }\r\n                                                       \r\n                                                        {/*\r\n                                                            values.numErrors && values.numErrors[index]\r\n                                                           // || (values.numErrors && deliveryDetailEditVMs.length == 1 && index == 0 )\r\n                                                            &&\r\n                                                            <td style={{ width: '4%', padding: '.75rem' }}>\r\n                                                            <div className=\"alert alert-warning d-inline p-2\">\r\n                                                                <i class=\"fa fa-bomb \"\r\n                                                                    onClick={() => { }}></i>\r\n                                                                </div>\r\n                                                            </td>\r\n                                                       */ }\r\n                                                       \r\n                                                        {/*\r\n                                                            this.state.numErrors && this.state.numErrors[index] &&\r\n                                                            <td style={{ width: '4%', padding: '.75rem' }}>\r\n                                                            <div className=\"alert alert-warning d-inline p-2\">\r\n                                                                <i class=\"fa fa-bomb \"\r\n                                                                    onClick={() => { }}></i>\r\n                                                                </div>\r\n                                                            </td>\r\n                                                        */}\r\n                                                </tr>\r\n                                                \r\n                                                    </>\r\n                                    )}\r\n                                        </tbody>\r\n                                    </table>                                                  \r\n                                <div className=\"mt-5 ml-3\">\r\n                                    {isSubmitting ? console.log(\"isSubmitting = true\") : console.log(\"isSubmitting = false\")}\r\n                                    {!dirty ? console.log(\"!dirty = true\") : console.log(\"dirty\")}\r\n                                    <button className=\"btn btn-mybtn p-x-5\" disabled={!dirty||isSubmitting} type=\"submit\">Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>Cancel</button>\r\n                                </div>\r\n                            </div>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeliveryComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductDetails.jsx",["489","490","491","492","493","494","495"],"import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport ProductDetailFilter from './Filters/ProductDetailFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport ProductDetailInnerComponent from './ProductDetailInnerComponent';\r\n\r\nimport AuthenticationService from '../service/AuthenticationService'\r\n\r\nconst headers = [\r\n    { label: \"inventory number\", key: \"inventoryNumber\" },\r\n    { label: \"discarded\", key: \"isDiscarded\" },\r\n    { label: \"available\", key: \"isAvailable\" }\r\n    \r\n];\r\n\r\nconst userRole = AuthenticationService.getLoggedUerRole();\r\n\r\nclass ListProductDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            showdts: [],\r\n            pdUpdateShow: {\r\n                pd: {}, show: false\r\n            },\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        ProductDetailDataService.retrieveAll(this.state.search)\r\n            .then(\r\n            response => {\r\n               // console.log(\"response.data = \" + response.data);\r\n              //  console.log(\"response.data = \" + JSON.stringify(response.data));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter\r\n                });\r\n               // console.log(\"items = \" + JSON.stringify(this.state.items));\r\n                }\r\n        ).catch(error => {\r\n            this.setState({ errormsg: '' + error })\r\n        })\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        ProductDetailDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        ProductDetailDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n            }\r\n        ).catch(error => {\r\n            console.log(\"error = \" + JSON.stringify(error));\r\n            //console.log(\"error.response.data = \" + error.response.data);\r\n            this.setState({ errormsg:''+error })\r\n        })\r\n    }\r\n\r\n    updateClicked(item, x) {\r\n       \r\n            /* let messages = this.state.message;\r\n             if (messages != null )\r\n                 messages = null;*/\r\n\r\n            let show = this.state.pdUpdateShow;\r\n            show.show = !show.show;\r\n            if (show.show == true) {\r\n                show.pd = JSON.parse(JSON.stringify(item))\r\n                show.x = x;\r\n            } else {\r\n                show.error = ''\r\n            }\r\n            this.setState({\r\n                pdUpdateShow: show,\r\n                message: null,\r\n                pdmessage: [],\r\n                ddmessage: []\r\n            });\r\n        \r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/productdetails/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n\r\n                {this.state.pdUpdateShow && this.state.pdUpdateShow.show == true &&\r\n                    <ProductDetailInnerComponent\r\n                        pdUpdateShow={this.state.pdUpdateShow}\r\n                    items={this.state.items}\r\n                    filter={this.state.filter}\r\n                        message={this.state.message}\r\n                       // suppliers={this.state.filter.suppliers}\r\n                        updateClicked={() => this.updateClicked(null)}\r\n                        setItems={(value) => this.setState({ items: value })}\r\n                        setMessage={(value) => this.setState({ message: `update successful` })}\r\n                    //setdeliveryUpdateShow={(value) => this.setState({ deliveryUpdateShow: value })} \r\n                    />}\r\n                {this.state.filter && <ProductDetailFilter {...this.state.filter} />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2\">\r\n                            <strong> Inventory</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                {/*<button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>*/}\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"product-details-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"product-details-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormas: null })}></i></div>}\r\n                       \r\n\r\n                        <table className=\"table border-bottom my-table\" style={{ width: '100%' }}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\" ></th>\r\n                                    <th scope=\"col\">inventory number</th>\r\n                                   \r\n                                    <th scope=\"col\">product name</th>\r\n                                   \r\n                                    <th>date created</th> \r\n                                    <th scope=\"col\" >price</th>\r\n                                    <th scope=\"col\" className=\"wxxs\">discarded</th>\r\n                                    <th scope=\"col\" className=\"wxxs\">condition</th>\r\n                                    {userRole == 'ROLE_Mol' && <th className=\"wxxs\">profiles</th>}\r\n                                     \r\n                                    {/*<th >amortization</th>\r\n                                    <th >total amortization</th>\r\n                                     <th >delivery</th>\r\n                                   */}\r\n                                    <th ></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        (item, i) =>\r\n                                            <>\r\n                                                <tr scope=\"row\" key={item.id}>\r\n                                                    <td className=\"hoverable\"\r\n                                                        onClick={() => {\r\n                                                            let showdts = this.state.showdts;\r\n                                                            if (showdts == undefined) showdts = [];\r\n                                                            showdts[i] = showdts[i] ? false : true;\r\n                                                            this.setState({ showdts: showdts })\r\n                                                        }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                            aria-hidden=\"true\"></i></td>\r\n                                                <td>{item.inventoryNumber}</td>                                                \r\n                                                <td>{item.productName}</td>                                               \r\n                                                <td>{new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                    month: \"long\",\r\n                                                    day: \"2-digit\",\r\n                                                    year: \"numeric\", \r\n                                                    }).format(new Date(item.dateCreated))}</td>\r\n                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                        style: \"currency\",\r\n                                                        currency: \"BGN\",\r\n                                                        maximumFractionDigits: 2\r\n                                                    }).format(item.price)}</td>\r\n                                                <td>{item.discarded ? 'yes' : 'no'}</td>\r\n                                                <td>{item.econdition}</td>\r\n                                                {userRole == 'ROLE_Mol' && <td className=\"hoverable\"\r\n                                                    onClick={() => {\r\n                                                        this.props.history.push(`/userprofiles?Filter.productDetailId=${item.id}`);\r\n                                                    }}><i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i></td>}\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item, i)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                            </tr>\r\n                                                {this.state.showdts && this.state.showdts[i] &&\r\n                                                    <tr >                                                    \r\n                                                    <td colSpan=\"2\" className=\"pt-3 pb-3 bold-border-bottom\"></td>\r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">\r\n                                                        delivery number : &nbsp;\r\n                                                    {item.deliveryNumber}</td>\r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">type :&nbsp;{item.productType}</td> \r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">                                                   \r\n                                                        amortization : &nbsp;\r\n                                                    {item.amortizationPercent}&nbsp;%</td>                                                   \r\n                                                    <td colSpan=\"4\" className=\"pt-3 pb-3 bold-border-bottom\">                                                                                                                \r\n                                                    total amortization : &nbsp;\r\n                                                    {new Intl.NumberFormat(\"en-GB\", {\r\n                                                    style: \"currency\",\r\n                                                    currency: \"BGN\",\r\n                                                    maximumFractionDigits: 2\r\n                                                    }).format(item.totalAmortization)}                                                       \r\n                                                    &emsp;&emsp;&emsp;                                                               \r\n                                                    </td>\r\n                                                    \r\n                                                    \r\n                                                    </tr>}                                                \r\n                                               </>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListProductDetails","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductDetailFilter.jsx",["496","497","498","499","500","501","502","503","504","505","506","507","508","509"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass ProductDetailFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            priceMoreThan: props.priceMoreThan,\r\n            priceLessThan: props.priceLessThan,\r\n            isDiscarded: props.isDiscarded,\r\n           // isAvailable: props.isAvailable,\r\n            econdition: props.econdition,\r\n            econditions: props.econditions,\r\n            deliveryNumbers: props.deliveryNumbers,\r\n            deliveryId: props.deliveryId,\r\n\r\n            productNames: props.productNames,\r\n            productId: props.productId,           \r\n            inventoryNumbers: props.inventoryNumbers,\r\n            filteredInventoryNumbers: props.inventoryNumbers,\r\n            id: props.id,\r\n           // inventoryNumber: props.inventoryNumber,\r\n            productTypes: props.productTypes,\r\n            productType: props.productType,\r\n            dateCreatedBefore: props.dateCreatedBefore,\r\n            dateCreatedAfter: props.dateCreatedAfter,\r\n\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n           \r\n            prefix: props.prefix,            \r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            //console.log('field key =' + key);\r\n            //console.log('field value =' + value);\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                /*if ((values.productType === 'MA' && key === 'amortizationPercentMoreThan') ||\r\n                    (values.productType === 'MA' && key === 'amortizationPercentLessThan') ||\r\n                    (key === 'maxmore') ||\r\n                    (key === 'minless') ||\r\n                    (key === 'maxtotal') ||\r\n                    (key === 'mintotal')) { }\r\n                else*/\r\n                if (key.startsWith('date')) {\r\n                    value = (new Date(value)).toISOString();\r\n                    value = value.substring(0, value.indexOf('T'))\r\n                }\r\n                 newPath += prefix + '.' + key + '=' + value + '&' \r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n\r\n        window.location.href = window.location.pathname;\r\n        // values.name = null;\r\n\r\n        // this.props.history.push('/products');\r\n        /* this.setState({\r\n             all: '',\r\n             name: '',\r\n             productType: '',\r\n             amortizationPercentMoreThan: '',\r\n             amortizationPercentLessThan: '',\r\n             totalCountMoreThan: '',\r\n             totalCountLessThan:''\r\n         });\r\n         console.log('in reset form ');*/\r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, priceMoreThan, priceLessThan, isDiscarded, /*isAvailable,*/ deliveryNumbers, deliveryId, econdition, econditions,\r\n            productNames, productId, inventoryNumbers, id, productTypes, productType, dateCreatedBefore,//inventoryNumber\r\n            dateCreatedAfter, amortizationPercentMoreThan, amortizationPercentLessThan, filteredInventoryNumbers} = this.state\r\n\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    all, priceMoreThan, priceLessThan, isDiscarded, /*isAvailable,*/ deliveryNumbers, deliveryId, econdition, econditions,\r\n                    productNames, productId, inventoryNumbers, id, productTypes, productType, dateCreatedBefore,\r\n                    dateCreatedAfter, amortizationPercentMoreThan, amortizationPercentLessThan, filteredInventoryNumbers//inventoryNumber,\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>product&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3 foo\"}\r\n                                    items={productNames}\r\n                                    value={values.productId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"productId\", selected.value);\r\n                                        let subs = values.filteredInventoryNumbers;\r\n                                       // let sub = values.filteredInventoryNumbers.\r\n                                        subs = [];\r\n                                        for (let i = 0; i < values.inventoryNumbers.length; i++) {\r\n\r\n                                            if (values.inventoryNumbers[i].filterBy == selected.value) {\r\n                                                subs.push(values.inventoryNumbers[i])\r\n                                            }\r\n                                        }\r\n                                        setFieldValue(\"filteredInventoryNumbers\", subs);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            {console.log(\"values.inventoryNumbers.length = \" + values.inventoryNumbers.length)}\r\n                            {console.log(\"values.filteredInventoryNumbers.length = \" + values.filteredInventoryNumbers.length)}\r\n                            <div className=\"inline\">\r\n                                <label>inventory number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4 foo\"}\r\n                                    items={values.filteredInventoryNumbers}\r\n                                    value={values.id}\r\n                                    onChange={(selected) => setFieldValue(\"id\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            {!this.props.short&&\r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">price&nbsp;</label>\r\n                                <div className=\"inline px-2 border \" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-100px\" type=\"number\" min=\"0\" max={values.priceLessThan || \"\"}\r\n                                            name=\"priceMoreThan\" />\r\n                                        <label className=\"pl-1 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-100px\" type=\"number\" min={values.priceMoreThan || 0}\r\n                                            name=\"priceLessThan\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">date created&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">after&nbsp;</label>\r\n                                    <div className=\"inline \">\r\n                                        <DatePicker className=\"form-control in-inline inline-2 foo\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                            locale=\"en-GB\"\r\n                                            maxDate={values.dateCreatedBefore}\r\n                                            selected={values.dateCreatedAfter && new Date(values.dateCreatedAfter)}\r\n                                            isClearable\r\n                                            onChange={date => setFieldValue(\"dateCreatedAfter\", date)}\r\n                                            shouldCloseOnSelect={true}\r\n                                            showYearDropdown\r\n                                            dropdownMode=\"select\"/>\r\n                                    </div>\r\n\r\n                                    <label className=\"pl-1 mb-1 fw-s\">before&nbsp;</label>\r\n                                    <DatePicker className=\"form-control in-inline inline-2 foo\"\r\n                                        dateFormat=\"MMMM dd yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        minDate={values.dateCreatedAfter}\r\n                                        selected={values.dateCreatedBefore && new Date(values.dateCreatedBefore)}\r\n                                        isClearable\r\n                                        onChange={date => setFieldValue(\"dateCreatedBefore\", date)}\r\n                                        highlightDates={new Date()}\r\n                                        shouldCloseOnSelect={true}\r\n                                        showYearDropdown\r\n                                        dropdownMode=\"select\"/>\r\n                                </div>\r\n                            </div>\r\n                            {!this.props.short &&\r\n                            <>\r\n                            {values.productTypes &&\r\n                                <div className=\"inline\">\r\n                                    <label>product type :</label>\r\n                                    {\r\n                                        productTypes.map((type) =>\r\n                                            <div className=\"inline\">\r\n                                                <Field\r\n                                                    className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                    value={type.value} checked={type.name === values.productType}\r\n                                                    onChange={(value) => {\r\n                                                        console.log('value of checked = ' + value.target.value);\r\n                                                        setFieldValue(\"productType\", value.target.value == values.productType ? null : value.target.value);\r\n                                                    }}\r\n                                                />\r\n                                                {type.name}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            }\r\n                               \r\n\r\n                                {/*values.productType == 'STA' ? \"inline d-none\" : \"inline\"*/}  \r\n                                <div className=\"inline\"\r\n                                >\r\n                                    <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-75px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                            name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan} />&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-75px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                            name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan}/>&nbsp;%\r\n                                        </div>\r\n                            </div>\r\n                            {values.deliveryNumbers &&\r\n                                <div className=\"inline\">\r\n                                    <label>delivery&nbsp;</label>\r\n                                    <CustomSelect\r\n                                        className={\"inline inline-2\"}\r\n                                        items={deliveryNumbers}\r\n                                        value={values.deliveryId}\r\n                                        onChange={(selected) => setFieldValue(\"deliveryId\", selected.value)}\r\n                                    />\r\n                                </div>\r\n                                }\r\n\r\n                                {values.econditions &&\r\n                                    <div className=\"inline\">\r\n                                        <label>condition :</label>\r\n                                        {\r\n                                            econditions.map((type) =>\r\n                                                <div className=\"inline\">\r\n                                                    <Field\r\n                                                        className=\"mx-2\" type=\"checkbox\" name=\"econdition\"\r\n                                                        value={type.value} checked={type.name === values.econdition}\r\n                                                        onChange={(value) => {\r\n                                                            console.log('value of checked = ' + value.target.value);\r\n                                                            setFieldValue(\"econdition\", value.target.value == values.econdition ? null : value.target.value);\r\n                                                        }}\r\n                                                    />\r\n                                                    {type.name}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                }\r\n                           \r\n\r\n                            <div className=\"inline pr-2 mr-2\">\r\n                                <Field\r\n                                    className=\"mr-2 pt-3\" type=\"checkbox\" name=\"isDiscarded\"                                    \r\n                                    value={true} checked={values.isDiscarded == true}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isDiscarded\", values.isDiscarded == true ? null : true);\r\n                                    }}\r\n                                />discarded\r\n                                <Field\r\n                                    className=\"mx-2 pt-3\" type=\"checkbox\" name=\"isDiscarded\"\r\n                                    value={false} checked={values.isDiscarded == false}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isDiscarded\", values.isDiscarded == false ? null : false);\r\n                                    }}\r\n                                />not discarded\r\n                            </div>\r\n\r\n                                {/*  <div className=\"inline pr-2 mr-2\">\r\n                                <Field\r\n                                    className=\"mr-2 pt-3\" type=\"checkbox\" name=\"isAvailable\"\r\n                                    value={true} checked={values.isAvailable == true}\r\n                                    onChange={(value) => {\r\n                                        // console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isAvailable\", values.isAvailable == true ? null : true);\r\n                                    }}\r\n                                />available\r\n                                <Field\r\n                                    className=\"mx-2 pt-3\" type=\"checkbox\" name=\"isAvailable\"\r\n                                    value={false} checked={values.isAvailable == false}\r\n                                    onChange={(value) => {\r\n                                        // console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isAvailable\", values.isAvailable == false ? null : false);\r\n                                    }}\r\n                                />missing\r\n                            </div>*/}\r\n\r\n                               \r\n\r\n\r\n                                </>\r\n\r\n                        }\r\n\r\n\r\n                           \r\n                                \r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"reset\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductDetailFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserProfilesComponent.jsx",["510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550"],"import React, { Component } from 'react';\r\nimport UserProfileDataService from '../service/UserProfileDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserProfileFilter from './Filters/UserProfileFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Link, Route, withRouter} from 'react-router-dom'\r\n\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport UserProfileInnerComponent from './UserProfileInnerComponent';\r\nimport TimelineInnerComponent from './TimelineInnerComponent';\r\nimport Function from './Shared/Function';\r\nimport OrderByComponent from './OrderByComponent';\r\nimport DeleteAllInnerComponent from './DeleteAllInnerComponent'\r\n\r\n\r\n\r\nconst headers = [\r\n    { label: \"UserName\", key: \"userName\" },\r\n    { label: \"product\", key: \"productName\" },\r\n    { label: \"Inventory Number\", key: \"inventoryNumber\" },\r\n    { label: \"Given at\", key: \"givenAt\" },\r\n    { label: \"Returned at\", key: \"returnedAt\" },\r\n   \r\n];\r\n\r\n\r\n\r\nclass ListUserProfilesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: {},\r\n            search: window.location.search || '',\r\n            searchBackUp:'',\r\n            alldata: [],\r\n            showdts: [],\r\n            i: null,\r\n            selectedUserId: null,\r\n            profileShow: {\r\n                profile: {}, show: false\r\n            },\r\n            timeline: {\r\n                show:false\r\n            },\r\n\r\n            filterKey: 0,\r\n            orderBy: {name:'', direction:''}\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n       // this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n        this.searchLink = React.createRef();\r\n        this.child = React.createRef();\r\n        this.filter = React.createRef();\r\n        this.eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribe\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"component did mount\");\r\n        this.refresh();\r\n        this.eventSource.onmessage = e =>\r\n            this.setState({servermsg : e.data});//console.log(\"msg from sse = \" + JSON.parse(e.data));\r\n    }\r\n\r\n    /*refresh() {\r\n        this.getServerData(this.state.search)\r\n    }*/\r\n\r\n    refresh(search) {\r\n        if (search == null) search = this.state.search;\r\n        UserProfileDataService.retrieveAll(search)\r\n            .then(\r\n                response => {\r\n                    //console.log(\"refresh got new items item = \" + JSON.stringify(response.data));\r\n                    //console.log(\"response.data.filter && response.data.filter.fitersSet = \" + (response.data.filter && response.data.filter.fitersSet));\r\n                    // console.log(\"refresh got new response data = \"+JSON.stringify(response.data.filter));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems || [],\r\n                        pager: response.data.pager,\r\n                       // filter: this.getFilter(response.data.filter),//response.data.filter && response.data.filter.fitersSet ? this.state.filter : response.data.filter || {},\r\n                        //newFilter: response.data.filter,\r\n                        i: null,\r\n                        selectedUserId: null,\r\n\r\n                    });\r\n\r\n                    this.getFilter(response.data.filter)\r\n                }\r\n        ).catch((error) => {\r\n\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg, 5);\r\n               // this.setState({\r\n               //     errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n               // })\r\n            })\r\n    }\r\n\r\n    showError(msg, time) {\r\n        // let time = 10;\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(({ errormsg }) => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }      \r\n\r\n    getFilter(newFilter ) {\r\n        if (this.state.filterKey == 0 || !newFilter.filtersSet) {\r\n            //return newFilter;\r\n            this.setState({\r\n                filter:newFilter,\r\n                filterKey: this.state.filterKey + 1\r\n            })\r\n        }\r\n      \r\n            if (newFilter.filtersSet) {\r\n                let filter = this.state.filter;\r\n                newFilter.userNames = filter.userNames;\r\n                newFilter.productNames = filter.productNames;\r\n                newFilter.inventoryNumbers = filter.inventoryNumbers;\r\n                this.setState({ filter: newFilter })\r\n                //return newFilter;\r\n            }\r\n           \r\n    }   \r\n    \r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        UserProfileDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                let data = response.data.items||response.data.daoitems;\r\n                data = this.getFormattedData(data);\r\n                    /*data.map(row => ({\r\n                    ...row, givenAt: new Intl.DateTimeFormat(\"en-GB\", {\r\n                        month: \"numeric\",\r\n                        day: \"2-digit\",\r\n                        year: \"numeric\",\r\n                    }).format(new Date(row.givenAt))\r\n                    , returnedAt: new Intl.DateTimeFormat(\"en-GB\", {\r\n                        month: \"numeric\",\r\n                        day: \"2-digit\",\r\n                        year: \"numeric\",\r\n                    }).format(new Date(row.returnedAt))\r\n                }));*/\r\n                this.setState({ alldata:data });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getFormattedData = (data) => {        \r\n        data = data && data.map(row => ({\r\n            ...row, givenAt: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.givenAt))\r\n            , returnedAt: row.returnedAt ? new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.returnedAt)) : null\r\n        }));\r\n\r\n        return data;\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        newSearch += 'Filter.LongView=true';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        UserProfileDataService.delete(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error)//error.response && typeof error.response.data == 'string' ? error.response.data : error;\r\n            this.showError(msg, 4);\r\n           // let msg = error.response && typeof error.response.data == 'string' ? error.response.data : error;\r\n           // this.setState({\r\n           //     errormsg: msg\r\n           // })\r\n        })\r\n    }\r\n\r\n    deleteAllbefore(date, id) {\r\n\r\n        UserProfileDataService.deleteAllBefore(date, id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: response.data + ` profiles have been Deleted successfully` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            //console.log(\"error = \" + JSON.stringify(error))\r\n            let msg = Function.getErrorMsg(error)//error.response && typeof error.response.data == 'string' ? error.response.data : error;\r\n            this.showError(msg, 4);\r\n            // console.log(\"msg = \" + JSON.stringify(msg))\r\n               // this.setState({\r\n                //    errormsg: msg\r\n               // })\r\n            })\r\n    }\r\n\r\n   /* updateClicked(id) {\r\n        this.props.history.push(`/userprofiles/${id}`)\r\n    }*/\r\n    updateTimeline(value) {\r\n        if (this.state.timeline.show == value) return;\r\n       /* if (value == true && this.state.filter&&(!this.state.filter.productDetailId || !this.state.filter.givenAfter) ) {\r\n            //let msg = error.response && typeof error.response.data == 'string' ? error.response.data : error;\r\n            this.setState({\r\n                errormsg: `to update time line search for inventory first (by selecting inventory number from above search) ,\r\n                                and at least limit the timeline given after, thank you!!!`\r\n            })\r\n            return;\r\n        }*/       \r\n        let timeline = this.state.timeline;\r\n        timeline.show = value;\r\n        this.setState({\r\n            timeline: timeline,\r\n            message: null,\r\n            timeLineFilter: value ? JSON.parse(JSON.stringify(this.state.filter)) : null\r\n        });\r\n\r\n        if (value) {\r\n            let backUp = this.state.search;\r\n            this.setState({\r\n                searchBackUp: backUp,\r\n                //search:''\r\n            })\r\n            this.updateLink('')\r\n        }\r\n\r\n        if (!value) {\r\n            // this.filter.current.showOriginal(this.state.filter);\r\n            //this.updateLink(this.state.searchBackUp)\r\n            this.setState({\r\n                search: this.state.searchBackUp,\r\n                filterKey: this.state.filterKey + 1,\r\n\r\n            }, () => { this.refresh(); this.searchLink.current.click() }\r\n\r\n            )\r\n           // this.setState({filter: this.state.filter})\r\n           \r\n        }\r\n\r\n        /*let filter = this.state.filter;\r\n        if (filter.userId != null || filter.myProfile != null) {\r\n\r\n            let search = `userprofiles?timelineView=true&Filter.productDetailId=` + filter.productDetailId;\r\n            search += filter.givenAfter != null ? `&Filter.givenAfter=` + filter.givenAfter : ``;\r\n            search += filter.returnedBefore != null ? `&Filter.returnedBefore=` + filter.returnedBefore:``;\r\n            window.location.href = search;\r\n        }*/\r\n    }\r\n    updateClicked(item, x) {\r\n\r\n        let show = this.state.profileShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.profile = JSON.parse(JSON.stringify(item))\r\n            show.x = x;\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            profileShow: show,\r\n            message: null,           \r\n        });\r\n\r\n    }\r\n\r\n    /*addforUserClicked = () => {\r\n        let item = {\r\n\r\n        }\r\n    }*/\r\n\r\n    addClicked (name) {\r\n        //this.props.history.push(`/userprofiles/-1`)\r\n      //  console.log(\"in add clicked\");\r\n      //  console.log(\"name = \"+name);\r\n        let userId = this.state.filter.userId || null;\r\n        let userName = userId == null || userId == 'undefined' ? '...' : name;\r\n        let item = {\r\n            userId: userId,\r\n            userName: userName\r\n        }\r\n        this.updateClicked(item,null)\r\n    }\r\n\r\n    cancelToGive = () => {\r\n       // console.log(\"canceltogive\");\r\n        this.setState({\r\n            i: null,\r\n            selectedUserId: null\r\n        })\r\n    }\r\n\r\n    saveToGive = (item, giving) => {\r\n       // console.log(\"save to give clicked\");\r\n\r\n        /*let g = new Date();       \r\n        g.setHours(g.getHours() - g.getTimezoneOffset() / 60);\r\n        console.log(\"g after turn = \" + g);*/\r\n        let g = Function.getDate();\r\n\r\n        let itemToSend = {\r\n            previousId: item.id,\r\n            userId: this.state.selectedUserId || null,\r\n            productDetailId: item.productDetailId,\r\n            givenAt: g,\r\n           \r\n            /*new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date())*/\r\n           /* returnedAt: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date())*/\r\n        }\r\n\r\n       // console.log(\"itemto send = \" + JSON.stringify(itemToSend));\r\n\r\n        UserProfileDataService.save(itemToSend).then(\r\n            response => {\r\n               // console.log(\"response = \" + response.data);\r\n                this.setState({ message: this.state.selectedUserId != null ? 'product given successfully ' : 'product returned successfully '})\r\n               \r\n               this.refresh();\r\n            }).catch(error => {\r\n               // console.log(\"error = \" + error);\r\n               // console.log(\"error.response = \" + error.response)\r\n            })\r\n    }\r\n\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    onFilterSearchChange(search) {\r\n        this.setState({ search: search })\r\n        this.refresh()\r\n    }\r\n\r\n    getOrderedList(name) {\r\n\r\n        \r\n        let search = this.state.search;\r\n        console.log(\"search = \" + search);\r\n       // if (search.indexOf('OrderBy.' + name) > -1) return;\r\n       // if(this.state.orderBy)\r\n       // if(this.state.)\r\n        let newSearch = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newSearch += searchItems[i] + '&'\r\n                else if (searchItems[i].startsWith('Pager')) continue;\r\n                else if (searchItems[i].startsWith('OrderBy')) continue;\r\n               \r\n                else \r\n                    newSearch += searchItems[i] + '&'\r\n                   // let searchItem = searchItems[i].split('=');\r\n\r\n                \r\n            }\r\n        }\r\n\r\n       /* newS\r\n        newSearch = newSearch.substring(0, newPath.length - 1);\r\n        newPath = path + '?' + newPath;\r\n        console.log('newPath =' + newPath);\r\n\r\n        window.location.href = newPath;*/\r\n        console.log(\"new search = \"+newSearch);\r\n        //if (newSearch[newSearch.length - 1] == '&') newSearch = newSearch.substring(0, newSearch.length - 1);\r\n       // if (newSearch.length == 0)newSearch+='&'\r\n\r\n        let direction = '';\r\n        if (this.state.orderBy.name == name) {\r\n            direction = this.state.orderBy.direction == 'asc' ? 'desc' : 'asc';\r\n        } else {\r\n            \r\n            direction = 'asc';\r\n        }\r\n\r\n        newSearch += 'OrderBy.' + name + '=' + direction;//;\r\n        let orderBy = { name: name, direction: direction }\r\n        this.setState({ orderBy: orderBy })\r\n\r\n       // if (newSearch.indexOf('Filter.filtersSet') < 0)\r\n           // newSearch += '&Filter.filtersSet=true';\r\n\r\n        newSearch = '?' + newSearch;\r\n        console.log(\"newSearch = \" + newSearch);\r\n        this.updateSearch(newSearch);\r\n       // this.setState({ search: newSearch })\r\n        //this.refresh(newSearch);\r\n\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {\r\n       // this.setState({ search: newSearch },\r\n       ///     () => this.searchLink.current.click()\r\n        // )\r\n        this.updateLink(newSearch);\r\n        if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n            newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n            newSearch += 'Filter.filtersSet = true'\r\n            }\r\n\r\n        console.log(\"newSearch = \" + newSearch);\r\n       // this.setState({ search: newSearch } )\r\n           \r\n        this.refresh(newSearch);\r\n    }\r\n\r\n    render() {\r\n\r\n       \r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n       // console.log(\"match = \"+JSON.stringify(match))\r\n       // const { url } = useRouteMatch();\r\n       // console.log(\"URL = \" + url);\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const userName = AuthenticationService.getLoggedUerName();\r\n        //const data = this.state.items;\r\n        const data = this.getFormattedData(this.state.items);\r\n        /*this.state.items.map(row => ({\r\n            ...row, givenAt: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.givenAt))\r\n            , returnedAt: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.returnedAt))\r\n        })); */\r\n      //  const dataAll = '';\r\n\r\n        const filteredUserTitle = userRole == 'ROLE_Employee' || (this.state.filter != null && this.state.filter.myProfile) ? 'my profile'\r\n            : this.state.filter != null && this.state.filter.userId != null ?\r\n                this.state.filter.userNames.find(n => n.value == this.state.filter.userId).name\r\n                : this.state.filter != null && this.state.filter.allUser ? 'users' : null;\r\n\r\n        const deletedUser = this.state.filter != null && this.state.filter.userId != null &&\r\n            this.state.filter.userNames.find(n => n.value == this.state.filter.userId).filterBy != null;\r\n        \r\n       // console.log(\"filteredUserTitle = \" + filteredUserTitle);\r\n\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n               \r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {/*  <div className={this.state.i != null ? \"overlay d-block\" : \"d-none\"}></div>*/}\r\n                {\r\n                    this.state.profileShow.profile && this.state.profileShow.show == true &&\r\n                    <UserProfileInnerComponent\r\n                       \r\n                        profileShow={this.state.profileShow}\r\n                        items={this.state.items}\r\n                        filter={this.state.filter}\r\n                        message={this.state.message}\r\n                        // suppliers={this.state.filter.suppliers}\r\n                        updateClicked={() => this.updateClicked(null)}\r\n                        refresh={() => this.refresh()}\r\n                        setMessage={(value) => this.setState({ message: value })}\r\n                    //setdeliveryUpdateShow={(value) => this.setState({ deliveryUpdateShow: value })} \r\n                    />}\r\n\r\n\r\n                {this.state.filter && <UserProfileFilter {...this.state.filter}\r\n                    // ref={this.filter}\r\n                    key={this.state.filterKey}\r\n                    userRole={userRole}\r\n                    timeline={this.state.timeline}\r\n                    onSearch={(filter) => {\r\n                       // console.log(\"got filter on search changed filter productDetailId = \" + filter.productDetailId);\r\n                        if (this.state.timeline.show == true) {\r\n                           \r\n                            this.child.current.getNewFilter(filter);\r\n                           // this.updateSearch(search);\r\n                        }\r\n                       // console.log(\"search changed\");\r\n                       // console.log(\"filter productDetailId = \" + filter.productDetailId);\r\n                       // this.setState({ timeLineFilter: JSON.parse(JSON.stringify(filter)) })\r\n                    }}\r\n                    search={this.state.search}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> User Profiles</strong>\r\n                            {filteredUserTitle != null && !this.state.timeline.show && <span> &emsp;(&nbsp;{filteredUserTitle}&nbsp;{deletedUser ? \" _ deleted \" : \"\"})</span>}\r\n                            \r\n                        </h5>\r\n\r\n                        {userRole == 'ROLE_Mol' &&\r\n                           \r\n                            <div className=\" pull-right mr-5\" style={{ position: \"relative\" }}>\r\n                            \r\n                                <input className=\"mx-1 m-2 mt-3\" type=\"radio\" \r\n                                    checked={this.state.timeline.show == false}\r\n                                    onClick={() => this.state.timeline.show ? this.updateTimeline(false) : {}}\r\n                                />Profiles View\r\n                       \r\n                           \r\n                                \r\n                                    <input id=\"btnTimeLine\" className=\"mx-1 m-2 mt-3 ml-5\" type=\"radio\"\r\n                                        checked={this.state.timeline.show == true}\r\n                                disabled={false/*!this.state.filter || (this.state.filter &&\r\n                                    !(this.state.filter.productDetailId != null && this.state.filter.givenAfter != null))*/}\r\n                               \r\n\r\n                                        onClick={\r\n                                            () => !this.state.timeline.show ? this.updateTimeline(true) : {}} />Update Timeline\r\n                   \r\n                       \r\n                                <p className=\"timelinenote \" style={{ fontSize: \"65%\" }}> select inventory and timeline to activate this button </p>\r\n                            </div>\r\n                           \r\n                        }\r\n                       \r\n                    </div>\r\n                   \r\n                    <div className=\"p-1\">\r\n                        {!this.state.timeline.show &&\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap \">\r\n                            \r\n                                <><div >\r\n                                {userRole == 'ROLE_Mol' && !deletedUser &&//this.state.filter && this.state.filter.userId &&\r\n                                    <button className=\"btn btn-mybtn px-5  \" onClick={() => {\r\n                                        //if (filteredUserTitle == null) this.updateClicked(null, 100)\r\n                                        this.addClicked(filteredUserTitle)\r\n                                    }\r\n                                    }>Add New</button>}\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"user-profiles-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                       // console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"user-profiles-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                                {this.state.pager && <PaginationComponent {...this.state.pager}\r\n                                    search={this.state.search}\r\n                                    onNewSearch={(search)=>\r\n                                        this.updateSearch(search)\r\n                                    } />}</> </div>\r\n                        }\r\n\r\n                        {userRole == 'ROLE_Mol' && this.state.timeline.show &&\r\n                            <TimelineInnerComponent\r\n                            ref={this.child}\r\n                                filter={this.state.timeLineFilter}\r\n                            updateLink={(search) => this.updateLink(search)}\r\n                           // items={JSON.parse(JSON.stringify(this.state.items))}\r\n                            updateTimeline={(value) => this.updateTimeline(value)}\r\n                            setMessage={(msg) => { console.log(\"msg = \"+msg);this.setState({ message: msg }) }}\r\n                            refresh={() => {\r\n                                this.updateTimeline(false); //this.refresh() \r\n                            }}\r\n\r\n                    />}\r\n                        {!this.state.timeline.show &&\r\n                            <>\r\n                            {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                            {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                {this.state.servermsg && <p> server msg = {this.state.servermsg}</p>}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n                            <table className=\"table border-bottom my-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        {userRole == 'ROLE_Mol' && <th className=\"\"//hoverable\"\r\n                                        // onClick={() => this.getOrderedList(\"userName\")}\r\n                                        >user\r\n                                        <OrderByComponent name=\"userName\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"userName\")}/>   \r\n                                        \r\n                                            </th>}\r\n                                        <th>product\r\n                                        <OrderByComponent name=\"productName\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"productName\")} />\r\n                                           </th>\r\n                                        <th>inventory number\r\n                                        <OrderByComponent name=\"inventoryNumber\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"inventoryNumber\")} />\r\n                                        {/*this.state.orderBy.name == \"inventoryNumber\" && this.state.orderBy.direction == \"asc\" ?\r\n                                            (< i class=\"fa fa-caret-up ml-1 hoverable\" onClick={() => this.getOrderedList(\"inventoryNumber\")} />) :\r\n                                            (< i class=\"fa fa-caret-down ml-1 hoverable\" onClick={() => this.getOrderedList(\"inventoryNumber\")} />)*/}</th>\r\n                                        <th className=\"\"\r\n                                        //onClick={() => this.getOrderedList(\"givenAt\")}\r\n                                        >given at\r\n                                         <OrderByComponent name=\"givenAt\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"givenAt\")} />\r\n                                            {/*this.state.orderBy.name == \"givenAt\" && this.state.orderBy.direction == \"asc\" ?\r\n                                            (< i class=\"fa fa-caret-up ml-1 hoverable\" onClick={() => this.getOrderedList(\"givenAt\")} />) :\r\n                                            (< i class=\"fa fa-caret-down ml-1 hoverable\" onClick={() => this.getOrderedList(\"givenAt\")} />)*/}</th>\r\n                                        <th>returned at\r\n                                         <OrderByComponent name=\"returnedAt\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"returnedAt\")} />\r\n                                            {/*this.state.orderBy.name == \"returnedAt\" && this.state.orderBy.direction == \"asc\" ?\r\n                                            (< i class=\"fa fa-caret-up ml-1 hoverable\" onClick={() => this.getOrderedList(\"returnedAt\")} />) :\r\n                                            (< i class=\"fa fa-caret-down ml-1 hoverable\" onClick={() => this.getOrderedList(\"returnedAt\")} />)*/}</th>\r\n                                        {/*userRole == 'ROLE_Mol' && this.state.filter && this.state.filter.myProfile &&\r\n                                        <th className=\"with-btn\"> give to </th>*/}\r\n                                        {userRole == 'ROLE_Mol' && <th>Update &emsp;&nbsp; Delete\r\n                                            {!this.state.filter.userId && !this.state.filter.allUser && !this.state.filter.myProfile && !this.state.filter.current &&\r\n                                                <>< i class=\"fa fa-caret-down ml-2 hoverable\"\r\n                                                onClick={() => { this.setState({ showDeleteAll: !this.state.showDeleteAll }) }} />\r\n                                                {this.state.showDeleteAll &&\r\n                                                    <DeleteAllInnerComponent\r\n                                                    productDetails={this.state.filter.inventoryNumbers}\r\n                                                    cancel={() => this.setState({ showDeleteAll: null })}\r\n                                                    deleteAll={(date, id) => {\r\n                                                        this.setState({ showDeleteAll: null }); this.deleteAllbefore(date, id)\r\n                                                    }\r\n                                                        }/>}\r\n                                               \r\n                                                </>}</th>}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.state.items.map(\r\n                                            (item, i) =>\r\n                                                <>\r\n                                                <tr key={item.id} >\r\n                                                    {userRole == 'ROLE_Mol' && <td className={this.state.i == i ? \"above-row border-r\" : \"\"}>{item.userName}</td>}\r\n                                                        <td className={this.state.i == i ? \"above-row \" : \"\"}>{item.productName}</td>\r\n                                                        <td className={this.state.i == i ? \"above-row\" : \"\"}>\r\n                                                            <p className=\"hoverable\"\r\n                                                                onClick={() =>\r\n                                                                    this.props.history.push(`productdetails?Filter.id=${item.productDetailId}`)}>\r\n                                                                {item.inventoryNumber}</p></td>\r\n                                                    <td className={this.state.i == i ? \"above-row\" : \"\"}>{new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                        month: \"long\",\r\n                                                        day: \"2-digit\",\r\n                                                        year: \"numeric\",\r\n                                                    }).format(new Date(item.givenAt))}</td>\r\n                                                        {//console.log(\"userRole == 'ROLE_Mol' \" + (userRole == 'ROLE_Mol'))\r\n                                                        }\r\n                                                        {item.profileDetail != null &&\r\n                                                            <td className=\"hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    let showdts = this.state.showdts;\r\n                                                                    if (showdts == undefined) showdts = [];\r\n                                                                    showdts[i] = showdts[i] ? false : true;\r\n                                                                    this.setState({ showdts: showdts })\r\n                                                                }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                                    aria-hidden=\"true\"></i></td>\r\n                                                        }\r\n                                                        {item.profileDetail == null &&\r\n                                                            <td className=\r\n                                                                {userRole == 'ROLE_Mol' && item.returnedAt == null ?\r\n                                                                    this.state.i == i ? \"above-row border-l with-btn\" : \"with-btn\" : \"\"}>{/*\r\n                                                    this.state.filter && this.state.filter.userId && item.returnedAt == null*/}\r\n\r\n                                                                {item.returnedAt != null &&\r\n                                                                    new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                                        month: \"long\",\r\n                                                                        day: \"2-digit\",\r\n                                                                        year: \"numeric\",\r\n                                                                    }).format(new Date(item.returnedAt))}\r\n\r\n\r\n\r\n                                                                {item.returnedAt == null && userRole == 'ROLE_Mol' && userName != item.userName &&\r\n                                                                    <button className=\"btn btn-mybtn f-r\"\r\n                                                                        onClick={() => this.saveToGive(item, false)}>return</button>}\r\n                                                                {item.returnedAt == null && userRole == 'ROLE_Mol' && userName == item.userName &&\r\n                                                                    (this.state.i == null || this.state.i != i) &&\r\n                                                                    <button className=\"btn btn-mybtn f-r\"\r\n                                                                        onClick={() => { console.log(\"give to clicked\"); this.setState({ i: i }) }}>give to</button>}\r\n                                                                {item.returnedAt == null && userRole == 'ROLE_Mol' && userName == item.userName && this.state.i == i &&\r\n\r\n                                                                    <>\r\n                                                                        <div className=\r\n                                                                            {\"inline d-flex above-label \"\r\n                                                        /*this.state.i == i ? \"inline above-label d-flex \" : \"inline above-label d-flex visible-n\"*/}>\r\n                                                                            <label>select&nbsp;user&nbsp;</label>\r\n                                                                            <CustomSelect\r\n                                                                                defaultMenuIsOpen={true}\r\n                                                                                className={\"inline inline-3 above-select\"}\r\n                                                                                items={this.state.filter.userNames}\r\n                                                                                value={''}\r\n                                                                                onChange={(selected) => { this.setState({ selectedUserId: selected.value }) }}\r\n                                                                            />\r\n\r\n                                                                        </div>\r\n                                                                        <button className=\"btn btn-mybtn mr-1 above-btn\" onClick={() => this.saveToGive(item, true)}>\r\n                                                                            <i className=\"fa fa-save\"></i></button>\r\n                                                                        <button className=\"btn btn-mybtn btn-delete above-btn\" onClick={() => this.cancelToGive()}>\r\n                                                                            <i className=\"fa fa-close\"></i></button>\r\n\r\n                                                                    </>\r\n                                                                }\r\n                                                                {\r\n                                                                    item.returnedAt == null &&\r\n                                                                    userRole != 'ROLE_Mol' && '-'}</td>}\r\n                                                    {/*userRole == 'ROLE_Mol' && this.state.filter && this.state.filter.myProfile &&\r\n                                                    <td className={this.state.i == i ? \"above-row with-btn border-l\" : \"with-btn\"}>\r\n                                                        {(this.state.i == null || this.state.i != i) && item.returnedAt == null && <button className=\"btn btn-mybtn\"\r\n                                                        onClick={() => { console.log(\"give to clicked\");this.setState({ i: i }) }}>give to</button>}\r\n                                                    {this.state.i == i &&\r\n                                                        <>\r\n                                                        \r\n                                                        <div className=\r\n                                                            {\"inline d-flex above-label \"\r\n                                                        //this.state.i == i ? \"inline above-label d-flex \" : \"inline above-label d-flex visible-n\"\r\n                                                        }>\r\n                                                            <label>select&nbsp;user&nbsp;</label>                                                           \r\n                                                                <CustomSelect\r\n                                                                    defaultMenuIsOpen={true} \r\n                                                                className={\"inline inline-3 above-select\"}\r\n                                                            items={this.state.filter.userNames}\r\n                                                                value={''}\r\n                                                                onChange={(selected) => { this.setState({ selectedUserId: selected.value }) }}\r\n                                                            />\r\n                                                           \r\n                                                            </div>\r\n                                                            <button className=\"btn btn-mybtn mr-1 above-btn\" onClick={()=>this.saveToGive(item ,true)}>\r\n                                                                <i className=\"fa fa-save\"></i></button>\r\n                                                            <button className=\"btn btn-mybtn btn-delete above-btn\" onClick={()=>this.cancelToGive()}>\r\n                                                                <i className=\"fa fa-close\"></i></button>\r\n                                                        \r\n                                                       \r\n                                                        </>\r\n                                                    }</td>*/}\r\n                                                    {userRole == 'ROLE_Mol' && <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item, i)}>Update</button>\r\n                                                        <button className=\"btn btn-mybtn btn-delete\"\r\n                                                            disabled={item.userName == userName} onClick={() => this.deleteClicked(item.id)}>Delete</button></td>}\r\n                                                    </tr>\r\n                                                    {item.profileDetail != null && this.state.showdts[i] &&\r\n                                                        <tr className=\"bold-border-bottom\">\r\n                                                        {userRole == 'ROLE_Mol' && <td></td>\r\n                                                        }\r\n                                                        {/*className=\"pt-3 pb-3 d-flex align-items-top\"*/}\r\n                                                        <td colSpan=\"4\">\r\n                                                            <div className=\"d-flex align-items-top\">\r\n                                                                <div className=\"inline wxs\"><label>owings : </label></div>\r\n                                                             <div className=\"inline w20\">\r\n                                                                <p>created At : </p>\r\n                                                                <p>{item.profileDetail.createdAt}</p>\r\n                                                            </div>\r\n                                                            <div className=\"inline w20\">\r\n                                                                <p>modified At : </p>\r\n                                                                <p>{item.profileDetail.modifiedAt}</p>\r\n                                                            </div>\r\n                                                            <div className=\"inline w20\">\r\n                                                                <p>owed Amount : </p>\r\n                                                                    <p> {new Intl.NumberFormat(\"en-GB\", {\r\n                                                                        style: \"currency\",\r\n                                                                        currency: \"BGN\",\r\n                                                                        maximumFractionDigits: 2\r\n                                                                    }).format(item.profileDetail.owedAmount)}</p>\r\n                                                            </div>\r\n                                                            <div className=\"inline w20\">\r\n                                                                <p>paid Amount : </p>\r\n                                                                    <p>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                        style: \"currency\",\r\n                                                                        currency: \"BGN\",\r\n                                                                        maximumFractionDigits: 2\r\n                                                                    }).format(item.profileDetail.paidAmount)}</p>\r\n                                                                </div>\r\n                                                                <div className=\"inline wxs\">\r\n                                                                    <p className=\"p-0\">cleared :</p>\r\n                                                                    {item.profileDetail.cleared ? < i class=\"fa fa-check ml-1\" />\r\n                                                                    : < i class=\"fa fa-false ml-1\" />}</div>\r\n                                                            </div>\r\n \r\n                                                        </td>\r\n                                                        {userRole == 'ROLE_Mol' && <td></td>\r\n                                                        }\r\n                                                        {/*userRole == 'ROLE_Mol' && <td></td>}\r\n                                                        <td>created At : {item.profileDetail.createdAt}</td>\r\n                                                        <td>modified At : {item.profileDetail.modifiedAt}</td>\r\n                                                        <td>owed Amount : {item.profileDetail.owedAmount}</td>\r\n                                                        <td>paid Amount : {item.profileDetail.paidAmount}</td>\r\n                                                        {userRole == 'ROLE_Mol' && <td></td>*/}\r\n\r\n                                                        </tr>}\r\n\r\n                                                    </>\r\n                                        )\r\n                                    }\r\n                                </tbody>\r\n                                \r\n                            </table></>}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(ListUserProfilesComponent)","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserProfileDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserProfileFilter.jsx",["551","552","553","554","555","556","557","558","559","560","561","562"],"import { Field, Form, Formik } from 'formik';\r\nimport React, { Component } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\n\r\nclass UserProfileFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,            \r\n           // userNames: props.userNames,\r\n            userId: props.userId,\r\n            myProfile: props.myProfile,\r\n            productNames: props.productNames,\r\n            productId: props.productId,\r\n            inventoryNumbers: props.inventoryNumbers,\r\n            filteredInventoryNumbers: props.inventoryNumbers,//this.getFilteredListFunctions.getFilteredList([], props.inventoryNumbers, props.productId),//props.inventoryNumbers,\r\n            productDetailId: props.productDetailId,\r\n            givenAfter: props.givenAfter,\r\n            returnedBefore: props.returnedBefore,\r\n            prefix: props.prefix,\r\n            userRole: props.userRole,\r\n            current: props.current,\r\n            allUser: props.allUser,\r\n            withDetail: props.withDetail\r\n            //timeline: props.timeline.show\r\n        }\r\n       // console.log(\"userRole = \" + this.state.userRole);\r\n       // console.log(\"timeline = \" + this.state.timeline);\r\n       // console.log(\"props.timeline = \" + JSON.stringify(this.props.timeline));\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n      //  this.productDetailIdRef = React.createRef();\r\n       // this.givenAfterRef = React.createRef();\r\n       // this.formikRef = React.createRef();\r\n    }\r\n\r\n    /*showOriginal = (filter) => {\r\n      //  console.log(\"filter.productdetailid = \" + filter.productDetailId);\r\n       // console.log(\"filter.givenat = \" + filter.givenAfter)\r\n        //console.log(\"random = \" + Functions.getRandom);\r\n       // let values = this.formikRef.current.props.values;\r\n\r\n       // this.formikRef.current.setFieldValue(values.givenAfter, filter.givenAfter);\r\n       // console.log(\"got original filter = \" + JSON.stringify(filter))\r\n        //this.productDetailIdRef.current.set\r\n       // this.givenAfterRef.current.setSelected(new Date(filter.givenAfter));\r\n        //  this.productDetailIdRef.current.setSelected(filter.productDetailId);\r\n        this.setState({\r\n            productDetailId: Functions.getRandom(),\r\n            givenAfter: Functions.getRandom(),\r\n            returnedBefore: Functions.getRandom(),\r\n\r\n        })\r\n        console.log(\"show original\")\r\n        console.log(\"filter.productDetailId = \" + filter.productDetailId)\r\n        this.setState({\r\n            productDetailId: filter.productDetailId||null ,\r\n            givenAfter: filter.givenAfter ,\r\n            returnedBefore: filter.returnedBefore \r\n        })\r\n    }*/\r\n\r\n    convertDate(value) {\r\n       /* if (value && value != 'undefined') {\r\n            // let date = \r\n            value = (new Date(value)).toISOString();\r\n            value = value.substring(0, value.indexOf('T'))\r\n            return value;\r\n        } else return '';*/\r\n       return Functions.convertDate(value);\r\n    }\r\n    onSubmit(values) {\r\n       // console.log(\"in submit filter\");\r\n       // console.log(\"this.props.timeline.show = \" + this.props.timeline.show);\r\n        if (this.props.timeline.show) {\r\n           /* if (key == 'givenAfter' || key == 'returnedBefore') {\r\n                value = (new Date(value)).toISOString();\r\n                value = value.substring(0, value.indexOf('T'))\r\n            }*/\r\n           // console.log(\"preparing filter = \");\r\n            let filter = { \"productDetailId\": values.productDetailId, \"givenAfter\": '', \"returnedBefore\": '' };\r\n              //filter = JSON.parse(JSON.stringify(filter));\r\n           // console.log(\"filter 1 = \" + JSON.stringify(filter));\r\n           // console.log(\"filter.givenAfter = \" + JSON.stringify(filter.givenAfter));\r\n           // filter.givenAfter = filter.givenAfter.substring(0, filter.givenAfter.indexOf('T'));//this.convertDate(filter.givenAfter);\r\n            //filter.returnedBefore = filter.returnedBefore.substring(0, filter.returnedBefore.indexOf('T'));//this.convertDate(filter.returnedBefore);\r\n            filter.givenAfter = this.convertDate(values.givenAfter);\r\n           // console.log(\"filter 2 = \" + JSON.stringify(filter));\r\n            filter.returnedBefore = this.convertDate(values.returnedBefore);\r\n          //  console.log(\"filter 3 = \" + JSON.stringify(filter));\r\n           // console.log(\"filter after conversion = \" + JSON.stringify(filter));\r\n            this.props.onSearch(filter);\r\n            return;\r\n        }\r\n\r\n        let path = window.location.pathname;\r\n        let search = this.props.search || window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n            /*if (!key.endsWith(\"s\")) {\r\n                console.log(\"key : \" + key + \" value = \" + value);\r\n               // console.log(\"value != 'undefined' : \" + (value != 'undefined'))//+ \" value.length > 1 = \" + (value.length > 1));\r\n                if(value)\r\n               // console.log( \" value.length > 1 = \" + (value.length > 1));\r\n                     console.log(\"value != 'undefined' : \" + (value != 'undefined'))//+ \" value.length > 1 = \" + (value.length > 1));\r\n\r\n            }*/\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                if (key == 'givenAfter' || key == 'returnedBefore') {\r\n                    value = this.convertDate(value);//(new Date(value)).toISOString();\r\n                    //value = value.substring(0, value.indexOf('T'))\r\n                }\r\n              /*  if (this.props.timeline.show && (\r\n                    key == 'givenAfter' || key == 'returnedBefore' || key == 'productDetailId'\r\n                    )) {\r\n                    newPath += prefix + '.' + key + '=' + value + '&'\r\n                }else*/\r\n                     newPath += prefix + '.' + key + '=' + value + '&'\r\n                //console.log(\"new path = \" + newPath)\r\n            }\r\n\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n       /* if (this.props.timeline.show) {\r\n              newPath += \"Filter.filtersSet=true\";\r\n              newPath = '?' + newPath;\r\n              this.props.onSearch(newPath);\r\n        } else {*/\r\n        newPath = '?' + newPath;\r\n        newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n            // console.log('newPath =' + newPath);\r\n\r\n        this.props.onNewSearch ? this.props.onNewSearch(newPath)\r\n            : window.location.href = newPath;\r\n           // window.location.href = newPath;\r\n\r\n       // }\r\n      \r\n       \r\n       \r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value || names[i].value == '') {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    resetForm() {\r\n\r\n        window.location.href = window.location.pathname;\r\n       /* this.setState({\r\n            all: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            userName: '',\r\n            email: '',\r\n        });\r\n        console.log('in reset form ');*/\r\n    }\r\n\r\n   \r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let userNames = this.props.userNames\r\n\r\n        let { all,  userId, myProfile, inventoryNumbers, productDetailId, productNames, withDetail,\r\n            productId, givenAfter, returnedBefore, current, allUser, filteredInventoryNumbers} = this.state;\r\n       // let filteredInventoryNumbers = this.props.inventoryNumbers;\r\n        return (\r\n\r\n            <Formik\r\n               // ref={this.formikRef}\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                    all, userNames, userId, myProfile, inventoryNumbers, productDetailId, productNames, withDetail,\r\n                    productId, givenAfter, returnedBefore, filteredInventoryNumbers, current, allUser\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                \r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            {/*console.log(\"rendering values productDetailId = \" + values.productDetailId)}\r\n                            {/*console.log(\"rendering stateproductDetailId = \" + this.state.productDetailId)}\r\n                            {console.log(\"rendering filte value given at = \" + values.givenAfter)}\r\n                            {console.log(\"rendering state  given at = \" + this.state.givenAfter)}\r\n                            {console.log(\"props given at = \" + this.props.givenAfter)*/}\r\n                            <Field\r\n                                className=\"ml-2 mr-1\" type=\"checkbox\" name=\"current\"\r\n                                value={values.current} checked={values.current}\r\n                                disabled={this.props.timeline.show}\r\n                                onChange={(value) => {\r\n                                    // console.log('value of checked = ' + value.target.value);\r\n                                    setFieldValue(\"current\", !values.current);\r\n                                    // setFieldValue(\"userId\", 'undefined')\r\n                                }}\r\n                            />  <span className=\"font-weight-bold\">current</span>\r\n                           \r\n                            {\r\n                                this.state.userRole == 'ROLE_Mol' &&\r\n                                <div className=\"inline\">\r\n                                    <div className=\"inline ml-3\">\r\n                                        <Field\r\n                                        className=\"mr-1\" type=\"checkbox\" name=\"myProfile\"\r\n                                        value={values.myProfile} checked={values.myProfile}\r\n                                        disabled={this.props.timeline.show}\r\n                                            onChange={(value) => {\r\n                                                // console.log('value of checked = ' + value.target.value);\r\n                                                setFieldValue(\"myProfile\", !values.myProfile);\r\n                                                setFieldValue(\"userId\", 'undefined');\r\n                                                setFieldValue(\"allUser\", false)\r\n                                            }}\r\n                                    />  <span className=\"font-weight-bold\">my profile</span>\r\n                                    </div>\r\n                                    <div className=\"inline ml-3\">\r\n                                    <Field\r\n                                        className=\"mr-1\" type=\"checkbox\" name=\"allUser\"\r\n                                        value={values.allUser} checked={values.allUser}\r\n                                        disabled={this.props.timeline.show}\r\n                                        onChange={(value) => {\r\n                                            // console.log('value of checked = ' + value.target.value);\r\n                                            setFieldValue(\"allUser\", !values.allUser);\r\n                                            setFieldValue(\"userId\", 'undefined');\r\n                                            setFieldValue(\"myProfile\", false)\r\n                                        }}\r\n                                        />  <span className=\"font-weight-bold\">users</span>\r\n                                    </div>\r\n                                   \r\n\r\n                                    <div className=\"inline ml-3\">\r\n                                        <label className=\"font-weight-bold\">user&nbsp;</label>\r\n                                        <CustomSelect\r\n                                            className={\"inline inline-4\"}\r\n                                            items={userNames}\r\n                                            disabled={this.props.timeline.show}\r\n                                            value={values.userId}\r\n                                            onChange={(selected) => {\r\n                                                setFieldValue(\"myProfile\", false);\r\n                                                setFieldValue(\"userId\", selected.value);\r\n                                                setFieldValue(\"allUser\", false)\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"inline\">\r\n                                <label >product&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={productNames}\r\n                                    disabled={this.props.timeline.show}\r\n                                    value={this.props.timeline.show ? '' : values.productId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"productId\", selected.value);\r\n\r\n                                       // let subs = values.filteredInventoryNumbers;\r\n                                        // let subs = values.filteredInventoryNumbers.\r\n                                       // let subs = Functions.getFilteredList(values.inventoryNumbers, selected.value);//this.getFilteredList(subs, values.inventoryNumbers);\r\n                                        let subs = values.filteredNames;\r\n                                        subs = this.filter(subs, values.inventoryNumbers, selected.value);\r\n\r\n                                        /*  [];\r\n                                        for (let i = 0; i < values.inventoryNumbers.length; i++) {\r\n\r\n                                            if (values.inventoryNumbers[i].filterBy == selected.value) {\r\n                                                subs.push(values.inventoryNumbers[i])\r\n                                            }\r\n                                        }*/\r\n                                        setFieldValue(\"filteredInventoryNumbers\", subs);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >inventory number&nbsp;</label>\r\n                                <CustomSelect\r\n                                   // ref={(x) => { this.productDetailIdRef = x}}\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredInventoryNumbers}\r\n                                    log={true}\r\n                                    value={values.productDetailId == null || values.productDetailId==undefined ?'undefined' : values.productDetailId }\r\n                                    onChange={(selected) => setFieldValue(\"productDetailId\", selected.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">timeline&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{borderRadius:\"3px\"}}>\r\n                                    <label className=\"mb-1 fw-s\">given after&nbsp;</label>\r\n                                    <div className=\"inline \">\r\n                                        <DatePicker className=\"form-control in-inline inline-2\"\r\n                                           // ref={this.givenAfterRef}\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                           \r\n                                            locale=\"en-GB\"\r\n                                            maxDate={values.returnedBefore && new Date(values.returnedBefore) || (new Date()).setDate((new Date()).getDate() - 1)}\r\n                                            selected={values.givenAfter && new Date(values.givenAfter)}\r\n                                            isClearable\r\n                                            onChange={date => setFieldValue(\"givenAfter\", date)}\r\n                                            shouldCloseOnSelect={true}\r\n                                            showYearDropdown\r\n                                            dropdownMode=\"select\"/>\r\n                                    </div>\r\n\r\n                                    <label className=\"pl-1 mb-1 fw-s\">returned before&nbsp;</label>\r\n                                    <DatePicker className=\"form-control in-inline inline-2\"\r\n                                        dateFormat=\"MMMM dd yyyy\"\r\n                                        \r\n                                        locale=\"en-GB\"\r\n                                        minDate={values.givenAfter &&\r\n                                            new Date(values.givenAfter).setDate((new Date(values.givenAfter)).getDate() + 1)}\r\n                                        maxDate={(new Date()).setDate((new Date()).getDate()+1)}\r\n                                        selected={values.returnedBefore && new Date(values.returnedBefore)}\r\n                                        onChange={date => setFieldValue(\"returnedBefore\", date)}\r\n                                        isClearable\r\n                                        highlightDates={new Date()}\r\n                                        shouldCloseOnSelect={true}\r\n                                        showYearDropdown\r\n                                        dropdownMode=\"select\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"inline pr-2 mr-2\">\r\n                                <Field\r\n                                    className=\"mr-2 pt-3\" type=\"checkbox\" name=\"withDetail\"\r\n                                    value={true} checked={values.withDetail == true}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"withDetail\", values.withDetail == true ? null : true);\r\n                                    }}\r\n                                /><label>with owings</label>\r\n                                </div>\r\n                           \r\n                           \r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\" >Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" disabled={this.props.timeline.show} onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfileFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveryDetailInnerComponent.jsx",["563","564","565","566","567"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\InventoryNumberInnerComponent.jsx",["568","569","570","571","572","573","574","575","576"],"import React, { Component } from 'react';\r\n//import DeliveryDetailDataService from '../service/DeliveryDetailDataService';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport '../myStyles/Style.css';\r\n//import ProductDetailDataService from '../service/ProductDetailDataService';\r\n\r\nclass InventoryNumberInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n            pdUpdateShow: props.pdUpdateShow,\r\n            pdShow: props.pdShow,\r\n            pdmessage: props.pdmessage\r\n            }\r\n    }\r\n\r\n    saveUpdatedPd = () => {\r\n\r\n        let x = this.state.pdUpdateShow.x;\r\n        let y = this.state.pdUpdateShow.y;\r\n        let i = this.state.pdUpdateShow.i;\r\n        \r\n       // console.log(\"i=='undefined'\" + (i == 'undefined'))\r\n        console.log(\"i==undefined\" + (i == undefined))\r\n        if (i == undefined) i = this.state.pdShow[x][y].data.length;\r\n        //console.log(\"this.state.pdShow[x][y] = \" + JSON.stringify(this.state.pdShow[x][y]));\r\n        //console.log(\"this.state.pdShow[x][y].data instanceof array = \" + (this.state.pdShow[x][y].data instanceof Array));\r\n        console.log(\"i = \" + i);\r\n        let name = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.name.trim() : null;\r\n        if (this.state.pdUpdateShow.pd == null) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number is required\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (this.state.pdUpdateShow.pd.value &&\r\n            name == this.state.pdShow[x][y].data[i].name) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number hasn't changed\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (name.length == 0) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number can't be empty\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (this.numberExists(name, x, y, i)){\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number already exist's in this delivery\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else {\r\n\r\n            //console.log(\"submitting pd \" + JSON.stringify(this.state.pdUpdateShow.pd));\r\n            let item = {\r\n                selectItem: {\r\n                    name: this.state.pdUpdateShow.pd.name.trim(), value: this.state.pdUpdateShow.pd.value\r\n                },\r\n                deliveryDetailId: this.state.pdUpdateShow.ddid != null ? this.state.pdUpdateShow.ddid:null\r\n            }\r\n            console.log(\"submitting item \" + JSON.stringify(item));\r\n            ProductDetailDataService.updateNumber(item)\r\n                .then(response => {\r\n                    console.log(\"response = \" + JSON.stringify(response));\r\n                    this.props.updatePdChildClicked(null);\r\n\r\n                   \r\n\r\n                    let pdshow = this.state.pdShow;\r\n\r\n                    if (this.state.pdUpdateShow.i == undefined) {\r\n                        let list = pdshow[x][y].data;\r\n                        list.push({ value: response.data, name: item.selectItem.name });\r\n                        pdshow[x][y].data = list\r\n                    }else\r\n                        pdshow[x][y].data[i].name = item.selectItem.name;\r\n\r\n                    let pdmessages = this.state.pdmessage;\r\n                    if (pdmessages[x] == null) pdmessages[x] = [];\r\n                    pdmessages[x][y] = `Update successful`;\r\n\r\n                    this.props.setpdShow(pdshow);\r\n                    this.props.setpdMessage(pdmessages);\r\n                    if (this.state.pdUpdateShow.i == undefined) this.props.refresh()\r\n                    \r\n                }).catch(error => {\r\n                    console.log(\"error = \" + error);\r\n                    console.log(\"error.response.data = \" + JSON.stringify(error.response.data));\r\n                   // let errormsg = error.response && error.response.data ? error.response.data.message : error + '';\r\n                    let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.pdUpdateShow;\r\n                    show.error = errormsg;\r\n                    this.setState({ pdUpdateShow: show })\r\n                    //this.props.setpdUpdateShow( show )\r\n                })\r\n        }\r\n    }\r\n\r\n    numberExists = (name, x, y, i) => {\r\n        let pdshow = this.state.pdShow;\r\n        let productNums = pdshow[x][y].data;\r\n        for (let j = 0; j < productNums.length; j++) {\r\n            if (j == i) continue\r\n            if (name == productNums[j].name)               \r\n                return true           \r\n        }  \r\n        return false\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.pdUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.pdUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"50%\", height: \"48%\" }}>\r\n                <span class=\"close\" onClick={() => this.props.updatePdChildClicked(null)}>&times;</span>\r\n                <h2>update inventory number </h2>\r\n                    {this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.pdUpdateShow.error}\r\n                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                        onClick={() => {\r\n                            let show = this.state.pdUpdateShow;\r\n                            show.error = '';\r\n                            this.setState({ pdUpdateShow: show })\r\n                        }}>\r\n                    </i>\r\n                    </div>}\r\n                    <h6 className={this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>number : </h6>\r\n                    <input type=\"text\" className = \"form-control\" value={this.state.pdUpdateShow.pd && this.state.pdUpdateShow.pd.name} onChange={(value) => {\r\n                        let show = this.state.pdUpdateShow;\r\n                        if (show.pd == null) show.pd = {};\r\n                    show.pd.name = value.target.value;\r\n                    this.setState({ pdUpdateShow: show })\r\n                }} />\r\n                <button className=\"btn btn-mybtn p-x-5 \" onClick={this.saveUpdatedPd}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5 \" onClick={() => this.props.updatePdChildClicked(null)}>Cancel</button> \r\n                </div>\r\n                </>\r\n            )\r\n    }\r\n\r\n}\r\nexport default InventoryNumberInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryInnerComponent.jsx",["577","578"],"import React, { Component } from 'react';\r\n//import DeliveryDetailDataService from '../service/DeliveryDetailDataService';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\n//import ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\n//import ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport Function from './Shared/Function'\r\n\r\nclass DeliveryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                deliveryUpdateShow: props.deliveryUpdateShow,\r\n                items: props.items,\r\n                message: props.message,\r\n                suppliers: props.suppliers\r\n                \r\n\r\n            }\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        let x = this.state.deliveryUpdateShow.x;\r\n        let items = this.state.items;\r\n        let item = items[x];\r\n\r\n        let show = this.state.deliveryUpdateShow;\r\n        let supplierId = show.delivery.supplierId;\r\n        let date = show.delivery.date;\r\n       // console.log(\"state date = \" + this.state.deliveryUpdateShow.delivery.data);\r\n       \r\n        console.log(\"show.delivery = \" + JSON.stringify(show.delivery));\r\n        console.log(\"this.date = \" + date);\r\n       // console.log(\"show.delivery.date = \" + show.delivery.date);\r\n       // console.log(\"date.toISOString() = \" + date.toISOString());\r\n       // console.log(\"date = \" + date);\r\n       // console.log(\"new Date(item.date) = \" + new Date(item.date));\r\n        //console.log(\"new Date(item.date) === date \" +(new Date(item.date) === date ));\r\n\r\n        if (!date || !supplierId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else if (supplierId == item.supplierId && this.isDateEqual(date, item.date)) {\r\n            show.error = \"delivery hasn't changed\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else {\r\n            console.log(\"all good\");\r\n            console.log(\"in submit show.delivery = \" + JSON.stringify(show.delivery));\r\n            let item = show.delivery;\r\n            console.log(\"in submit delivery item = \" + JSON.stringify(item));\r\n            DeliveryDataService.save(item)\r\n                .then((response) => {\r\n                    console.log(\"delivery submit response = \" + response.data);\r\n                    //item.supplierName = (this.state.suppliers.filter(s => s.value == item.supplierId))[0].name;\r\n                    items[x] = item;\r\n                    //message = \"update successful\"\r\n                    this.props.setItems(items);\r\n                    this.props.updateClickedInner(null);\r\n                    let msg = this.state.message;\r\n                    msg = \"update successful\";\r\n                    this.props.setMessage(msg);\r\n                    //this.props.setdeliveryUpdateShow(null)\r\n                    \r\n\r\n                    //let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n                   // this.props.history.push(path)\r\n                }).catch((error) => {\r\n                    console.log(\"delivery submit error= \" + error.data);\r\n                    show.error = \"errors occured : \" + error + \" !!!\";\r\n                    this.setState({ deliveryUpdateShow: show })\r\n                })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    isDateEqual = (date1, date2) => {\r\n        //date2 string\r\n        // date1 string or date \r\n        console.log(\"typeof date1 = \" + typeof date1);\r\n        console.log(\"typeof date2 = \" + typeof date2);\r\n        console.log(\"date1 = \" + date1);\r\n        console.log(\" date2 = \" + date2);\r\n        if (typeof date1 === 'string' && date1 == date2) return true\r\n        else {\r\n            date1 = new Date(date1);\r\n            date2 = new Date(date2);\r\n            if (date1.getFullYear() === date2.getFullYear() &&\r\n                date1.getMonth() === date2.getMonth() &&\r\n                date1.getDate() === date2.getDate())\r\n                return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    onDateChanged = (date) => {\r\n        console.log(\"date = \" + date);\r\n        let deliveryUpdateShow = this.state.deliveryUpdateShow;\r\n        deliveryUpdateShow.delivery.date = date;\r\n        this.setState({\r\n            deliveryUpdateShow: deliveryUpdateShow\r\n        })\r\n       // console.log(\"date = \" + this.state.deliveryUpdateShow.delivery.data);\r\n    }\r\n\r\n    onSupplierChange = (selected) => {\r\n        let deliveryUpdateShow = this.state.deliveryUpdateShow;\r\n        deliveryUpdateShow.delivery.supplierId = selected.value;\r\n        deliveryUpdateShow.delivery.supplierName = selected.label;\r\n        this.setState({\r\n            deliveryUpdateShow: deliveryUpdateShow\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.deliveryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.deliveryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"50%\", height:\"73%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>update delivery </h2>\r\n                    {this.state.deliveryUpdateShow.error && this.state.deliveryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.deliveryUpdateShow.error}\r\n                        <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                            onClick={() => {\r\n                                let show = this.state.deliveryUpdateShow;\r\n                                show.error = '';\r\n                                this.setState({ deliveryUpdateShow: show })\r\n                            }}>\r\n                        </i>\r\n                    </div>}\r\n                    <h6 className={this.state.deliveryUpdateShow.error && this.state.deliveryUpdateShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>number :</h6>\r\n                    <input value={this.state.deliveryUpdateShow.delivery.number} disabled />\r\n\r\n                    \r\n                    \r\n                    <h6 className=\"ml-5\">date :</h6>\r\n                    <div>\r\n                    <DatePicker\r\n                            className=\"form-control\"\r\n                            \r\n                        dateFormat=\"dd MMMM yyyy\"\r\n                        locale=\"en-GB\"\r\n                        //selected={(values.date && new Date(values.date))}\r\n                        selected={(this.state.deliveryUpdateShow.delivery.date && new Date(this.state.deliveryUpdateShow.delivery.date)) }\r\n                            onChange={date => {\r\n                                this.onDateChanged(date);\r\n                           // console.log(\"date changed = \" + date);\r\n                            //setFieldValue(\"date\", date)\r\n                            }} />\r\n                    </div>\r\n                    <h6 className=\"ml-5\">supplier :</h6>\r\n                    \r\n                    <CustomSelect\r\n\r\n                        items={this.state.suppliers}\r\n                        value={this.state.deliveryUpdateShow.delivery.supplierId}\r\n                        onChange={(selected) => this.onSupplierChange(selected)}\r\n                        />\r\n                    \r\n                   \r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeliveryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DDInnerComponent.jsx",["579","580","581","582","583","584","585","586","587","588"],"import React, { Component } from 'react';\r\nimport DeliveryDetailDataService from '../service/DeliveryDetailDataService';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\n//import ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport InventoryNumberInnerComponent from './InventoryNumberInnerComponent'\r\n\r\nclass DDInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n            ddUpdateShow: props.ddUpdateShow ,\r\n                items: props.items,\r\n                products: props.products,\r\n            ddmessage: props.ddmessage,\r\n            producterror: null,\r\n            productNums: [],\r\n            numErrors:null,\r\n            quantity:0\r\n\r\n            }\r\n    }\r\n\r\n   \r\n    saveUpdateddd = () => {\r\n        let show = this.state.ddUpdateShow;\r\n        if (this.state.producterror != null) {            \r\n            return\r\n        }\r\n        let x = this.state.ddUpdateShow.x;\r\n        let y = this.state.ddUpdateShow.y;\r\n        let items = this.state.items;\r\n        let item = items[x].deliveryDetails[y];\r\n        let productNums = this.state.productNums;\r\n        \r\n        let productId = (show.dd && show.dd.productId)||null;\r\n        let price = (show.dd && show.dd.pricePerOne)||null;\r\n\r\n        // console.log(\"date.toISOString() = \" + date.toISOString());\r\n        // console.log(\"date = \" + date);\r\n        // console.log(\"new Date(item.date) = \" + new Date(item.date));\r\n        //console.log(\"new Date(item.date) === date \" +(new Date(item.date) === date ));\r\n\r\n        let isError = false;\r\n\r\n        if (!price || !productId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ ddUpdateShow: show });\r\n            isError=true\r\n        } else if (item && productId == item.productId && price == item.pricePerOne) {\r\n            show.error = \"delivery detail hasn't changed\";\r\n            this.setState({ ddUpdateShow: show });\r\n            isError = true\r\n        } else if (productNums.length < 0) {\r\n            show.error = \"delivery detail must have inventories !!!\";\r\n            this.setState({ ddUpdateShow: show });\r\n            isError = true\r\n        } else if (productNums.length > 0) {\r\n\r\n            //let ddErrorNums = values.productNumErrors;\r\n\r\n            let numErrors = this.state.numErrors;\r\n            numErrors = [];\r\n\r\n            for (let i = 0; i < productNums.length; i++) {\r\n                if (productNums[i].name.length < 1) {\r\n                    numErrors[i] = 'required field !!!'; \r\n                    isError = true\r\n                }\r\n                else if (productNums[i].name.length < 4) {\r\n                    numErrors[i] = 'too short !!!';\r\n                    isError = true\r\n                }\r\n                else {                    \r\n                    for (let j = 0; j < i; j++) {\r\n                        if (productNums[i].name == productNums[j].name) {\r\n                            numErrors[i] = 'same number exists !!!';\r\n                            isError = true\r\n                        }\r\n                    }                    \r\n                }\r\n            }\r\n            this.setState({ numErrors: numErrors })\r\n        }\r\n        if (!isError){\r\n            console.log(\"all good\");\r\n            let item = show.dd;\r\n            item.deliveryId = items[x].id;\r\n            item.productNums = productNums;\r\n            console.log(\"in submit delivery d item = \" + JSON.stringify(item));\r\n            DeliveryDetailDataService.save(item)\r\n                .then((response) => {\r\n                    console.log(\"delivery d submit response = \" + response.data);\r\n                    //item.supplierName = (this.state.suppliers.filter(s => s.value == item.supplierId))[0].name;\r\n                    item.id = item.id || response.data;\r\n                    item.quantity = this.state.quantity;\r\n                    y = (y || items[x].deliveryDetails.length );\r\n                    \r\n                    console.log(\"y = \" + y);\r\n                    items[x].deliveryDetails[y] = item;\r\n\r\n                    let total = 0;\r\n                    items[x].deliveryDetails.map(i => total = total + (i.pricePerOne * i.quantity));\r\n                    items[x].total = items[x].deliveryDetails.map(i => i.pricePerOne * i.quantity)\r\n                   \r\n                    //message = \"update successful\"\r\n                    this.props.setItems(items);\r\n                    this.props.updateChildClicked(null);\r\n                    let msg = this.state.ddmessage;\r\n                    msg[x] = \"update successful\";\r\n                    this.props.setddMessage(msg);\r\n                    //this.props.setdeliveryUpdateShow(null)\r\n\r\n\r\n                    //let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n                    // this.props.history.push(path)\r\n                }).catch((error) => {\r\n                    console.log(\"delivery submit error= \" + error.data);\r\n                    show.error = \"errors occured : \" + error + \" !!!\";\r\n                    this.setState({\r\n                        ddUpdateShow: show,\r\n                        numErrors: error.response.data\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    isProductPresent = (value) => {\r\n        let isPresent = false;\r\n\r\n        let x = this.state.ddUpdateShow.x;\r\n        let y = this.state.ddUpdateShow.y;\r\n        let items = this.state.items;        \r\n        let dds = items[x].deliveryDetails;\r\n\r\n        dds.map((dd, i) => {\r\n            if ((y != null && y != i && dd.productId == value) || (y == null && dd.productId == value) )\r\n                isPresent = true\r\n        });\r\n\r\n        return isPresent\r\n    }\r\n\r\n    onProductChange = (selected) => {\r\n               \r\n        let ddUpdateShow = this.state.ddUpdateShow;\r\n        if (ddUpdateShow.dd == null) ddUpdateShow.dd = {}\r\n        ddUpdateShow.dd.productId = selected.value;\r\n        ddUpdateShow.dd.productName = selected.label;\r\n        this.setState({\r\n            ddUpdateShow: ddUpdateShow,\r\n            producterror: this.isProductPresent(selected.value) ? 'product already exist in this delivery !!!' : null\r\n        })\r\n\r\n    }\r\n\r\n    onAddQuantity() {\r\n        console.log(\"in on count change \");\r\n        const productNums = this.state.productNums;\r\n        let quantity = this.state.quantity +1;        \r\n        productNums.push({ value: '', name: '' });\r\n\r\n        this.setState({\r\n            productNums: productNums,\r\n            quantity: quantity\r\n\r\n        })    \r\n    }\r\n\r\n    onChangeProductNums(e, i) {\r\n        let productNums = this.state.productNums || [];        \r\n        productNums[i].name = e.target.value;\r\n        this.setState({ productNums: productNums })\r\n\r\n    }\r\n\r\n    deleteNums(i) {\r\n\r\n        let list = this.state.productNums;\r\n        list.splice(i, 1);\r\n        let quantity = this.state.quantity - 1; \r\n        this.setState({\r\n            productNums: list,\r\n            quantity: quantity\r\n        })  \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n               \r\n                <div className={this.state.ddUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.ddUpdateShow.show ? \"modal d-block\" : \"d-none\"}\r\n                    style={{ width: !this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id ? \"85%\" : \"50%\" , height: \"60%\" }}>\r\n                    <span class=\"close pt-3\" onClick={() => this.props.updateChildClicked(null)}>&times;</span>\r\n                    <h2>{this.state.ddUpdateShow.dd ? \"update\" : \"add\"} delivery detail </h2>\r\n                    \r\n                    <div className=\"d-flex align-items-top  mb-3\">\r\n                    <div className={\r\n                            (!this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id) ? \"inline w40\" : \"\"}>\r\n                            {this.state.ddUpdateShow.error && this.state.ddUpdateShow.error.length > 1 &&\r\n                                <div className=\"alert alert-warning d-flex\">{this.state.ddUpdateShow.error}\r\n                                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                        onClick={() => {\r\n                                            let show = this.state.ddUpdateShow;\r\n                                            show.error = '';\r\n                                            this.setState({ ddUpdateShow: show })\r\n                                        }}>\r\n                                    </i>\r\n                                </div>}\r\n                    <h6 className={this.state.ddUpdateShow.error && this.state.ddUpdateShow.error.length > 1 ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>product : </h6>\r\n                    <CustomSelect\r\n                                className={(!this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id) ? \"w90\" : this.state.producterror ? \"mb-0\" : \"\"}\r\n                        items={this.state.products}\r\n                        value={(this.state.ddUpdateShow.dd && this.state.ddUpdateShow.dd.productId)}\r\n                        \r\n                        onChange={(selected) => this.onProductChange(selected)}\r\n                    />\r\n                    {this.state.producterror &&\r\n                        <div className=\"alert alert-warning d-flex in-error\">{this.state.producterror}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                            onClick={() => {\r\n                                let err = this.state.producterror;\r\n                                err = null;\r\n                                this.setState({ producterror: err })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className=\"ml-5\">price per one :</h6>\r\n                            <input type=\"number\" className=\"form-control\"\r\n                                value={this.state.ddUpdateShow.dd ? this.state.ddUpdateShow.dd.pricePerOne : ''} min=\"0\" onChange={(value) => {\r\n                        let show = this.state.ddUpdateShow;\r\n                        if (show.dd == null) show.dd = {}\r\n                        show.dd.pricePerOne = value.target.value;\r\n                        this.setState({ ddUpdateShow: show })\r\n                        }} />\r\n                        <button className=\"btn btn-mybtn p-x-5 ml-5\" onClick={this.saveUpdateddd}>Save</button>\r\n                        <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" onClick={() => this.props.updateChildClicked(null)}>Cancel</button>\r\n                    </div>\r\n                    {\r\n                            (!this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id) &&\r\n                            <div className=\"w60 scrollable500\">\r\n                            \r\n                            <button className=\"btn btn-mybtn px-5 ml-5 mt-1 mb-1\"\r\n                                onClick={() => { this.onAddQuantity() }}>Add inventory&nbsp;\r\n                                <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i></button>\r\n\r\n                            {\r\n                                this.state.productNums.map((num, i) =>\r\n                                        <div key={i} className=\"ml-1\" >\r\n                                        <label>number {i + 1} :&nbsp;</label>\r\n                                        <input\r\n                                            value={this.state.productNums[i].name}\r\n                                            type=\"text\"\r\n                                            className={'form-control inline w60 m-0 p-1'}\r\n                                            onChange={e => { this.onChangeProductNums(e, i) }} />\r\n                                        {<button className=\"btn btn-mybtn btn-delete m-0 ml-1\" type=\"button\"\r\n                                            onClick={() => {\r\n                                                this.deleteNums(i)\r\n                                            }}>Delete</button>\r\n                                        }\r\n                                        {\r\n                                            this.state.numErrors && this.state.numErrors instanceof Array\r\n                                            && this.state.numErrors[i] &&\r\n                                            <div className=\"alert alert-warning d-inline ml-1\">\r\n                                                {this.state.numErrors[i]}\r\n                                            </div>\r\n                                        }\r\n\r\n                                    </div>\r\n                                )}\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nexport default DDInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDetailDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductDetailInnerComponent.jsx",["589","590","591","592","593","594","595"],"import React, { Component } from 'react';\r\n//import DeliveryDetailDataService from '../service/DeliveryDetailDataService';\r\n//import DeliveryDataService from '../service/DeliveryDataService';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport '../myStyles/Style.css';\r\nimport { Link, withRouter } from 'react-router-dom'\r\n//import ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass ProductDetailInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                pdUpdateShow: props.pdUpdateShow,\r\n               // pd: props.pd,\r\n                message: props.message,\r\n                filter: props.filter,\r\n                \r\n            }\r\n        console.log(\"item = \" + JSON.stringify(this.state.pdUpdateShow.pd));\r\n    }\r\n\r\n    saveUpdatedPd = () => {\r\n\r\n        let x = this.state.pdUpdateShow.x; \r\n        let number = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.inventoryNumber.trim() : null;\r\n        let econdition = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.econdition : null;\r\n        let discarded = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.discarded : null;\r\n\r\n        let previousItem = this.props.items[x];\r\n\r\n        if (number == null || econdition == null || discarded == null) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (number.length == 0) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number can't be empty\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (number == previousItem.inventoryNumber && econdition == previousItem.econdition && discarded == previousItem.discarded) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"item hasn't changed\";\r\n            this.setState({ pdUpdateShow: show })\r\n        }   else {\r\n            let item = {\r\n                inventoryNumber: number, econdition: econdition, discarded: discarded,\r\n                id: this.state.pdUpdateShow.pd.id, deliveryDetailId: this.state.pdUpdateShow.pd.deliveryDetailId                             \r\n            }\r\n           // if (previousItem)\r\n            \r\n            ProductDetailDataService.save(item)\r\n                .then(response => {\r\n                   \r\n                    let items = this.props.items;\r\n                    items[x].inventoryNumber = number;\r\n                    items[x].econdition = econdition;\r\n                    items[x].discarded = discarded;\r\n\r\n                   this.props.updateClicked(null);\r\n\r\n                    let message = this.state.message;                   \r\n                    message = `Update successful`;\r\n\r\n                    this.props.setItems(items);\r\n                    this.props.setMessage(message);                   \r\n\r\n                }).catch(error => {                    \r\n                   /* let errormsg = error.response && error.response.data ?\r\n                        error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n                    let errormsg = Function.getErrorMsg(error);\r\n                    let show = this.state.pdUpdateShow;\r\n                    show.error = errormsg;\r\n                    this.setState({ pdUpdateShow: show })                    \r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    onNumberChange = (value) => {\r\n        let show = this.state.pdUpdateShow;\r\n        if (show.pd == null) show.pd = {};\r\n        show.pd.inventoryNumber = value.target.value;\r\n        show.error = null;\r\n        this.setState({ pdUpdateShow: show })\r\n    }\r\n\r\n    /*onAvailableChange = (value) => {      \r\n        let show = this.state.pdUpdateShow;\r\n        if (show.pd == null) show.pd = {};\r\n        show.pd.available = (value.target.value == 'true');\r\n        show.error = null;\r\n        this.setState({ pdUpdateShow: show })\r\n        console.log(\"state.pd = \" + JSON.stringify(this.state.pdUpdateShow.pd));\r\n    }*/\r\n\r\n    onAddToAccountChange = (value) => {\r\n        let account = this.state.AddToAccount;\r\n       // if (show.pd == null) show.pd = {};\r\n       // show.pd.econdition = value.target.value;\r\n        // show.error = null;\r\n        account = value.target.value\r\n        this.setState({ AddToAccount: account })\r\n    }\r\n\r\n    onConditionChange = (value) => {\r\n        let show = this.state.pdUpdateShow;\r\n        if (show.pd == null) show.pd = {};\r\n        show.pd.econdition = value.target.value;\r\n        show.error = null;\r\n        this.setState({ pdUpdateShow: show })\r\n        // console.log(\"state.pd = \" + JSON.stringify(this.state.pdUpdateShow.pd));\r\n    }\r\n\r\n    onDiscardedChange = (value) => {       \r\n        let show = this.state.pdUpdateShow;\r\n        if (show.pd == null) show.pd = {};\r\n        show.pd.discarded = (value.target.value == 'true');\r\n        show.error = null;\r\n        this.setState({ pdUpdateShow: show })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.pdUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.pdUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"60%\", height: \"65%\", overflow:\"auto\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClicked(null)}>&times;</span>\r\n                    <h2>update inventory</h2>\r\n                    {this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.pdUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.pdUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ pdUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className={this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>number : </h6>\r\n                    <input type=\"text\" className=\"form-control\" value={this.state.pdUpdateShow.pd && this.state.pdUpdateShow.pd.inventoryNumber}\r\n                        onChange={(value) => {\r\n                            this.onNumberChange(value)\r\n                       \r\n                    }} />\r\n                    {/* <div className=\"pr-2 mr-2 mt-3\">\r\n                        <h6 className=\"px-5\">available :</h6>\r\n                        <input\r\n                            className=\"\" type=\"checkbox\" \r\n                            value={true} checked={this.state.pdUpdateShow.pd.available == true}\r\n                            onChange={(value) => {\r\n                                this.onAvailableChange(value)\r\n                                }}\r\n                        /><span className=\" pl-1\" >Available</span>\r\n                                <input\r\n                            className=\"\" type=\"checkbox\" \r\n                            value={false} checked={this.state.pdUpdateShow.pd.available == false}\r\n                            onChange={(value) => {\r\n                                this.onAvailableChange(value)\r\n                                }}\r\n                        /><span className=\"pl-1\" >Missing</span>\r\n                    </div>*/}\r\n                    {//console.log(\"state.filter = \" + JSON.stringify(this.state.filter))\r\n                    }\r\n                    <div className=\"pr-2 mr-2 mt-3\">\r\n                        <h6 className=\" px-5\">condition :</h6>\r\n                        {this.state.filter && this.state.filter.econditions && this.state.filter.econditions.map( (condition) => \r\n                            <>\r\n                            <input\r\n                                className=\"\" type=\"checkbox\"\r\n                                    value={condition.value} checked={this.state.pdUpdateShow.pd.econdition == condition.value}\r\n                                    onChange={(value) => {\r\n                                        this.onConditionChange(value)\r\n                                    }}\r\n                                /> <span className=\"pl-1\" >{condition.name}</span></>\r\n\r\n                       )}\r\n                       \r\n                    </div>\r\n\r\n                    {/* <div>\r\n\r\n                        <p className=\"inline\">current price : {\r\n                            new Intl.NumberFormat(\"en-GB\", {\r\n                                style: \"currency\",\r\n                                currency: \"BGN\",\r\n                                maximumFractionDigits: 2\r\n                            }).format(+this.state.pdUpdateShow.pd.price - +this.state.pdUpdateShow.pd.totalAmortization)}</p>\r\n\r\n                        {this.state.pdUpdateShow.pd.econdition != 'Available' && \r\n                            <>\r\n                           \r\n                            <input\r\n                                className=\"\" type=\"checkbox\"\r\n                                value={'current'} checked={this.state.AddToAccount == 'current'}\r\n                                onChange={(value) => {\r\n                                    this.onAddToAccountChange(value)\r\n                                }}\r\n                            /><span className=\"pl-1\" >add to current account</span>\r\n                            </>\r\n                        }\r\n                    </div>*/}\r\n\r\n                    {/*  <div className=\"pr-2 mr-2 mt-3\">\r\n                        <h6 className=\" px-5\">discarded :</h6>\r\n                        <input\r\n                            className=\"\" type=\"checkbox\"\r\n                            value={true} checked={this.state.pdUpdateShow.pd.discarded == true}\r\n                            onChange={(value) => {\r\n                                this.onDiscardedChange(value)\r\n                                 }}\r\n                        /><span className=\"pl-1\" >Discarded</span>\r\n                        <input\r\n                            className=\"\" type=\"checkbox\" \r\n                            value={false} checked={this.state.pdUpdateShow.pd.discarded == false}\r\n                            onChange={(value) => {\r\n                                this.onDiscardedChange(value)\r\n                                }}\r\n                        /><span className=\"pl-1\" >Alive</span>\r\n                    </div>*/}\r\n                    <button className=\"btn btn-mybtn p-x-5 \" onClick={this.saveUpdatedPd}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5 \" onClick={() => this.props.updateClicked(null)}>Cancel</button>\r\n                    <p style={{ fontSize: \"80%\" }}>ps : to update price or date you must visit the origin of the <Link\r\n                        to={`/deliveries?Filter.number=${this.state.pdUpdateShow.pd.deliveryNumber}&deliveryView=DeliveryDetailView`}>delivery</Link> </p>\r\n                </div>\r\n                \r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nexport default ProductDetailInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserProfileInnerComponent.jsx",["596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615"],"import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport UserProfileDataService from '../service/UserProfileDataService'\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport ProductDetailFilter from './Filters/ProductDetailFilter';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass UserProfileInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                profileShow: props.profileShow,\r\n                items: props.items,\r\n                message: props.message,\r\n                filter: props.filter,\r\n            filteredNumbers: [],\r\n           // search: '?isDiscarded=false&isAvailable=true',\r\n            lastSearch: '?freeInventory=true&isDiscarded=false&isAvailable=true',//props.profileShow.x == null ? '?isDiscarded=false&isAvailable=true&freeInventory=true'\r\n               // : '?isDiscarded=false&isAvailable=true&notIn=' + props.profileShow.profile.productDetailId,\r\n            selectedDate: null,\r\n            filteredcount: '',\r\n            selectedPds: [],\r\n            changedPd: null,\r\n            ChangedUser: null,\r\n            //allInventory:null,\r\n            freeInventory: true,\r\n            notDiscarded: true,\r\n            available: true,\r\n            withUser: !(props.filter.userId == null || props.filter.userId == undefined || props.filter.userId == 'undefined'),//from user account or from main page\r\n           // paidPlus: 0\r\n            \r\n            }\r\n        this.refresh = this.refresh.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n     \r\n        if (this.state.profileShow.x) return;\r\n        ProductDetailDataService.retrieveAllNumbers(this.state.lastSearch)\r\n            .then(response => {\r\n               // console.log(\"got response\");\r\n                console.log(\"this.state.filter.userId = \" + this.state.filter.userId);\r\n                console.log(\"this.state.withuser = \" + this.state.withUser)\r\n\r\n               \r\n                this.setState({\r\n                    filteredNumbers: response.data,\r\n                    filteredcount: response.data.length\r\n                })\r\n\r\n                if (this.state.profileShow.x == null && this.state.filter.productDetailId) {\r\n                    let selected = this.getFilteredInventoty();\r\n                    // if (selected) {\r\n                    //  if (this.state.filteredNumbers.find(n=>n.value == selected.))\r\n                    console.log(\"selected = \" + JSON.stringify(selected));\r\n                    if (selected == null || selected == 'undefined') return;\r\n                    let show = this.state.profileShow;\r\n                    show.profile.inventoryNumber = selected ? selected.name : '';\r\n                    show.profile.productDetailId = selected ? selected.value : null;\r\n                    this.setState({ profileShow: show })\r\n                    // }\r\n                }\r\n\r\n\r\n                // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n            )\r\n\r\n       \r\n\r\n       /* if (this.state.profileShow.x == null && this.state.filter.productDetailId) {\r\n            let selected = this.getFilteredInventoty();\r\n            // if (selected) {\r\n          //  if (this.state.filteredNumbers.find(n=>n.value == selected.))\r\n            console.log(\"selected = \" + selected);\r\n            if (selected = null || selected == 'undefined') return;\r\n            let show = this.state.profileShow;\r\n            show.profile.inventoryNumber = selected ? selected.name : '';\r\n            show.profile.productDetailId = selected ? selected.value : null;\r\n            this.setState({ profileShow: show })\r\n            // }\r\n        }*/\r\n\r\n\r\n    }\r\n\r\n    getFilteredInventoty() {//original\r\n        let filteredInventory = (this.state.filter.productDetailId && this.state.filteredNumbers.length>0) ?\r\n           // this.state.filter.inventoryNumbers.find(n => n.value == this.state.filter.productDetailId &&\r\n           // ((this.state.filteredNumbers.find(f => f.value == n.value)) != 'undefined'))\r\n            this.state.filteredNumbers.find(f => f.value == this.state.filter.productDetailId)\r\n            : null;\r\n        return filteredInventory\r\n    }\r\n\r\n    getFilteredUser() {//original\r\n        let x = this.state.profileShow.x;\r\n        let filteredUser = x != null ?\r\n            { \"value\": this.state.items[x].userId, \"label\": this.state.items[x].userName }\r\n            : (this.state.filter.userId) ? this.state.filter.userNames.find(n => n.value == this.state.filter.userId)\r\n            : null;\r\n        return filteredUser\r\n    }\r\n\r\n    refresh(search) {\r\n       // console.log(\"search = \" + search);\r\n        ProductDetailDataService.retrieveAllNumbers(search)\r\n            .then(response => {\r\n                console.log(\"got response\");\r\n                this.setState({\r\n                    filteredNumbers: response.data,\r\n                    filteredcount: response.data.length\r\n                })\r\n               // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n                )\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        console.log(\"in save updated\");\r\n        let pdlist = this.state.selectedPds;\r\n        let show = this.state.profileShow;\r\n        let withUser = this.state.withUser;\r\n        let item = show.profile;\r\n        let x = this.state.profileShow.x;\r\n        let original = x != null ? this.state.items[x] : null;\r\n       // item.inventoryNumber = item.inventoryNumber ? item.inventoryNumber.trim() : item.inventoryNumber;\r\n       // let previousItem = x!=null&&x!=100 ? this.state.items[x] : null;\r\n       // console.log(\"validate item = \" + JSON.stringify(item));\r\n        //console.log(\"(x==null && pdlist.length < 1)  = \" + (x == null && pdlist.length < 1));\r\n        //console.log(\"(!item.inventoryNumber || !item.givenAt) = \" + (!item.inventoryNumber || !item.givenAt));\r\n       // console.log(\"(x==null && pdlist.length < 1)  = \" + (x == null && pdlist.length < 1));\r\n        console.log(\"validate item  item.paidPlus = \" + (item.paidPlus == undefined));\r\n        if (x==null && withUser && pdlist.length < 1) {\r\n            show.error = 'must at least select 1 inventory !!!'\r\n            this.setState({ profileShow: show })\r\n            console.log(\"error\")\r\n        }\r\n        else if (!item.userId || item.userId == 'undefined') {\r\n            show.error = 'user not selected !!!'\r\n            this.setState({ profileShow: show })\r\n        }\r\n        else if (x == null && !withUser  && (!item.inventoryNumber || item.inventoryNumber == \"undefined\" || item.inventoryNumber.trim().length < 1)) {\r\n            show.error = \"inventory not selected !!!\";//\"all fields are required !!!\"\r\n            this.setState({ profileShow: show })\r\n        }\r\n        else if (!withUser && x != null && original == null) {\r\n            show.error = \"original item not found !!!\";//\"all fields are required !!!\"\r\n            this.setState({ profileShow: show })\r\n        } else if (/*!withUser &&*/ x != null && original.userId == item.userId && original.productDetailId == item.productDetailId &&\r\n            (!item.profileDetail || (item.profileDetail && (item.paidPlus < 1 || item.paidPlus == undefined)))) {\r\n            show.error = \"item hasn't changed !!!\";//\"all fields are required !!!\"\r\n            this.setState({ profileShow: show })\r\n        }\r\n       /* else if (x != null && (!item.inventoryNumber || !item.givenAt)) {            \r\n                show.error = \"all fields are required !!!\"\r\n                this.setState({ profileShow: show })\r\n        }*/\r\n       /* else if (item.returnedAt != null || (item.givenAt!=null &&!item.givenAt.isDateEqual(new Date))) {\r\n            show.error = \"time can't be changed !!!\"\r\n            this.setState({ profileShow: show })\r\n        }*/\r\n       /* else if (previousItem != null && (\r\n                item.productDetailId == previousItem.productDetailId && this.isDateEqual(item.givenAt, previousItem.givenAt) && (\r\n                    (item.returnedAt == null && previousItem.returnedAt == null) || this.isDateEqual(item.returnedAt, previousItem.returnedAt))\r\n                && item.userId == previousItem.userId)) {\r\n                show.error = \"item hasn't changed !!!\";\r\n                this.setState({ profileShow: show });\r\n                console.log(\"error in comparing items\");           \r\n        } */\r\n        else {\r\n          //  console.log(\"comparison pass\")\r\n            let date = (item.givenAt && new Date(item.givenAt)) || new Date();\r\n           // let g = new Date();\r\n            date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n           // console.log(\"g after turn = \" + g);\r\n          //  console.log(\"date = \" + date);\r\n          //  console.log(\"item.givenAt = \" + item.givenAt);\r\n            //console.log(\"typeof date \" + (typeof date));\r\n          //  date = date.toISOString();\r\n            //console.log(\"date = \" + date);\r\n          //  date = date.substring(0, date.indexOf('T'))\r\n            // console.log(\"date = \" + date);\r\n            item.givenAt = date;//????????????\r\n            if (x == null && withUser) {\r\n                let ids = [];                \r\n                pdlist.map(pd => ids.push(pd.value));                \r\n                item.productDetailIds = ids;\r\n               // console.log(\"date2 = \" + item.givenAt);\r\n            }\r\n           // item.profileDetail = null;\r\n            console.log(\"sending item = \" + JSON.stringify(item));\r\n            UserProfileDataService.save(item).then(\r\n                response => {\r\n                    console.log(\"response = \" + response.data);\r\n                    let msg = //x != null ? 'item updated successfully' :\r\n                        pdlist && pdlist.length > 0 ? '' + pdlist.length + ' items have been given to ' + this.state.profileShow.profile.userName + \"'s \" :\r\n                            this.state.profileShow.profile.userName + \"'s profile has been updated successfully \";\r\n                    this.props.updateClicked();\r\n                    this.props.refresh();\r\n                    this.props.setMessage(msg);\r\n                    //this.setState({ message: this.state.selectedUserId != null ? 'product given successfully ' : 'product returned successfully ' })\r\n\r\n                    //this.refresh();\r\n                }).catch(error => {\r\n                    \r\n                    /*let msg = error.response && typeof error.response.data == 'string' ? error.response.data :\r\n                        error.response.data.message ? error.response.data.message : error;*/\r\n\r\n                    let msg = Function.getErrorMsg(error);\r\n                   // console.log(\"error = \" + error);\r\n                  // console.log(\"error.response = \" + error.response);\r\n                    console.log(\"json error = \" + JSON.stringify(error.response));\r\n                    console.log(\"this.state.profileshow = \" + JSON.stringify(this.state.profileShow));\r\n                    show.error = 'error : ' + msg;\r\n                    this.setState({ profileShow: show })\r\n                   this.showError();\r\n                    \r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    showError(msg) {\r\n        let time = 8;\r\n       // let show = this.state.profileShow;\r\n        //show.error = msg;\r\n        //this.setState({ profileShow: show })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                let show = this.state.profileShow;\r\n                show.error = null;\r\n                this.setState({\r\n                    profileShow: show\r\n                })\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    onProductChange = (selected) => {\r\n\r\n       // console.log(\"selected.value = \" + selected.value);\r\n        this.getNewSearch('productId', selected.value);\r\n       // let search = this.getNewSearch('productId', selected.value);\r\n        //this.refresh(search)\r\n\r\n    }\r\n\r\n    onFilterfreeInventoryChange(value) {\r\n        let freeInventory = this.state.freeInventory;\r\n        freeInventory = !freeInventory;\r\n        this.setState({ freeInventory: freeInventory })\r\n\r\n        this.getNewSearch('freeInventory', value.target.value);\r\n    }\r\n\r\n    onFilteravailableChange(value) {\r\n        let available = this.state.available;\r\n        //available = !available;\r\n        this.setState({ available: !available })\r\n\r\n        this.getNewSearch('isAvailable', value.target.value);\r\n\r\n    }\r\n    onFilternotDiscardedChange(value) {\r\n        let discarded = this.state.notDiscarded;\r\n        //available = !available;\r\n        this.setState({ notDiscarded: !discarded })\r\n\r\n        this.getNewSearch('isDiscarded', value.target.value);\r\n    }\r\n\r\n    getNewSearch = (name, value) => {\r\n\r\n        let search = this.state.lastSearch;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (!searchItems[i].startsWith(name))\r\n                    newPath += searchItems[i] + '&'               \r\n            }\r\n        }\r\n\r\n      \r\n        if (value && value != 'undefined')\r\n            newPath += name + '=' + value;\r\n        else {\r\n            if (name == 'notIn') {\r\n                let ids = ''\r\n                this.state.selectedPds.map(pd => ids += pd.value + ',')\r\n                ids = ids.substring(0, ids.length - 1);\r\n                newPath+= name+'='+ids\r\n            }\r\n            else\r\n                newPath = newPath.substring(0, newPath.length - 1);\r\n        }\r\n        //console.log('newPath =' + newPath);\r\n         newPath = '?' + newPath\r\n        this.setState({ lastSearch: newPath })\r\n        this.refresh(newPath)\r\n       // return newPath;\r\n\r\n\r\n    }\r\n    oninventoryAdd = (selected) => {\r\n       // console.log(\"in add inventory\")\r\n        if (selected == null) return;\r\n        if (selected.name == '') return;\r\n        \r\n\r\n        if (this.state.profileShow.x == null && this.state.withUser) {\r\n            let selectedPds = this.state.selectedPds;\r\n            selectedPds.push({ name: selected.label, value: selected.value });\r\n            this.setState({ selectedPds: selectedPds })\r\n            this.getNewSearch('notIn')\r\n        } else {\r\n          //  selectedPds[0] = { name: selected.label, value: selected.value }\r\n            let up = this.state.profileShow;\r\n            up.profile.inventoryNumber = selected.label;\r\n            up.profile.productDetailId = selected.value;\r\n            this.setState({\r\n                profileShow: up,\r\n               // selectedPds: selectedPds,\r\n                changedPd:true\r\n            })\r\n        }\r\n       // console.log(\"this.state.profile = \" + JSON.stringify(this.state.profileShow));\r\n    }\r\n\r\n    onUserChange(selected) {\r\n        console.log(\"label = \" + selected.label + \" value = \" + selected.value);\r\n        let up = this.state.profileShow;\r\n\r\n        let x = up.x;\r\n        if (x == null || x < 0) {\r\n            // this.checkIfUserIsDeleted(selected);\r\n            console.log(\"this.state.filter = \" + JSON.stringify(this.state.filter))\r\n            let found = this.state.filter.userNames.find(n => n.value == selected.value);\r\n            if (found && found.filterBy) {\r\n                up.error = \"user is deleted, can't assign him new inventories !!! \";\r\n                this.setState({ profileShow: up })\r\n                this.showError();\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        up.profile.userName = selected.label;\r\n        up.profile.userId = selected.value;\r\n        this.setState({\r\n            profileShow: up,\r\n            // selectedPds: selectedPds,\r\n            changedUser: true\r\n        })\r\n    }\r\n\r\n    returnOriginalPd() {\r\n\r\n        let up = this.state.profileShow;\r\n        //if (up.x == null) return;\r\n\r\n        let original = this.getFilteredInventoty()//this.state.items[up.x];\r\n        up.profile.inventoryNumber = original == null ? '' : original.name;\r\n        up.profile.productDetailId = original == null ? null : original.value;\r\n        this.setState({\r\n            profileShow: up,\r\n            changedPd:null\r\n        })\r\n    }\r\n\r\n    returnOriginalUser() {\r\n        let up = this.state.profileShow;\r\n       // if (up.x == null) return;\r\n\r\n        let original = this.getFilteredUser()//this.state.items[up.x];\r\n\r\n        up.profile.userId = (original == null) ? null : original.value;\r\n        up.profile.userName = (original == null) ? '...' : original.label;\r\n        this.setState({\r\n            profileShow: up,\r\n            changedUser: null\r\n        })\r\n    }\r\n\r\n    oninventoryRemove (i) {\r\n      // console.log(\"in removeiventory\")\r\n        let selectedPds = this.state.selectedPds;\r\n        selectedPds.splice(i, 1);\r\n        this.setState({ selectedPds: selectedPds })\r\n        this.getNewSearch('notIn')\r\n    }\r\n\r\n\r\n    onFilterDateChange = (date) => {\r\n       // console.log(\"2 = \" + date);\r\n       // if (date != null) console.log(\"type of 2\" + typeof (date));\r\n       // console.log(\"this.state.selectedDate 1 = \" + this.state.selectedDate);\r\n        //if (this.state.selectedDate != null) console.log(\"type of 1\" + typeof(this.state.selectedDate));\r\n        \r\n\r\n        if (this.isDateEqual(this.state.selectedDate, date)) return;\r\n        \r\n       \r\n       if(date) {\r\n            date = date.toISOString();\r\n            date = date.substring(0, date.indexOf('T'))\r\n        } \r\n        /*date = new Intl.DateTimeFormat(\"en-GB\", {\r\n            month: \"numeric\",\r\n            day: \"2-digit\",\r\n            year: \"numeric\",\r\n        }).format(new Date(date));*/\r\n\r\n      //  console.log(\"date form = \" + date);\r\n        this.setState({ selectedDate: date });\r\n        this.getNewSearch('dateCreatedAfter', date);\r\n       // let search = \r\n        \r\n        \r\n    }\r\n\r\n    onDateGivenChange = (date) => {\r\n       // console.log(\"on date change date = \" + date);\r\n        let profileShow = this.state.profileShow;\r\n        profileShow.profile.givenAt = date;\r\n        this.setState({\r\n            profileShow: profileShow\r\n        })\r\n    }\r\n    onDateReturnedChange = (date) => {\r\n       // console.log(\"date = \" + date);\r\n        let profileShow = this.state.profileShow;\r\n        profileShow.profile.returnedAt = date;\r\n        this.setState({\r\n            profileShow: profileShow\r\n        })\r\n    }\r\n\r\n    isDateEqual = (date1, date2) => {\r\n        //date2 string\r\n        // date1 string or date \r\n       // if (!date1) return false;    //???????????????????????\r\n       /* console.log(\"date1 = \" + date1);\r\n        console.log(\"typeof date1 = \" + typeof date1);\r\n        console.log(\" date2 = \" + date2);\r\n        console.log(\"typeof date2 = \" + typeof date2);*/\r\n       \r\n        if (date1 == date2) return true       \r\n        else {\r\n            date1 = new Date(date1);\r\n            date2 = new Date(date2);\r\n            //console.log(\"date1 = \" + date1);\r\n            //console.log(\" date2 = \" + date2);\r\n            if (date1.getFullYear() === date2.getFullYear() &&\r\n                date1.getMonth() === date2.getMonth() &&\r\n                date1.getDate() === date2.getDate())\r\n                return true\r\n        }\r\n        return false\r\n    }\r\n    \r\n\r\n    render() {\r\n       // console.log(\"this.state.profileShow.x = \" + (this.state.profileShow.x ))\r\n       // console.log(\"this.state.profileShow.x == null = \" + (this.state.profileShow.x == null))\r\n        let height = (this.state.profileShow.x == null) ? \"70%\" : this.state.profileShow.profile.profileDetail ? \"65%\" : \"52%\";\r\n        return (\r\n            <>\r\n                {console.log(\"rendering\")}\r\n                <div className={this.state.profileShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.profileShow.show ? \"modal d-block \" : \"d-none\"} style={{ width: \"80%\", height: height , overflow: \"visible\" }} >\r\n\r\n                    <div className=\"\">\r\n                        <span class=\"close pt-2\" onClick={() => this.props.updateClicked(null)}>&times;</span>\r\n                        <h3 className=\"inline pt-3 pl-3 pb-1\">{this.state.profileShow.x != null ? 'Update' : 'Add'} profile &emsp;({this.state.profileShow.profile.userName})</h3>\r\n\r\n                        {this.state.profileShow.x == null && \r\n                            <div className=\"inline pull-right mt-5 mr-5 move-top top-c\">\r\n                                <div className=\"mr-5\">\r\n\r\n                            {/*  <label className=\"\">\r\n                                <input className=\"m-0 \" type=\"radio\" value={!this.state.allInventory}\r\n                                    checked={this.state.allInventory}\r\n                                    onClick={(value) => { }}\r\n                                /><span style={{ fontSize: \"80%\", paddingLeft: \"3px\", marginRight: \"10px\"}}>all inventory</span></label>*/}\r\n                            <label className=\"\">\r\n                                    <input className=\"m-0\" type=\"radio\" value={!this.state.freeInventory}\r\n                                        checked={this.state.freeInventory}\r\n                                      //  onClick={() => { }}\r\n                                    // (value) => {this.onFilterfreeInventoryChange(value) }} \r\n                                    />\r\n                                    <span style={{ fontSize: \"80%\", paddingLeft: \"3px\", marginRight: \"10px\" }}>free inventory</span></label>\r\n                            <label className=\"\">\r\n                                <input className=\"m-0\" type=\"radio\" value={!this.state.available}\r\n                                    checked={this.state.available}\r\n                                   // onClick={\r\n                                    // (value) => { this.onFilteravailableChange(value) }} \r\n                                    />\r\n                                    <span style={{ fontSize: \"80%\", paddingLeft: \"3px\", marginRight: \"10px\" }}>available</span></label>\r\n                \r\n                            <label className=\"mr-5\">\r\n                                <input className=\"m-0\" type=\"radio\" value={!this.state.notDiscarded}\r\n                                    checked={this.state.notDiscarded}\r\n                                   // onClick={\r\n                                    // (value) => { this.onFilternotDiscardedChange(value) }}\r\n                                    />\r\n                                    <span style={{ fontSize: \"80%\", paddingLeft: \"3px\", marginRight: \"10px\" }}>not discarded</span></label>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                        \r\n                    </div>\r\n                   \r\n                   \r\n\r\n                    {this.state.profileShow.x == null &&\r\n                        <div className=\"mt-0 inline w100\">\r\n                            <div className=\"border pt-1 b-r r-c foo\"> {/*********************** small filter **************************/}\r\n                                <label className=\"move-top top-l\" style={{ fontSize: \"80%\" }}>filter for inventory select</label>\r\n\r\n                                <div className=\"inline w40 pr-1\">\r\n                                    <h6>product : </h6>\r\n                                    <CustomSelect\r\n                                        className={\"inline w100 ml-0\"}\r\n                                        items={this.state.filter.productNames}\r\n                                        onChange={(selected) => this.onProductChange(selected)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"inline w20\">\r\n                                    <h6 className=\"\">created after :</h6>\r\n                                    <div className=\"inline w100\">\r\n                                        <DatePicker\r\n                                            className=\"form-control w100 p-2 ml-0\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                            locale=\"en-GB\"\r\n                                            isClearable\r\n                                            placeholderText=\"...\"\r\n                                            selected={this.state.selectedDate && new Date(this.state.selectedDate) || null}\r\n                                            onChange={selected => {\r\n                                                this.onFilterDateChange(selected)\r\n                                            }} />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <span className=\"move-top top-r\" style={{ fontSize: \"80%\" }}> {this.state.filteredcount} items found</span>\r\n                                <div className=\"inline w40\">\r\n                                    <h6 className=\"inline\">select inventory :&nbsp;</h6>\r\n                                    <CustomSelect\r\n                                        className={\"inline w100 ml-0\"}\r\n                                        items={this.state.filteredNumbers}\r\n                                        onChange={(selected) => this.oninventoryAdd(selected)}\r\n                                    />\r\n                                </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                        }\r\n                  \r\n                    {/*******************    filter over  ******************/}\r\n\r\n                    {this.state.profileShow.error && this.state.profileShow.error.length > 1 && // error div\r\n                        <div className=\"alert alert-warning d-flex mx-1\">{this.state.profileShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.profileShow;\r\n                                    show.error = '';\r\n                                    this.setState({ profileShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>\r\n                    }\r\n                    {/***************  form  ********************/}\r\n                    <div className={this.state.profileShow.error && this.state.profileShow.error.length > 1 ?\r\n                        \"d-flex align-items-top flex-wrap\" : \"mt-5 d-flex align-items-top flex-wrap\"}>\r\n\r\n                        <div className=\"inline w40 m-0 \">{/*************** form right **************/}\r\n\r\n                            <div className=\"inline m-0 pl-5\">\r\n                    <h6 >date given :</h6> \r\n                    <div>\r\n                                     <DatePicker\r\n                                        className=\"form-control inline-2-5 p-2\"\r\n                            dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        maxDate={(this.state.profileShow.x!=null && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                            new Date()}\r\n                                        minDate={(this.state.profileShow.x!=null && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                            new Date()}\r\n                                      //  maxDate={this.state.profileShow.profile.returnedAt && new Date(this.state.profileShow.profile.returnedAt) || new Date()}\r\n                /*isClearable\r\n                placeholderText=\"select Date!\"*/\r\n                                       // selected={(this.state.profileShow.profile.givenAt && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                         //   new Date()}\r\n                                        selected={(this.state.profileShow.x!=null && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                           new Date()}\r\n                            onChange={date => {\r\n                                this.onDateGivenChange(date);\r\n                                //console.log(\"date changed = \" + date);                               \r\n                            }} />\r\n                    </div>\r\n                    </div>\r\n\r\n                            <div className=\"inline m-0 px-5\">\r\n                        <h6 >date returned :</h6>\r\n                        <div>\r\n                            <DatePicker\r\n                                            className=\"form-control inline-2-5 p-2\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                            locale=\"en-GB\"\r\n                                            //  minDate={(this.state.profileShow.profile.givenAt && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                            //    !this.state.profileShow.profile.id && new Date()}\r\n                                            // maxDate={new Date()}\r\n                                            /* disabled={(this.state.profileShow.profile.id && this.state.profileShow.profile.id > 0 &&\r\n                                                 this.state.profileShow.profile.returnedAt) ||\r\n                                                 (!this.state.profileShow.profile.id && this.state.profileShow.x == 100 ) ? '' : 'disabled'}*/\r\n                                            disabled\r\n                                            selected={(this.state.profileShow.x!=null && new Date(this.state.profileShow.profile.returnedAt)) || null}\r\n                                                                           // null}\r\n                            /*isClearable\r\n                            placeholderText=\"select Date!\"*/\r\n                                       // selected={(this.state.profileShow.profile.returnedAt && new Date(this.state.profileShow.profile.returnedAt)) || \r\n                               // null}\r\n                               // onChange={date => {\r\n                                   // this.onDateReturnedChange(date);\r\n                                    //console.log(\"date changed = \" + date);                               \r\n                                    // }}\r\n                                    />\r\n                        </div>\r\n                            </div>\r\n                            {\r\n                                this.state.profileShow.x == null &&\r\n                                    <>\r\n                                <div className=\"mt-5 d-flex align-items-center\" >\r\n                                <button className=\"btn btn-mybtn p-x-5 mt-0\" onClick={this.saveUpdated}>Save</button>\r\n                                <button className=\"btn btn-mybtn btn-delete px-5 mt-0\" onClick={() => this.props.updateClicked(null)}>Cancel</button>\r\n                            </div>\r\n                        \r\n                                    <p style={{ fontSize: \"80%\" }}> ps : changing date will change previous records as well and may cause lose of data </p>\r\n                                    </>\r\n                                    }\r\n                        \r\n                        </div> {/*************** form right over  **************/}\r\n\r\n                        <div className=\"inline w60\">{/*************** form left **************/}\r\n                           \r\n                            <h6 className=\"required-field\">selected inventory :</h6>\r\n                            {this.state.profileShow.x == null && this.state.withUser && this.state.selectedPds &&\r\n                               this.state.selectedPds.map((pd, i) =>\r\n                                    <div>\r\n                                        {i + 1} :&nbsp;<input value={pd.name} className='form-control inline w80 m-0 p-2 pl-3' />\r\n\r\n                                        <button className=\"btn btn-mybtn btn-delete m-0 ml-1\" type=\"button\"\r\n                                            onClick={() => {\r\n                                                this.oninventoryRemove(i);\r\n                                            }}><i class=\"fa fa-close ml-auto\">\r\n                                            </i></button>\r\n                                    </div>\r\n                                    )}\r\n                              \r\n                                {(!this.state.withUser || this.state.profileShow.x != null) &&\r\n                                <>\r\n                                <input value={this.state.profileShow.profile.inventoryNumber || ''} className='form-control inline w90 m-0 p-2 pl-3'\r\n                                    //onChange={() => { this.oninventoryAdd(null) }}\r\n                                   // editable={false}\r\n                                />{this.state.changedPd && <i class=\"fa fa-undo ml-1\" onClick={() => { this.returnOriginalPd()}}>\r\n                                </i>}\r\n                                {this.state.profileShow.x==null &&\r\n                                    <p style={{ fontSize: \"70%\" }}> ps : selecting inventory from filter will change current inventory </p>}\r\n                                \r\n                                {/*console.log(\"this.state.profileShow.profile.userId = \" + this.state.profileShow.profile.userId)*/}\r\n                                {/*console.log(\"typeof this.state.profileShow.profile.userId = \" + typeof this.state.profileShow.profile.userId)*/}\r\n                                <h6 className=\"mt-1 required-field\">select user :</h6>\r\n                                <CustomSelect\r\n                                    className={\"b-r inline w80 m-0 p-0\"}\r\n                                    items={this.state.filter.userNames}\r\n                                    value={this.state.profileShow.profile.userId}\r\n                                    onChange={(selected) => this.onUserChange(selected)}\r\n                                />{this.state.changedUser && <i class=\"fa fa-undo ml-1\" onClick={() => { this.returnOriginalUser() }}>\r\n                                </i>}\r\n\r\n                                </>\r\n                            }\r\n\r\n                            \r\n                        </div>{/**********  form left over **********************/}\r\n                    </div>{/*************** form over ********************/}\r\n\r\n                    {this.state.profileShow.x != null &&\r\n                        <>\r\n                        {this.state.profileShow.profile.profileDetail != null &&\r\n                            <div className=\"mt-3 px-5\">\r\n                                <h6>owings :</h6>\r\n                                <div className=\"d-flex alighn-items-top\">\r\n                                    <div className=\"w20\">\r\n                                        <p>created at : </p><p>{this.state.profileShow.profile.profileDetail.createdAt}</p>\r\n                                    </div>\r\n                                    <div className=\"w20\">\r\n                                        <p>modified at : </p><p>{this.state.profileShow.profile.profileDetail.modifiedAt}</p>\r\n                                    </div>\r\n                                    <div className=\"w20\">\r\n                                        <p>owed amount : </p><p>{new Intl.NumberFormat(\"en-GB\", {\r\n                                            style: \"currency\",\r\n                                            currency: \"BGN\",\r\n                                            maximumFractionDigits: 2\r\n                                        }).format(this.state.profileShow.profile.profileDetail.owedAmount)}</p>\r\n                                    </div>\r\n                                    <div className=\"w20\">\r\n                                        <p>paid amount : </p><p>{new Intl.NumberFormat(\"en-GB\", {\r\n                                            style: \"currency\",\r\n                                            currency: \"BGN\",\r\n                                            maximumFractionDigits: 2\r\n                                        }).format(this.state.profileShow.profile.profileDetail.paidAmount)}</p>\r\n                                </div>\r\n                                {!this.state.profileShow.profile.profileDetail.cleared &&\r\n                                    <div className=\"w20\">\r\n                                        <p>paid plus : </p><input className=\"inline m-0 ml-2 p-1 form-control px100\"\r\n                                            min=\"0\"\r\n                                            max={this.state.profileShow.profile.profileDetail.owedAmount}\r\n                                            value={this.state.profileShow.profile.paidPlus}\r\n                                            onChange={(value) => {\r\n                                                if (value.target.value > this.state.profileShow.profile.profileDetail.owedAmount) return;\r\n                                                let profileShow = this.state.profileShow;\r\n                                                profileShow.profile.paidPlus = value.target.value;\r\n                                                this.setState({ profileShow: profileShow })\r\n                                            }}\r\n                                            type=\"number\" />\r\n                                    </div>\r\n                                }\r\n                                {this.state.profileShow.profile.profileDetail.cleared &&\r\n                                    <div>\r\n                                        <p className=\"p-0\">cleared :</p>\r\n                                    <i class=\"fa fa-check ml-1\"/>\r\n                                    </div>    \r\n                                    /*<button className=\"button btn-delete m-1\" onClick={() => {\r\n                                    let show = this.state.profileShow;\r\n                                    show.profile.paidPlus = null;\r\n                                    show.profile.profileDetail = null;\r\n                                    this.setState({\r\n                                        profileShow: show,\r\n                                    rememberToSave:true})\r\n                                }}>delete owings</button>*/\r\n                                }\r\n                                </div>\r\n                            </div>}\r\n                      \r\n                            <div className=\"mt-3\" >\r\n                                <button className=\"btn btn-mybtn p-x-5 m-0 ml-5\" onClick={this.saveUpdated}>Save</button>\r\n                            <button className=\"btn btn-mybtn btn-delete px-5 m-0 ml-5 mr-5\" onClick={() => this.props.updateClicked(null)}>Cancel</button>\r\n                            {this.state.rememberToSave && <p className=\"inline ml-5\" style={{ fontSize:\"70%\" }}>ps : don't forget to save otherwise your changes won't be affected </p>}\r\n                            \r\n                           \r\n                        </div>\r\n                        <p style={{ fontSize: \"80%\" }}> ps : changing date will change previous records as well and may cause lose of data </p>\r\n                           \r\n                        </>}\r\n                   \r\n                    </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfileInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\TimelineInnerComponent.jsx",["616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633"],"import React, { Component } from 'react';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport UserProfileDataService from '../service/UserProfileDataService';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass TimelineInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                items: [],      \r\n                filter: props.filter,\r\n                users:[],\r\n                firstId: '',\r\n                lastId: '',\r\n            count: 0,\r\n            totalCount: 0,\r\n                errormsg: null,\r\n                givenAtErrors:null,\r\n                returnAtErrors: null,\r\n                timeErrors: null,\r\n            deletedIds: null,\r\n            filteredInventory: '...'\r\n            \r\n            }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n   \r\n    componentDidMount() {      \r\n        let search = this.getSearch();\r\n        if(search != null)\r\n            this.refresh(search)       \r\n    } \r\n\r\n    getSearch() {   \r\n\r\n        this.nullifyErrors();\r\n\r\n        if (!this.state.filter) { this.showError(\"loading error !!!\"); return }\r\n        \r\n        if (!this.state.filter.productDetailId || //!this.state.filter.givenAfter ||\r\n            this.state.filter.productDetailId == 'undefined'// || this.state.filter.givenAfter!= 'undefined'\r\n        ) {\r\n            let msg = \"select inventory to activate this search, and preferably limit timeline \";\r\n            this.showError(msg);\r\n            return null;\r\n        }\r\n\r\n        let givenAfter = this.state.filter.givenAfter && this.state.filter.givenAfter != 'undefined' ? this.state.filter.givenAfter : null;\r\n        let returnedBefore = this.state.filter.returnedBefore && this.state.filter.returnedBefore != 'undefined' ? this.state.filter.returnedBefore : null;\r\n        console.log(\"givenAfter = \" + givenAfter);\r\n        console.log(\"returnedBefore = \" + returnedBefore);\r\n        let search = `?productDetailId=` + this.state.filter.productDetailId;//\r\n        search += givenAfter ? `&givenAfter=` + givenAfter : '';\r\n        search += returnedBefore ? `&returnedBefore=` + returnedBefore : ``;\r\n        console.log(\"timeLineSearch = \" + search);\r\n        return search;        \r\n    }\r\n\r\n    nullifyErrors = () => {      \r\n            this.setState({\r\n                errormsg: null,\r\n                givenAtErrors: null,\r\n                returnAtErrors: null,\r\n                timeErrors: null\r\n            })\r\n\r\n        if (this.myInterval)\r\n            clearInterval(this.myInterval)\r\n\r\n    }\r\n\r\n    nulifyErrors(setFieldValue) {\r\n        setFieldValue(\"givenAtErrors\", null);\r\n        setFieldValue(\"returnAtErrors\", null);\r\n        setFieldValue(\"timeErrors\", null);\r\n        this.nullifyErrors();\r\n    }   \r\n\r\n    showError(msg , time) {\r\n       // let time = 10;\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(({ errormsg }) => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }      \r\n\r\n    refresh(search) {\r\n        UserProfileDataService.retrieveTimeline(search)\r\n            .then(\r\n            response => {\r\n                console.log(\"response = \" + JSON.stringify(response))\r\n                let users = this.state.users;\r\n               // console.log(\"users.length = \" + users.length);\r\n               // console.log(\"users.length <1 = \" + (users.length < 1));\r\n               // console.log(\"users.length ==0 = \" + (users.length == 0));\r\n                if (users.length < 1) {   \r\n                   // console.log(\"pushing new select into users \");\r\n                    users = this.state.filter.userNames;\r\n                   users.push(response.data.select);\r\n                    this.setState({ users: users})\r\n                }   \r\n                this.setStateFromResponse(response);\r\n                   /* this.setState({\r\n                        items: response.data.items || [],\r\n                        firstId: response.data.firstId,\r\n                        lastId: response.data.lastId,\r\n                        count: response.data.count,\r\n                        totalCount: response.data.totalCount,\r\n                       \r\n                        msg: response.data.message,\r\n                        filteredInventory: this.getFilteredInventoty()\r\n                });*/\r\n\r\n                this.props.updateLink(search)\r\n                }\r\n        ).catch((error) => {\r\n            console.log(\"error = \" + JSON.stringify(error))\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg)             \r\n            })\r\n    }\r\n\r\n    setStateFromResponse(response) {\r\n        this.setState({\r\n            items: response.data.items || [],\r\n            firstId: response.data.firstId,\r\n            lastId: response.data.lastId,\r\n            count: response.data.count,\r\n            totalCount: response.data.totalCount,\r\n\r\n            msg: response.data.message,\r\n            filteredInventory: this.getFilteredInventoty()\r\n        });\r\n    }\r\n\r\n    getFilteredInventoty() {  //original\r\n        let filteredInventory =\r\n            this.state.filter.inventoryNumbers.find(n => n.value == this.state.filter.productDetailId).name ;\r\n        return filteredInventory\r\n\r\n        /*(this.state.filter.productDetailId) ?\r\n            this.state.filter.inventoryNumbers.find(n => n.value == this.state.filter.productDetailId)//.name\r\n            : null;\r\n        return filteredInventory ? filteredInventory.name : ''*/\r\n    }\r\n\r\n    getNewFilter(filter) {\r\n        //console.log(\"gotnew Filter = \" + JSON.stringify(filter))\r\n        let originFilter = this.state.filter;\r\n        originFilter.productDetailId = filter.productDetailId;\r\n        originFilter.givenAfter = filter.givenAfter;\r\n        originFilter.returnedBefore = filter.returnedBefore;\r\n       \r\n        this.setState({ filter: originFilter },\r\n            () => {\r\n               // console.log(\"this.state.filter.returnedBefore = \" + (this.state.filter.returnedBefore));\r\n                let search = this.getSearch();\r\n                if (search != null) {\r\n                    this.refresh(search)\r\n                }    \r\n            }\r\n        );\r\n         \r\n    }\r\n\r\n    convertDate(g) {\r\n        if (g == null) return\r\n        g = new Date(g);\r\n        g.setHours(g.getHours() - g.getTimezoneOffset() / 60);\r\n        return g;\r\n    }\r\n    onSubmit(values) {       \r\n       // values.items.map(i => {\r\n       //     this.convertDate(i.givenAt);\r\n       //     this.convertDate(i.returnedBefore)          \r\n        // })  \r\n        //console.log(\"values = \" + values.items[0].givenAt);\r\n        //console.log(\"values after stringify = \" + JSON.stringify(values));\r\n        /*let item = [...values];\r\n        item.submitProductDetailId = this.state.filter.productDetailId;\r\n        item.submit*/\r\n        values.submitProductDetailId = this.state.filter.productDetailId;\r\n        values.submitGivenAfter = this.convertDate(this.state.filter.givenAfter);\r\n        values.submitReturnedBefore = this.convertDate(this.state.filter.returnedBefore);\r\n\r\n        console.log(\"values to submit = \" + JSON.stringify(values));\r\n\r\n\r\n        UserProfileDataService.saveTimeline(values)\r\n            .then( response => {               \r\n                // let msg = response.data + ' items saved';\r\n                let msg = response.data.items.length + 'items saved';\r\n                msg += values.deletedIds && values.deletedIds.length > 0 ? ', ' + values.deletedIds.length + ' deleted' : '';\r\n                msg += ' successfully';\r\n                this.setState({ message: msg }) \r\n                this.setStateFromResponse(response) \r\n                             \r\n            }).catch((error) => {               \r\n                let msg = Function.getErrorMsg(error);             \r\n                this.showError(msg);               \r\n                if (error.response && typeof error.response.data == 'object' && error.response.data.items != null) {                  \r\n                    this.setState({                      \r\n                        items: error.response.data.items,\r\n                        givenAtErrors: error.response.data.givenAtErrors,\r\n                        returnAtErrors: error.response.data.returnAtErrors,\r\n                        timeErrors: error.response.data.timeErrors\r\n                    })\r\n                }\r\n         })\r\n    }\r\n\r\n   /* setErrorsItem(errors, i) {\r\n        if (errors.items == null) errors.items = [];\r\n        if (errors.items[i] == null) errors.items[i] = {};\r\n        return errors\r\n    }*/\r\n\r\n    validate(values) {\r\n        console.log(\"validating\");\r\n        let errors = {}\r\n        values.items.map((item, i) => {\r\n                    \r\n            if (item.givenAt == null) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].givenAt = 'field is required !!!'\r\n            }\r\n            if ((values.items.length - 1) != i && item.returnedAt == null) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = 'field is required !!!'\r\n            }\r\n            if (item.returnedAt != null && new Date(item.returnedAt) < new Date(item.givenAt)) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = \"can't be before given at !!!\"\r\n            }\r\n            if (item.returnedAt != null && new Date(item.returnedAt) > new Date()) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = \"can't be after today !!!\"\r\n            }\r\n\r\n            if (new Date(item.givenAt) > new Date()) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].givenAt = \"can't be after today !!!\"\r\n            }\r\n\r\n            if (!item.userId || item.userId == 'undefined') {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].userId = \"user not selected !!!\"\r\n            }\r\n        })     \r\n        console.log(\"done validating\");\r\n        console.log(\"errors = \" + JSON.stringify(errors));\r\n        return errors\r\n    }\r\n\r\n    onprofileRemove(i, values, setFieldValue) {\r\n      //  this.nulifyErrors(setFieldValue);      \r\n        let items = values.items;\r\n        let deletedIds = values.deletedIds;\r\n        if (items[i].id != null) {\r\n            if (deletedIds == null) deletedIds = [];\r\n            deletedIds.push(items[i].id)\r\n        }\r\n        items.splice(i, 1);      \r\n        setFieldValue(\"items\", items);\r\n        setFieldValue(\"deletedIds\", deletedIds);\r\n    }\r\n\r\n    onprofileAdd(i, values, setFieldValue) {\r\n       \r\n       // this.nulifyErrors(setFieldValue);     \r\n        let items = values.items;\r\n        if (items.length == 25) {\r\n            this.showError(\"maximum number reached !!!\");\r\n            return;\r\n        }\r\n        let item = { id: null, productDetailId: this.state.filter.productDetailId, userId: null, givenAt: null, returnedAt: null };\r\n        items.splice(i + 1, 0, item); //arr.splice(index, 0, item); will insert item into arr at the specified index (deleting 0 items first,\r\n        setFieldValue(\"items\", items);\r\n    }\r\n\r\n   \r\n\r\n    getStringDate(date) {\r\n        date = this.convertDate(date);\r\n        date = date.toISOString();\r\n        date = date.substring(0, date.indexOf('T'));\r\n        return date;\r\n    }\r\n\r\n    checkDeleted(selected) {\r\n        //if (this.checkDeleted(selected)) return;\r\n        let found = this.state.users.find(n => n.value == selected.value);\r\n        if (found && found.filterBy) {\r\n            // up.error = \"user is deleted, can't assign him new inventories !!! \";\r\n            //this.setState({ profileShow: up })\r\n            this.showError(\"user is deleted, can't assign him new profiles !!! \", 2);\r\n            // showError(msg)\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    checkIsValidDate(date, id) {\r\n       // let deletedDate = null;\r\n        let found = this.state.users.find(n => n.value == id);\r\n        if (found) {\r\n            //deletedDate = found.filterBy;\r\n            if (date > new Date(found.filterBy)) {\r\n                this.showError(\"can't assign date greater than deletion date of the user !!! \", 2);\r\n                return false;\r\n            }\r\n            \r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let { items, firstId, lastId, count, givenAtErrors, returnAtErrors, timeErrors, deletedIds } = this.state;       \r\n        let minDate = this.state.items[0] && new Date(this.state.items[0].givenAt);\r\n        let length = this.state.items.length;\r\n        let maxDate = (length > 0 && this.state.items[length - 1].returnedAt && new Date(this.state.items[length - 1].returnedAt))|| new Date();\r\n       \r\n        return (\r\n            <Formik\r\n                initialValues={{ items, firstId, lastId, count, givenAtErrors, returnAtErrors, timeErrors , deletedIds}}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n            >\r\n                {({ setFieldValue, values, dirty }) => (                       \r\n                    <Form>\r\n                        {//console.log(\"values = \" + JSON.stringify(values))\r\n                        }\r\n                            <div className=\"pt-2 px-2 mx-3 d-flex flex-wrap \">\r\n                                <div >\r\n                                <button className=\"button btn-mybtn\" style={{ padding: \".3rem 1.8rem .4rem 1.8rem\" }}\r\n                                    disabled={!dirty} type=\"submit\">Save changes</button>\r\n                                <button className=\"button btn-delete\" style={{ padding: \".3rem 1.8rem .4rem 1.8rem\" }}\r\n                                   type=\"reset\"  onClick={() => { }}>Cancel</button>\r\n                                </div>\r\n                                 <div className=\"ml-auto mr-5\">\r\n                                <div >\r\n                                    <label className=\"pager-label mr-3\">showing&nbsp;{this.state.items.length>0?1:0}-{this.state.count}&nbsp; of &nbsp; {this.state.totalCount}</label>\r\n                                    <label className=\"pager-label mr-3\">for &nbsp;{this.state.filteredInventory}</label>\r\n                                     </div>\r\n                                      {this.state.msg && <p style={{ fontSize: \"70%\", marginLeft:\"30%\" }}>  {this.state.msg}  </p>}\r\n                                 </div>\r\n                             </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}</div>}\r\n                                <table className=\"table border-bottom my-table mt-2\">\r\n                                 <thead>\r\n                                 <tr className=\"\">\r\n                                    <th style={{ width: \"30px\" }}></th>\r\n                                    <th className=\"wl\">user</th>\r\n                                    <th className=\"w20\">given at</th>\r\n                                    <th className=\"w20\">returned at</th>\r\n                                    <th ></th>\r\n                                        </tr>\r\n                            </thead></table>\r\n                        {values.items && values.items.map((item, i) =>\r\n                                <fieldset key={item.id || i} className=\"d-flex align-items-top pb-1 pt-1 w100\">                                   \r\n                                  <div className=\"inline\" style={{ width: \"30px\" }}>{i + 1}-</div>\r\n                                    <div className=\"inline wl\">                                           \r\n                                            <CustomSelect\r\n                                        className={\"inline inline-3\"}\r\n                                        items={this.state.users}\r\n                                        value={values.items[i].userId}\r\n                                        onChange={(selected) => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            if (this.checkDeleted(selected)) return;\r\n                                           /* let found = this.state.users.find(n => n.value == selected.value);\r\n                                            if (found && found.filterBy) {\r\n                                                // up.error = \"user is deleted, can't assign him new inventories !!! \";\r\n                                                //this.setState({ profileShow: up })\r\n                                                this.showError(\"user is deleted, can't assign him new profiles !!! \", 2);\r\n                                                // showError(msg)\r\n                                                return;\r\n                                            }*/\r\n                                            setFieldValue(`items.${i}.userId`, selected.value)\r\n                                        }} />\r\n                                    <ErrorMessage name={`items.${i}.userId`} component=\"div\"\r\n                                        className=\"alert alert-warning mbt-01 p-2 inline-3\" /> \r\n                                    </div>\r\n                                    <div className=\"inline w20\">                                          \r\n                                    <DatePicker className=\"form-control inline-2\"\r\n                                        dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        disabled={item.id == firstId}\r\n                                        minDate={minDate}\r\n                                        maxDate={maxDate}\r\n                                        selected={(values.items[i].givenAt && new Date(values.items[i].givenAt)) || null}\r\n                                        onChange={date => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            setFieldValue(`items.${i}.givenAt`, this.getStringDate(date))\r\n                                        }} />\r\n                                    <ErrorMessage name={`items.${i}.givenAt`} component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01 p-2 inline-2\" /> \r\n                                        {values.givenAtErrors instanceof Array\r\n                                            && values.givenAtErrors[i]\r\n                                            &&<div className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\">\r\n                                            {values.givenAtErrors[i]}</div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"inline w20\">                                            \r\n                                    <DatePicker className=\"form-control inline-2\"\r\n                                        dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        disabled={item.id == lastId}\r\n                                        maxDate={maxDate}\r\n                                        selected={(values.items[i].returnedAt && new Date(values.items[i].returnedAt)) || null}\r\n                                        onChange={date => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            if (!this.checkIsValidDate(date, item.id)) return;\r\n                                            setFieldValue(`items.${i}.returnedAt`, this.getStringDate(date))\r\n                                        }} />\r\n                                        <ErrorMessage name={`items.${i}.returnedAt`} component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01 p-2 inline-2\"/>\r\n                                        {values.returnAtErrors instanceof Array\r\n                                            && values.returnAtErrors[i]\r\n                                            &&<div className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\">\r\n                                                {values.returnAtErrors[i]}</div>\r\n                                        }\r\n                                        {values.timeErrors instanceof Array\r\n                                        && values.timeErrors[i]\r\n                                        &&<div className=\"alert alert-warning mr-3 mbt-01 p-1 pl-2\">\r\n                                            {values.timeErrors[i]}</div>\r\n                                    }\r\n                                    </div>\r\n                                    <div className=\"inline\">                                       \r\n                                        <button className=\"btn btn-mybtn btn-delete m-0 ml-1\" type=\"button\"\r\n                                            disabled={item.id == this.state.firstId || item.id == this.state.lastId}\r\n                                        onClick={() => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            this.onprofileRemove(i, values, setFieldValue);\r\n                                            }}><i class=\"fa fa-close ml-auto\"></i></button>                                       \r\n                                        {values.items.length - 1 != i &&\r\n                                            <button className=\"btn btn-mybtn m-0 ml-1\" type=\"button\"\r\n                                        onClick={() => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            this.onprofileAdd(i, values, setFieldValue);\r\n                                                }}><i class=\"fa fa-plus ml-auto\"></i></button>\r\n                                        }\r\n                                    </div>\r\n                                    </fieldset>\r\n                                    )} \r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimelineInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CountryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCitiesComponent.jsx",["634"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport CityFilter from './Filters/CityFilter';\r\nimport '../myStyles/Style.css';\r\n\r\nclass ListCitiesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',           \r\n            message: null,\r\n           \r\n\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        // this.deleteChildClicked = this.deleteChildClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"version = \" + React.version);\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        console.log(\"search = \" + this.state.search);\r\n        CountryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                       \r\n                    });\r\n                }).catch((error) => {\r\n                    this.setState({\r\n                        errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n                    })\r\n                })\r\n    }\r\n\r\n    addClicked() {\r\n        \r\n    }\r\n    updateClicked(id) {\r\n        \r\n    }\r\n    deleteClicked(id) {\r\n       \r\n    }\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n\r\n    render() {\r\n      \r\n        return (\r\n            <div className=\"px-3\">\r\n\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                {this.state.filter && <CityFilter {...this.state.filter} />}\r\n               \r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Countries</strong>\r\n                        </h5>\r\n                       \r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                \r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n                       \r\n                            <table className=\"table border-bottom my-table\" >\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">name</th>\r\n                                        <th scope=\"col\" >zone</th>\r\n                                        <th scope=\"col\" >country</th>\r\n                                        <th >currency</th>\r\n                                        <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.state.items.map(\r\n                                            item =>\r\n                                                <tr>\r\n                                                    <td>{item.name}</td>\r\n                                                    <td>\r\n                                                        {item.timeZone}\r\n                                                    </td>\r\n                                                    <td >{item.country.name}</td>\r\n                                                    <td >{item.country.currency}</td>\r\n                                                    <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                        <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                        )}\r\n                                </tbody>\r\n                            </table>                       \r\n                    </div>\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCitiesComponent",["635","636"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CityFilter.jsx",["637","638","639","640","641"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass CityFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            countries: props.countries,\r\n            countryId: props.countryId,\r\n            cities: props.cities,\r\n            filteredcities: props.cities,\r\n            cityId: props.cityId,\r\n            zones: props.zones,\r\n            timeZone: props.timeZone,\r\n            currencies: props.currencies,\r\n            currency: props.currency,\r\n            prefix: props.prefix,\r\n        }      \r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values = \" + JSON.stringify(values));\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n           \r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {               \r\n                newPath += prefix + '.' + key + '=' + value + '&'                \r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log(\"new path = \" + newPath);\r\n        newPath = path + '?' + newPath;       \r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        window.location.href = window.location.pathname;\r\n       \r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { countries, countryId, cities, cityId, zones, timeZone, currencies, currency, filteredcities} = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ countries, countryId, cities, cityId, zones, timeZone, currencies, currency, filteredcities }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                           \r\n                            <div className=\"inline\">\r\n                                <label >country&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={countries}\r\n                                    value={values.countryId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"countryId\", selected.value);\r\n                                        let subs = values.filteredcities;\r\n                                        subs = []\r\n                                        for (let i = 0; i < cities.length; i++) {\r\n\r\n                                            if (cities[i].filterBy == selected.value) {\r\n                                                subs.push(cities[i])\r\n                                            }\r\n                                        }\r\n                                        setFieldValue(\"filteredcities\", subs);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >cities&nbsp;</label>\r\n                                <CustomSelect                                  \r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredcities || filteredcities || cities}\r\n                                    value={values.cityId || ''}\r\n                                    onChange={(selected) => setFieldValue(\"cityId\", selected.value)}                                \r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >time zone&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.zones}\r\n                                    value={values.timeZone || ''}\r\n                                    onChange={(selected) => setFieldValue(\"timeZone\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >currency&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.currencies}\r\n                                    value={values.currency || ''}\r\n                                    onChange={(selected) => setFieldValue(\"currency\", selected.value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCountriesComponent.jsx",["642","643","644","645","646"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport CityFilter from './Filters/CityFilter';\r\nimport '../myStyles/Style.css';\r\nimport CountryInnerComponent from './CountryInnerComponent';\r\nimport CityInnerComponent from './CityInnerComponent';\r\n\r\n\r\nclass ListCountriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            countryUpdateShow: {\r\n                country: {}, show: false\r\n            },\r\n            cityUpdateShow: {\r\n                city: {}, show: false\r\n            },\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)        \r\n       // this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"version = \" + React.version);\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        console.log(\"search = \" + this.state.search);\r\n        CountryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n\r\n                    });\r\n                }).catch((error) => {\r\n                    this.setState({\r\n                        errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n                    })\r\n                })\r\n    }\r\n\r\n    addClicked() {\r\n\r\n    }\r\n    updateClickedInner = (item) => {\r\n        /* let messages = this.state.message;\r\n         if (messages != null )\r\n             messages = null;*/\r\n        item = item || {};\r\n        let show = this.state.countryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n           \r\n            show.country = JSON.parse(JSON.stringify(item))\r\n           \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            countryUpdateShow: show,\r\n            message: null,\r\n            pdmessage: [],\r\n            ddmessage: []\r\n        });\r\n    }\r\n    updateClickedInnerChild = (item) => {\r\n        /* let messages = this.state.message;\r\n         if (messages != null )\r\n             messages = null;*/\r\n        item = item || {};\r\n        let show = this.state.cityUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.city = JSON.parse(JSON.stringify(item))\r\n\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            cityUpdateShow: show,\r\n            message: null,            \r\n        });\r\n    }\r\n    deleteClicked(id) {\r\n        CountryDataService.delete(id)\r\n            .then(response => {                    \r\n                    this.setState({\r\n                        message: `Delete successful`,                       \r\n                    })\r\n                    this.refresh()\r\n            }).catch(error => {\r\n               \r\n            this.setState({\r\n                        errormsg: \"can't delete item with associated records !!!\" \r\n                    })\r\n            })\r\n    }\r\n    deleteChildClicked(id) {\r\n        CountryDataService.deleteChild(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                this.setState({\r\n                    errormsg: \"can't delete item  with associated records !!!\"\r\n                })\r\n            })\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"px-3\">\r\n                {this.state.countryUpdateShow && this.state.countryUpdateShow.show == true &&\r\n                    <CountryInnerComponent\r\n                    countryUpdateShow={this.state.countryUpdateShow}\r\n                    updateClickedInner={() => this.updateClickedInner(null)}\r\n                    setMessage={(value) => this.setState({ message: value })}\r\n                    refresh={()=>this.refresh()}\r\n                    \r\n                    />}\r\n                {this.state.cityUpdateShow && this.state.cityUpdateShow.show == true &&\r\n                    <CityInnerComponent\r\n                       cityUpdateShow={this.state.cityUpdateShow}\r\n                        updateClickedInnerChild={() => this.updateClickedInnerChild(null)}\r\n                        setMessage={(value) => this.setState({ message: value })}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                {this.state.filter && <CityFilter {...this.state.filter} />}\r\n\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Countries</strong>\r\n                        </h5>\r\n\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={()=>this.updateClickedInner({})}>Add New</button>\r\n\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n\r\n                        {this.state.items.map(\r\n                                         (item) =>\r\n                                            <div className=\"panel-body\">\r\n                            <table className=\"table border table-s\">\r\n                                <tbody>\r\n                                                         <tr >\r\n                                                             <th>code : {item.code}</th>\r\n                                        <th className=\"wl pl-5\"\r\n                                            > Name : {item.name} </th>\r\n                                        <th className=\"wl pl-3\"                                           \r\n                                                             > Currency : {item.currency}</th>\r\n                                                             <th>phone code : {item.phoneCode}</th>\r\n                                        <th className=\"d-flex justify-content-end mr-1\">\r\n                                                                 <button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                            <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colspan=\"3\">\r\n                                                                 <table className=\"ml-5 mb-3 x-Table\" style={{ width: '60%' }}>\r\n                                                <tr><td>city</td>\r\n                                                    <td className=\"pl-5\">time zone</td>\r\n                                                    <td style={{ width: '140px', padding: '.2rem .5rem' }}>\r\n                                                        <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                 onClick={() => this.updateClickedInnerChild({ \"countryId\": `${item.id}`})}>add one</button>\r\n                                                    </td></tr>\r\n                                                {item.cities&&item.cities.map((c, i) =>\r\n                                                    <tr>\r\n                                                        <td >{c.name}</td>\r\n                                                        <td className=\"pl-5 pb-3\"\r\n                                                            > {c.timeZone}\r\n                                                        </td>\r\n                                                        <td><button className=\"btn btn-mybtn mr-1\" onClick={() => {\r\n                                                            this.updateClickedInnerChild(c)\r\n                                                        }}>Update</button>\r\n                                                            <button className=\"btn btn-mybtn btn-delete\"\r\n                                                                onClick={() => this.deleteChildClicked(c)}>\r\n                                                                Delete</button></td>\r\n                                                    </tr>\r\n                                                )}\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                                                 </table>\r\n                                             </div>\r\n                                                 )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCountriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CountryInnerComponent.jsx",["647","648"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass CountryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n                countryUpdateShow: props.countryUpdateShow,\r\n                allCountries: [],               \r\n                currencies: [],\r\n                allPhoneCodes: []\r\n            }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    refresh(search) {\r\n        // console.log(\"search = \" + search);\r\n        CountryDataService.retrieve(this.state.countryUpdateShow.country.id||-1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    allCountries: response.data.allCountries||[],\r\n                    currencies: response.data.currencies||[],\r\n                    allPhoneCodes: response.data.allPhoneCodes||[]\r\n                })\r\n                // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n            )\r\n    }\r\n\r\n    saveUpdated = () => {\r\n\r\n        let item = this.state.countryUpdateShow.country;\r\n        if (!item.name || item.name == \"undefined\" || !item.currency || item.currency == \"undefined\") {\r\n            let show = this.state.countryUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ pdUpdateShow: show })       \r\n        } else {\r\n            CountryDataService.save(item)\r\n                .then(response => {\r\n                    let msg = this.state.countryUpdateShow.country.id && this.state.countryUpdateShow.country.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInner(null);\r\n                    this.props.setMessage(msg);\r\n                    this.props.refresh();\r\n                }).catch(error => {\r\n                    /*let errormsg = error.response && error.response.data ?\r\n                        error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n                    let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.countryUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ countryUpdateShow: show })\r\n                })\r\n        }\r\n       \r\n    }\r\n\r\n    onNameChange(selected) {\r\n        let c = this.state.countryUpdateShow;\r\n        c.country.name = selected.label; \r\n        c.country.code = selected.value;\r\n        this.setState({\r\n            countryUpdateShow:c          \r\n        })\r\n    }\r\n    onCurrencyChange(selected) {\r\n        let c = this.state.countryUpdateShow;\r\n        c.country.currency = selected.value;\r\n        this.setState({\r\n            countryUpdateShow: c\r\n        })\r\n    }\r\n    onPhoneCodeChange(selected) {\r\n        let c = this.state.countryUpdateShow;\r\n        c.country.phoneCode = selected.value;\r\n        this.setState({\r\n            countryUpdateShow: c\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.countryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.countryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"70%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>{this.state.countryUpdateShow.country.id && this.state.countryUpdateShow.country.id > 0 ? \"update\" : \"add\"} country</h2>\r\n                    {this.state.countryUpdateShow.error && this.state.countryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.countryUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.countryUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ countryUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}                   \r\n\r\n                    <h6 className={this.state.countryUpdateShow.error && this.state.countryUpdateShow.error.length > 1 ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>name :</h6>\r\n                    <CustomSelect\r\n                        items={this.state.allCountries}\r\n                        value={this.state.countryUpdateShow.country.code}\r\n                        onChange={(selected) => this.onNameChange(selected)}\r\n                    />\r\n                    <div className=\"w-25 inline\">\r\n                    <h6 className=\"ml-5\">code</h6>\r\n                        <p className=\"ml-5 border-bottom\">{this.state.countryUpdateShow.country.code}</p>\r\n                    </div>\r\n                    <div className=\"w20 inline\"></div>\r\n                    <div className=\"w-50 inline\">\r\n                    <h6 className=\"\">phone code</h6>\r\n                    <CustomSelect\r\n                            items={this.state.allPhoneCodes}\r\n                            value={this.state.countryUpdateShow.country.phoneCode}\r\n                        onChange={(selected) => this.onPhoneCodeChange(selected)}\r\n                        />\r\n                    </div>\r\n                    <h6 className=\"ml-5\">currency :</h6>\r\n                    <CustomSelect\r\n                        items={this.state.currencies}\r\n                        value={this.state.countryUpdateShow.country.currency}\r\n                        onChange={(selected) => this.onCurrencyChange(selected)}\r\n                    />\r\n\r\n\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CityInnerComponent.jsx",["649","650","651","652"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass CityInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n                cityUpdateShow: props.cityUpdateShow,\r\n                countries: [],\r\n                zones: []\r\n            }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"item recieved = \" + JSON.stringify(this.state.cityUpdateShow));\r\n        this.refresh()\r\n    }\r\n\r\n    refresh(search) {\r\n        // console.log(\"search = \" + search);\r\n        CountryDataService.retrieveChild(this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.id || -1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    countries: response.data.countries,\r\n                    zones: response.data.zones\r\n                })\r\n                // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n            )\r\n    }\r\n\r\n    saveUpdated = () => {\r\n\r\n        let item = this.state.cityUpdateShow.city;\r\n        item.name = item.name?item.name.trim():item.name;\r\n        if (!item.name || item.name.length < 1 || !item.timeZone || item.timeZone == \"undefined\" || !item.countryId || item.countryId == \"undefined\") {\r\n            let show = this.state.cityUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ cityUpdateShow: show })\r\n        } else {\r\n            CountryDataService.saveChild(item)\r\n                .then(response => {\r\n                    let msg = this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInnerChild(null);\r\n                    this.props.setMessage(msg);\r\n                    this.props.refresh();\r\n                }).catch(error => {\r\n                    let errormsg = error.response && error.response.data ?\r\n                        error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n                    let show = this.state.cityUpdateShow;\r\n                    show.error = errormsg;\r\n                    this.setState({ cityUpdateShow: show })\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    onNameChange(value) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.name = value.target.value;//.replace(/\\s/g, '');\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n    onZoneChange(selected) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.timeZone = selected.value;\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n    onCountryChange(selected) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.countryId = selected.value;\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.cityUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.cityUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"75%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInnerChild(null)}>&times;</span>\r\n                    <h2>{this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? \"update\" : \"add\"} city</h2>\r\n                    {this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.cityUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.cityUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ cityUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n\r\n                    <h6 className={this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>country :</h6>\r\n                    <CustomSelect\r\n                        items={this.state.countries}\r\n                        value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.countryId}\r\n                        onChange={(selected) => this.onCountryChange(selected)}\r\n                    />\r\n                    <h6 className=\"ml-5\">name : </h6>\r\n                    <input type=\"text\" className=\"form-control\" value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.name}\r\n                        onChange={(value) => { this.onNameChange(value) }} />\r\n                    <h6 className=\"ml-5\">time zone :</h6>\r\n                    <CustomSelect\r\n                        items={this.state.zones}\r\n                        value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.timeZone}\r\n                        onChange={(selected) => this.onZoneChange(selected)}\r\n                    />\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInnerChild(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCategoriesComponent.jsx",["653","654","655","656"],"import React, { Component } from 'react';\r\nimport CategoryDataService from '../service/CategoryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport CategoryFilter from './Filters/CategoryFilter';\r\nimport '../myStyles/Style.css';\r\nimport CategoryInnerComponent from './CategoryInnerComponent'\r\n\r\nclass ListCategoriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            categoryUpdateShow: {\r\n                category: {}, show: false\r\n            },\r\n\r\n\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)      \r\n        \r\n    }\r\n\r\n    componentDidMount() {       \r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {        \r\n        CategoryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                    });\r\n                }).catch((error) => {\r\n                    this.setState({\r\n                        errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n                    })\r\n                })\r\n    }\r\n\r\n   \r\n    updateClickedInner = (item) => {\r\n        /* let messages = this.state.message;\r\n         if (messages != null )\r\n             messages = null;*/\r\n        item = item || {};\r\n        let show = this.state.categoryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n\r\n            show.category = JSON.parse(JSON.stringify(item))\r\n\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            categoryUpdateShow: show,\r\n            message: null,           \r\n        });\r\n    }\r\n    deleteClicked(id) {\r\n        CategoryDataService.delete(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                let errormsg = error.response && error.response.data ?\r\n                    error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n                //let errormessage = this.state.dderrormessage;\r\n                let msg = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n                msg = msg.indexOf(\"ConstraintViolationException\")>-1 ? \"can't delete item with associated records !!!\" : msg\r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n\r\n    }\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"px-3\">\r\n                {this.state.categoryUpdateShow && this.state.categoryUpdateShow.show == true &&\r\n                    <CategoryInnerComponent\r\n                        categoryUpdateShow={this.state.categoryUpdateShow}\r\n                        updateClickedInner={() => this.updateClickedInner(null)}\r\n                        setMessage={(value) => this.setState({ message: value})}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                {this.state.filter && <CategoryFilter {...this.state.filter} />}\r\n\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Categories</strong>\r\n                        </h5>\r\n\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={() => this.updateClickedInner({})}>Add New</button>\r\n\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n                                   \r\n                                    <th scope=\"col\" >type</th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        item =>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    {item.productType}\r\n                                                </td>\r\n                                                <td>{item.name}</td>\r\n                                               \r\n                                               \r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCategoriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CategoryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CategoryFilter.jsx",["657","658","659","660"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass CategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values = \" + JSON.stringify(values));\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log(\"new path = \" + newPath);\r\n        newPath = path + '?' + newPath;\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        window.location.href = window.location.pathname;\r\n\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n         else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { name, names, productType, productTypes, filteredNames } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ name, names, productType, productTypes, filteredNames }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes&&productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                   // console.log('value of checked = ' + value.target.value);\r\n                                                   \r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value.target.value);\r\n                                                   \r\n                                                    setFieldValue(\"productType\", value);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.name || ''}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                           \r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CategoryInnerComponent.jsx",["661","662","663","664"],"import React, { Component } from 'react';\r\nimport CategoryDataService from '../service/CategoryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\nclass CategoryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n            categoryUpdateShow: props.categoryUpdateShow,\r\n           \r\n            }\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        let item = this.state.categoryUpdateShow.category;\r\n        item.name = item.name?item.name.trim():item.name;\r\n        if (!item.name || item.name == \"undefined\" || !item.productType) {\r\n            let show = this.state.categoryUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ categoryUpdateShow: show })\r\n        } else {\r\n            CategoryDataService.save(item)\r\n                .then(response => {\r\n                    let msg = this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInner(null);\r\n                    this.props.setMessage(msg);\r\n                    this.props.refresh();\r\n                }).catch(error => {\r\n                   /* let errormsg = error.response && error.response.data ?\r\n                        error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n                    let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.categoryUpdateShow;\r\n                    show.error = errormsg;\r\n                    this.setState({ categoryUpdateShow: show })\r\n                })\r\n        }\r\n       \r\n\r\n    }\r\n\r\n    onProductTypeChange(value) {\r\n        let c = this.state.categoryUpdateShow;\r\n        if (c.category.productType === value.target.value) return;\r\n        c.category.productType = value.target.value;\r\n        this.setState({\r\n            categoryUpdateShow: c\r\n        })\r\n    }\r\n    onNameChange(value) {\r\n        let c = this.state.categoryUpdateShow;\r\n        c.category.name = value.target.value;\r\n        this.setState({\r\n            categoryUpdateShow: c\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.categoryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.categoryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"60%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>{this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? \"update\" : \"add\"} category</h2>\r\n                    {this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.categoryUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.categoryUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ categoryUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n\r\n                   \r\n                    <h6 className={this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>name :</h6>\r\n                    <input type=\"text\" className=\"form-control\" value={this.state.categoryUpdateShow.category.name }\r\n                        onChange={(value) => {\r\n                            this.onNameChange(value)\r\n                        }} />\r\n                    <div className=\"pr-2 mr-2 mt-3\">\r\n                        <h6 className=\"px-5\">product type :</h6>\r\n                        <input\r\n                            className=\"\" type=\"radio\"\r\n                            value='LTA' checked={this.state.categoryUpdateShow.category.productType == 'LTA'}\r\n                            onChange={(value) => {\r\n                                this.onProductTypeChange(value)\r\n                            }}\r\n                        /><span className=\" pl-1\" >LTA</span>\r\n                        <input\r\n                            className=\"\" type=\"radio\"\r\n                            value='STA' checked={this.state.categoryUpdateShow.category.productType == 'STA'}\r\n                            onChange={(value) => {\r\n                                this.onProductTypeChange(value)\r\n                            }}\r\n                        /><span className=\"pl-1\" >STA</span>\r\n                    </div>\r\n\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserCategoriesComponent.jsx",["665","666","667","668","669"],"import React, { Component } from 'react';\r\nimport UserCategoryDataService from '../service/UserCategoryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserCategoryFilter from './Filters/UserCategoryFilter';\r\nimport '../myStyles/Style.css';\r\nimport UserCategoryInnerComponent from './UserCategoryInnerComponent';\r\nimport Function from './Shared/Function'\r\n\r\nclass ListUserCategoriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: null,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            categoryUpdateShow: {\r\n                category: {}, show: false\r\n            },\r\n\r\n\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        UserCategoryDataService.retrieveAll(this.state.search)\r\n            .then(\r\n                response => {\r\n                    //console.log(\"response = \" + JSON.stringify(response));\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: response.data.filter,\r\n                    });\r\n            }).catch((error) => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg)   \r\n                   /// this.setState({\r\n                    //    errormsg: '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + error\r\n                    //})\r\n                })\r\n    }\r\n\r\n    showError(msg) {\r\n        let time = 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(({ errormsg }) => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }      \r\n\r\n\r\n    updateClickedInner = (item) => {\r\n        /* let messages = this.state.message;\r\n         if (messages != null )\r\n             messages = null;*/\r\n        console.log(\"item = \" + JSON.stringify(item))\r\n        item = item || {};\r\n        let show = this.state.categoryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n\r\n            show.category = JSON.parse(JSON.stringify(item))\r\n\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            categoryUpdateShow: show,\r\n            message: null,\r\n        });\r\n    }\r\n    deleteClicked(id) {\r\n        UserCategoryDataService.delete(id)\r\n            .then(response => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                let errormsg = error.response && error.response.data ?\r\n                    error.response.data.message ? error.response.data.message : error.response.data : error + '';\r\n\r\n                //let errormessage = this.state.dderrormessage;\r\n                let msg = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' : '' + errormsg\r\n                msg = msg.indexOf(\"ConstraintViolationException\") > -1 ? \"can't delete item with associated records !!!\" : msg\r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n\r\n    }\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                {this.state.categoryUpdateShow && this.state.categoryUpdateShow.show == true &&\r\n                    <UserCategoryInnerComponent\r\n                        categoryUpdateShow={this.state.categoryUpdateShow}\r\n                        updateClickedInner={() => this.updateClickedInner(null)}\r\n                        setMessage={(value) => this.setState({ message: value })}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n\r\n                \r\n                {this.state.filter && <UserCategoryFilter {...this.state.filter} />}\r\n\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Categories</strong>\r\n                        </h5>\r\n\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={() => this.updateClickedInner({})}>Add New</button>\r\n\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} />}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormsg: null })}></i></div>}\r\n                        {\r\n                            this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n\r\n                                    <th scope=\"col\" >type</th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">amortization</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.items.map(\r\n                                        item =>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    {item.category.productType}\r\n                                                </td>\r\n                                                <td>{item.category.name}</td>\r\n                                                <td>{item.category.productType == 'LTA' ? item.amortizationPercent + '%' : '-'}</td>\r\n\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListUserCategoriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserCategoryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserCategoryFilter.jsx",["670","671","672","673","674","675","676","677","678"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\n\r\nclass UserCategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            categoryId: props.categoryId,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(\"values = \" + JSON.stringify(values));\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n\r\n        let prefix = this.state.prefix;\r\n        Object.entries(values).map(([key, value]) => {\r\n\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                newPath += prefix + '.' + key + '=' + value + '&'\r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        console.log(\"new path = \" + newPath);\r\n        newPath = path + '?' + newPath;\r\n        window.location.href = newPath;\r\n    }\r\n\r\n    resetForm() {\r\n        window.location.href = window.location.pathname;\r\n\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"rendering filter props.timeline = \" + this.props.timeline.show);\r\n\r\n        let { categoryId, names, productType, productTypes, filteredNames, amortizationPercentMoreThan, amortizationPercentLessThan } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ categoryId, names, productType, productTypes, filteredNames, amortizationPercentMoreThan, amortizationPercentLessThan }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes && productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                    // console.log('value of checked = ' + value.target.value);\r\n                                                    value = value.target.value;\r\n                                                    value = values.productType == value ? null : value;\r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value);\r\n\r\n                                                    setFieldValue(\"productType\", value);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.categoryId || ''}\r\n                                    onChange={(selected) => setFieldValue(\"categoryId\", selected.value)}\r\n                                />\r\n                            </div>\r\n\r\n                           \r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-50px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                            name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan} />&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-50px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                            name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan} />&nbsp;%\r\n                                        </div>\r\n                                </div>\r\n                           \r\n\r\n\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserCategoryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserCategoryInnerComponent.jsx",["679","680","681","682","683","684","685"],"import React, { Component } from 'react';\r\nimport UserCategoryDataService from '../service/UserCategoryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\nclass UserCategoryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n            categoryUpdateShow: props.categoryUpdateShow,\r\n            names: [],\r\n            id:null,\r\n            categoryId: null,\r\n            amortizationPercent: null,\r\n            productType:null\r\n\r\n            }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    refresh(search) {\r\n        // console.log(\"search = \" + search);\r\n        UserCategoryDataService.retrieve(this.state.categoryUpdateShow.category.id || -1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    //item:response.data\r\n                    names: response.data.names,\r\n                    id: response.data.id,\r\n                    categoryId: response.data.categoryId,\r\n                    amortizationPercent: response.data.amortizationPercent,\r\n                    productType: this.state.categoryUpdateShow.category.category && this.state.categoryUpdateShow.category.category.productType\r\n\r\n                })\r\n                // console.log(\"data length = \" + this.state.filteredNumbers.length);\r\n            }).catch(error =>\r\n                console.log(\"error = \" + error)\r\n            )\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        let item = { id:this.state.id, categoryId: this.state.categoryId, amortizationPercent: this.state.amortizationPercent }//this.state.categoryUpdateShow.category;\r\n        let productType = this.state.productType;\r\n        let original = this.state.categoryUpdateShow.category;\r\n        // item.name = item.name ? item.name.trim() : item.name;\r\n        console.log(\"item to save = \" + JSON.stringify(item));\r\n        if (!item.categoryId || item.categoryId == \"undefined\" ||\r\n            (productType === 'LTA' && (!item.amortizationPercent || item.amortizationPercent == \"undefined\"))) {\r\n            let show = this.state.categoryUpdateShow;\r\n            show.error = \"All fields are required !!!\";\r\n            this.setState({ categoryUpdateShow: show })\r\n        } else if (original.id && original.category.id == item.categoryId && original.amortizationPercent == item.amortizationPercent) {\r\n            let show = this.state.categoryUpdateShow;\r\n            show.error = \"item hasn't changed !!!\";\r\n            this.setState({ categoryUpdateShow: show })\r\n        } else {\r\n            UserCategoryDataService.save(item)\r\n                .then(response => {\r\n                    let msg = this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInner(null);\r\n                    this.props.setMessage(msg);\r\n                    this.props.refresh();\r\n                }).catch(error => {\r\n                   /* let errormsg = error.response && error.response.data ?\r\n                        error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n                    let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.categoryUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ categoryUpdateShow: show })\r\n                })\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    onamortizationChange(value) {\r\n        let c = this.state.amortizationPercent;\r\n       // if (c.category.productType === value.target.value) return;\r\n        c = value.target.value;\r\n        this.setState({\r\n            amortizationPercent: c\r\n        })\r\n    }\r\n    onCategoryChange(selected) {\r\n        let c = this.state.categoryId;\r\n        c = selected.value;\r\n        let type = this.state.productType;\r\n        type = (this.state.names.filter(x => x.value == selected.value))[0].filterBy;\r\n        console.log(\"type = \"+type)\r\n        this.setState({\r\n            categoryId: c,\r\n            productType:type\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.categoryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.categoryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"60%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>{this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? \"update\" : \"add\"} category</h2>\r\n                    {this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.categoryUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.categoryUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ categoryUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    {console.log(\"state product type = \" + this.state.productType)}\r\n                    <h6 className={this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>name :</h6>\r\n                    <CustomSelect\r\n                        items={this.state.names}\r\n                        value={this.state.categoryId}\r\n                        onChange={(selected) => this.onCategoryChange(selected)}\r\n                    />\r\n                    <h6 className=\"ml-5 inline pl-0 pb-3 pt-3\">product type :</h6>{this.state.productType||'...'} \r\n                  \r\n                       \r\n                    <div>\r\n                    <h6 className=\"ml-5\">amortization :</h6>\r\n                    <input type=\"number\" className=\"form-control inline p-2\"\r\n                            disabled={this.state.productType == 'STA'}\r\n                            value={this.state.productType=='STA'?'':this.state.amortizationPercent||''}\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        onChange={(value) => {\r\n                            this.onamortizationChange(value)\r\n                            }} />&nbsp;%\r\n                        </div>\r\n                    \r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserCategoryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Shared\\Function.js",["686","687"],"\r\nclass Function {\r\n\r\n\r\n    getErrorMsg(error) {\r\n\r\n\r\n        /* let msg = error.response && typeof error.response.data == 'string' ? error.response.data :\r\n                        error.response.data.message ? error.response.data.message : error;*/\r\n        /* let errormsg = error.response && error.response.data ?\r\n                       error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n        /* let msg = error.response && typeof error.response.data == 'string' ? error.response.data :\r\n               error.response.data.message ? error.response.data.message : error;*/\r\n        /* let errormsg = error.response && error.response.data ?\r\n                        error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n        /* let msg = \"\" + error.response && typeof error.response.data == 'string' ?\r\n                   error.response.data : error.response.data.errors ?\r\n                       error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                           error.response.data.message : error;*/\r\n        // let errormsg = error.response && error.response.data ? error.response.data.message : error + '';\r\n        //\"errors occured : \" + error + \" !!!\";\r\n        /* let errormsg = error.response && error.response.data ?\r\n             error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n        /* let errormsg = error.response && error.response.data ?\r\n             error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n        /* let errormsg = error.response && error.response.data ?\r\n                       error.response.data.message ? error.response.data.message : error.response.data : error + '';*/\r\n\r\n        console.log(\"error = \" + error);\r\n        console.log(\"error.response = \" + JSON.stringify(error.response));\r\n        let msg = '' + error == 'Error: Request failed with status code 401' ? 'need to login again !!!' :\r\n            error.response && error.response.data && typeof error.response.data == 'string' ?\r\n            error.response.data : error.response && error.response.data && typeof error.response.data == 'object' ?\r\n                error.response.data.errors ?\r\n                    error.response.data.errors[0].defaultMessage : error.response.data.message != null ?\r\n                        error.response.data.message :\r\n                       /* error.response && error.response.data && typeof error.response.data == 'object'\r\n                        && error.response.data.message == null ?*/ 'errors found !!!' : error + '';\r\n\r\n        if (typeof msg == 'string' && msg.startsWith('Failed to convert value'))\r\n            msg = 'try again with correct values !!!'\r\n\r\n       /* let msg = \"\" + error &&\r\n            // error.response && error.response.data && typeof error.response.data == 'string' ?\r\n            //error.response.data :\r\n            error.response && error.response.data ?\r\n            error.response.data.errors ?\r\n                error.response.data.errors[0].defaultMessage : error.response.data.message ?\r\n                    error.response.data.message :\r\n                    error : 'something went wrong !!!';*/\r\n        console.log(\"msg = \" + msg);\r\n        return msg;\r\n    }\r\n\r\n    getDate() { // new date \r\n        //let g = new Date();\r\n      /*  let date = new Date();\r\n       date =  date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n        //console.log(\"g after turn = \" + g);*/\r\n\r\n         let date = new Date();       \r\n        date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n        console.log(\"date after turn = \" + date);\r\n        return date;\r\n    }\r\n\r\n    convertDate(date) { // to string \r\n        if (date && date != 'undefined') {\r\n            // let date = \r\n            date = (new Date(date));\r\n            date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n            date = date.toISOString();\r\n            date = date.substring(0, date.indexOf('T'))\r\n            return date;\r\n        } else return '';\r\n    }\r\n\r\n    /*showError(time) {\r\n       /* let time = 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })*/\r\n    /*    this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                return true;\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }*/\r\n}\r\n\r\nexport default new Function()","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\Functions.js",["688","689","690","691","692"],"\r\nclass Functions {\r\n    convertDate(date) { // to string \r\n        if (!date || date == 'undefined') return null;\r\n            // let date = \r\n            date = (new Date(date));\r\n            date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n            date = date.toISOString();\r\n            date = date.substring(0, date.indexOf('T'))\r\n            return date;       \r\n    }\r\n\r\n    getRandom() {\r\n       // console.log(\"get random called\");\r\n           let uuid = ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n            );\r\n       \r\n\r\n      // console.log(\"uuid = \"+uuid);\r\n        return uuid;\r\n    }\r\n\r\n   \r\n   /* getFilteredList = ( list, value) => {\r\n        let filtered = [];\r\n        console.log(\"value = \"+value)\r\n        if (value == null || value == 'undefined') filtered = list;\r\n        for (let i = 0; i < list.length; i++) {\r\n            console.log(\"list value = \" + (list[i].value))\r\n            console.log(\"list value == ''\"+(list[i].value ==''))\r\n            if (list[i].filterBy == value || list[i].value =='') {\r\n                filtered.push(list[i])\r\n            }\r\n        }\r\n        return filtered;\r\n    }*/\r\n                                       \r\n\r\n}\r\n\r\nexport default new Functions()",["693","694"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\HomeComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\OrderByComponent.jsx",["695","696"],"import React, { Component } from 'react';\r\nimport '../myStyles/Style.css';\r\n\r\nclass OrderByComponent extends Component {\r\n    render() {\r\n\r\n    return(\r\n    <>\r\n        {\r\n            this.props.orderBy.name == this.props.name && this.props.orderBy.direction == \"asc\" ?\r\n                    (< i class=\"fa fa-caret-up ml-2 hoverable\" onClick={this.props.onClick}/>) : //this.getOrderedList(\"inventoryNumber\")} />) :\r\n                (< i class=\"fa fa-caret-down ml-2 hoverable\" onClick={this.props.onClick} />)\r\n            }\r\n            </>\r\n   ) }\r\n}\r\n\r\nexport default OrderByComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeleteAllInnerComponent.jsx",["697","698"],"import React, { Component } from 'react';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\n\r\nclass DeleteAllInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                items: props.items\r\n            }\r\n    }\r\n\r\n    convertDate(g) {\r\n        if (g == null) return\r\n        g = new Date(g);\r\n        g.setHours(g.getHours() - g.getTimezoneOffset() / 60);\r\n        return g;\r\n    }\r\n\r\n    getStringDate(date) {\r\n        date = this.convertDate(date);\r\n        date = date.toISOString();\r\n        date = date.substring(0, date.indexOf('T'));\r\n        return date;\r\n    }\r\n\r\n    checkValidInputs() {\r\n        if (this.state.selectedDate != null)\r\n            return true\r\n\r\n        this.setState({ error: 'must choose date  !!!' })\r\n        return false\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n\r\n                <div className=\"overlay d-block\"></div>\r\n                <div className=\"modal d-block\" style={{\r\n                    fontWeight: \"normal\", height: \"55%\"\r\n                }}>\r\n                   <span class=\"close pt-3\" onClick={() => this.props.cancel()}>&times;</span>\r\n                    <h2>Delete All before : </h2>\r\n\r\n                    \r\n                        \r\n                            {this.state.error &&\r\n                                <div className=\"alert alert-warning d-flex\">{this.state.error}\r\n                                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                        onClick={() => {\r\n                                            \r\n                                            this.setState({ error: null })\r\n                                        }}>\r\n                                    </i>\r\n                        </div>}\r\n\r\n                    <div className={this.state.error ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>\r\n                            <h6 >inventory : </h6>\r\n                    <CustomSelect\r\n                        className={\"inline w90 ml-0 p-0\"}\r\n                                items={this.state.items}\r\n                                value={(this.state.itemId)}\r\n\r\n                            onChange={(selected) => this.setState({itemId : selected.value})}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"ml-5\">\r\n                        <h6 >date :</h6>\r\n                        <div className=\"inline w70\">\r\n                            <DatePicker\r\n                                className=\"form-control w100 m-0\"\r\n                                dateFormat=\"dd MMMM yyyy\"\r\n                                locale=\"en-GB\"\r\n                                isClearable\r\n                                placeholderText=\"...\"\r\n                                maxDate={new Date()}\r\n                                showYearDropdown\r\n                                dropdownMode=\"select\"\r\n                                selected={this.state.selectedDate && new Date(this.state.selectedDate) || null}\r\n                            onChange={date => {\r\n                                this.setState({                                   \r\n                                    selectedDate: this.getStringDate(date)\r\n                                })\r\n                                if (date && this.state.error)\r\n                                    this.setState({error: null})\r\n                                }} />\r\n                        </div>\r\n                    </div>\r\n                   \r\n                           \r\n\r\n                    <button className=\"btn btn-mybtn p-x-5 ml-5\" onClick={() => {\r\n                        if(this.checkValidInputs())\r\n                            this.props.deleteAll(this.state.selectedDate, this.state.itemId)\r\n                    }}>Delete All</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" onClick={() => this.props.cancel()}>Cancel</button>\r\n                       \r\n                       \r\n                   \r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nexport default DeleteAllInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\EventListner.jsx",["699","700"],"import React, { Component } from 'react';\r\nimport { EventSourcePolyfill } from 'event-source-polyfill';\r\nimport authHeader from '../service/AuthHeader';\r\n\r\nclass EventListner extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        // ... super, state, and columns ...\r\n\r\n        //this.eventSource = new EventSource(, { withCredentials: true });\r\n       // let EventSource = EventSourcePolyfill;\r\n       // this.eventSource = new EventSourcePolyfill(`http://localhost:8080/api/inventory/manager/subscribe`, {\r\n         //   headers: authHeader()\r\n        //});\r\n        this.eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribe\");\r\n    }\r\n\r\n   \r\n\r\n    componentDidMount() {\r\n        console.log(\"component did mount\");\r\n       //this.eventSource.onmessage = e => { console.log(\"msg from sse = \"); }\r\n        this.eventSource.onmessage = e =>\r\n            console.log(\"msg from sse = \");//this.updateFlightState(JSON.parse(e.data));\r\n    }\r\n       \r\n\r\n    render() {\r\n       \r\n            \r\n\r\n           \r\n        \r\n        return (\r\n            \r\n            <>\r\n                </>\r\n            )\r\n    }\r\n}\r\n\r\nexport default EventListner","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\EventListner.js",[],{"ruleId":"701","replacedBy":"702"},{"ruleId":"703","replacedBy":"704"},{"ruleId":"705","severity":1,"message":"706","line":1,"column":8,"nodeType":"707","messageId":"708","endLine":1,"endColumn":12},{"ruleId":"705","severity":1,"message":"709","line":9,"column":8,"nodeType":"707","messageId":"708","endLine":9,"endColumn":29},{"ruleId":"710","severity":1,"message":"711","line":15,"column":25,"nodeType":"712","endLine":15,"endColumn":63},{"ruleId":"701","replacedBy":"713"},{"ruleId":"703","replacedBy":"714"},{"ruleId":"705","severity":1,"message":"706","line":1,"column":8,"nodeType":"707","messageId":"708","endLine":1,"endColumn":12},{"ruleId":"705","severity":1,"message":"715","line":3,"column":8,"nodeType":"707","messageId":"708","endLine":3,"endColumn":21},{"ruleId":"716","severity":1,"message":"717","line":31,"column":27,"nodeType":"718","endLine":31,"endColumn":99},{"ruleId":"719","severity":1,"message":"720","line":71,"column":7,"nodeType":"721","messageId":"722","endLine":73,"endColumn":16},{"ruleId":"723","severity":1,"message":"724","line":71,"column":7,"nodeType":"721","messageId":"725","endLine":73,"endColumn":16},{"ruleId":"705","severity":1,"message":"726","line":25,"column":8,"nodeType":"707","messageId":"708","endLine":25,"endColumn":20},{"ruleId":"705","severity":1,"message":"727","line":28,"column":8,"nodeType":"707","messageId":"708","endLine":28,"endColumn":29},{"ruleId":"705","severity":1,"message":"726","line":2,"column":8,"nodeType":"707","messageId":"708","endLine":2,"endColumn":20},{"ruleId":"728","severity":1,"message":"729","line":61,"column":47,"nodeType":"730","messageId":"731","endLine":61,"endColumn":49},{"ruleId":"728","severity":1,"message":"729","line":73,"column":49,"nodeType":"730","messageId":"731","endLine":73,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":78,"column":51,"nodeType":"730","messageId":"731","endLine":78,"endColumn":53},{"ruleId":"728","severity":1,"message":"729","line":86,"column":54,"nodeType":"730","messageId":"731","endLine":86,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":90,"column":50,"nodeType":"730","messageId":"731","endLine":90,"endColumn":52},{"ruleId":"728","severity":1,"message":"729","line":98,"column":49,"nodeType":"730","messageId":"731","endLine":98,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":101,"column":55,"nodeType":"730","messageId":"731","endLine":101,"endColumn":57},{"ruleId":"728","severity":1,"message":"729","line":105,"column":49,"nodeType":"730","messageId":"731","endLine":105,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":108,"column":50,"nodeType":"730","messageId":"731","endLine":108,"endColumn":52},{"ruleId":"728","severity":1,"message":"729","line":113,"column":49,"nodeType":"730","messageId":"731","endLine":113,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":119,"column":68,"nodeType":"730","messageId":"731","endLine":119,"endColumn":70},{"ruleId":"728","severity":1,"message":"729","line":29,"column":22,"nodeType":"730","messageId":"731","endLine":29,"endColumn":24},{"ruleId":"728","severity":1,"message":"729","line":52,"column":30,"nodeType":"730","messageId":"731","endLine":52,"endColumn":32},{"ruleId":"728","severity":1,"message":"729","line":18,"column":34,"nodeType":"730","messageId":"731","endLine":18,"endColumn":36},{"ruleId":"728","severity":1,"message":"729","line":51,"column":24,"nodeType":"730","messageId":"731","endLine":51,"endColumn":26},{"ruleId":"728","severity":1,"message":"729","line":93,"column":65,"nodeType":"730","messageId":"731","endLine":93,"endColumn":67},{"ruleId":"710","severity":1,"message":"711","line":93,"column":107,"nodeType":"712","endLine":93,"endColumn":179},{"ruleId":"728","severity":1,"message":"729","line":97,"column":65,"nodeType":"730","messageId":"731","endLine":97,"endColumn":67},{"ruleId":"710","severity":1,"message":"711","line":97,"column":106,"nodeType":"712","endLine":97,"endColumn":178},{"ruleId":"710","severity":1,"message":"711","line":100,"column":82,"nodeType":"712","endLine":100,"endColumn":160},{"ruleId":"728","severity":1,"message":"729","line":103,"column":65,"nodeType":"730","messageId":"731","endLine":103,"endColumn":67},{"ruleId":"710","severity":1,"message":"711","line":103,"column":106,"nodeType":"712","endLine":103,"endColumn":178},{"ruleId":"710","severity":1,"message":"711","line":124,"column":51,"nodeType":"712","endLine":124,"endColumn":160},{"ruleId":"710","severity":1,"message":"711","line":133,"column":51,"nodeType":"712","endLine":133,"endColumn":155},{"ruleId":"705","severity":1,"message":"732","line":2,"column":24,"nodeType":"707","messageId":"708","endLine":2,"endColumn":29},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":46,"column":51,"nodeType":"736","messageId":"737","endLine":46,"endColumn":53},{"ruleId":"738","severity":1,"message":"739","line":5,"column":1,"nodeType":"740","endLine":60,"endColumn":2},{"ruleId":"728","severity":1,"message":"729","line":39,"column":62,"nodeType":"730","messageId":"731","endLine":39,"endColumn":64},{"ruleId":"705","severity":1,"message":"732","line":2,"column":24,"nodeType":"707","messageId":"708","endLine":2,"endColumn":29},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":46,"column":51,"nodeType":"736","messageId":"737","endLine":46,"endColumn":53},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":52,"column":51,"nodeType":"736","messageId":"737","endLine":52,"endColumn":53},{"ruleId":"728","severity":1,"message":"729","line":142,"column":101,"nodeType":"730","messageId":"731","endLine":142,"endColumn":103},{"ruleId":"728","severity":1,"message":"729","line":147,"column":95,"nodeType":"730","messageId":"731","endLine":147,"endColumn":97},{"ruleId":"728","severity":1,"message":"729","line":175,"column":109,"nodeType":"730","messageId":"731","endLine":175,"endColumn":111},{"ruleId":"728","severity":1,"message":"729","line":176,"column":71,"nodeType":"730","messageId":"731","endLine":176,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":179,"column":109,"nodeType":"730","messageId":"731","endLine":179,"endColumn":111},{"ruleId":"728","severity":1,"message":"729","line":180,"column":71,"nodeType":"730","messageId":"731","endLine":180,"endColumn":73},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":58,"column":51,"nodeType":"736","messageId":"737","endLine":58,"endColumn":53},{"ruleId":"728","severity":1,"message":"741","line":61,"column":54,"nodeType":"730","messageId":"731","endLine":61,"endColumn":56},{"ruleId":"705","severity":1,"message":"742","line":5,"column":8,"nodeType":"707","messageId":"708","endLine":5,"endColumn":20},{"ruleId":"705","severity":1,"message":"743","line":115,"column":15,"nodeType":"707","messageId":"708","endLine":115,"endColumn":22},{"ruleId":"728","severity":1,"message":"729","line":153,"column":85,"nodeType":"730","messageId":"731","endLine":153,"endColumn":87},{"ruleId":"728","severity":1,"message":"729","line":165,"column":115,"nodeType":"730","messageId":"731","endLine":165,"endColumn":117},{"ruleId":"728","severity":1,"message":"729","line":227,"column":116,"nodeType":"730","messageId":"731","endLine":227,"endColumn":118},{"ruleId":"728","severity":1,"message":"729","line":235,"column":84,"nodeType":"730","messageId":"731","endLine":235,"endColumn":86},{"ruleId":"728","severity":1,"message":"729","line":90,"column":34,"nodeType":"730","messageId":"731","endLine":90,"endColumn":36},{"ruleId":"705","severity":1,"message":"744","line":112,"column":15,"nodeType":"707","messageId":"708","endLine":112,"endColumn":22},{"ruleId":"745","severity":1,"message":"746","line":173,"column":53,"nodeType":"747","endLine":173,"endColumn":64},{"ruleId":"728","severity":1,"message":"729","line":177,"column":73,"nodeType":"730","messageId":"731","endLine":177,"endColumn":75},{"ruleId":"728","severity":1,"message":"729","line":189,"column":93,"nodeType":"730","messageId":"731","endLine":189,"endColumn":95},{"ruleId":"705","severity":1,"message":"744","line":110,"column":15,"nodeType":"707","messageId":"708","endLine":110,"endColumn":22},{"ruleId":"728","severity":1,"message":"729","line":160,"column":47,"nodeType":"730","messageId":"731","endLine":160,"endColumn":49},{"ruleId":"728","severity":1,"message":"729","line":174,"column":55,"nodeType":"730","messageId":"731","endLine":174,"endColumn":57},{"ruleId":"728","severity":1,"message":"729","line":83,"column":41,"nodeType":"730","messageId":"731","endLine":83,"endColumn":43},{"ruleId":"728","severity":1,"message":"729","line":146,"column":45,"nodeType":"730","messageId":"731","endLine":146,"endColumn":47},{"ruleId":"734","severity":1,"message":"735","line":162,"column":20,"nodeType":"736","messageId":"737","endLine":162,"endColumn":22},{"ruleId":"734","severity":1,"message":"735","line":163,"column":37,"nodeType":"736","messageId":"737","endLine":163,"endColumn":39},{"ruleId":"705","severity":1,"message":"748","line":227,"column":21,"nodeType":"707","messageId":"708","endLine":227,"endColumn":27},{"ruleId":"728","severity":1,"message":"729","line":230,"column":42,"nodeType":"730","messageId":"731","endLine":230,"endColumn":44},{"ruleId":"728","severity":1,"message":"729","line":242,"column":49,"nodeType":"730","messageId":"731","endLine":242,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":262,"column":44,"nodeType":"730","messageId":"731","endLine":262,"endColumn":46},{"ruleId":"728","severity":1,"message":"729","line":311,"column":33,"nodeType":"730","messageId":"731","endLine":311,"endColumn":35},{"ruleId":"728","severity":1,"message":"729","line":323,"column":23,"nodeType":"730","messageId":"731","endLine":323,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":345,"column":23,"nodeType":"730","messageId":"731","endLine":345,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":368,"column":23,"nodeType":"730","messageId":"731","endLine":368,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":476,"column":34,"nodeType":"730","messageId":"731","endLine":476,"endColumn":36},{"ruleId":"728","severity":1,"message":"729","line":476,"column":74,"nodeType":"730","messageId":"731","endLine":476,"endColumn":76},{"ruleId":"728","severity":1,"message":"729","line":478,"column":38,"nodeType":"730","messageId":"731","endLine":478,"endColumn":40},{"ruleId":"728","severity":1,"message":"729","line":510,"column":37,"nodeType":"730","messageId":"731","endLine":510,"endColumn":39},{"ruleId":"728","severity":1,"message":"729","line":551,"column":74,"nodeType":"730","messageId":"731","endLine":551,"endColumn":76},{"ruleId":"728","severity":1,"message":"729","line":563,"column":86,"nodeType":"730","messageId":"731","endLine":563,"endColumn":88},{"ruleId":"728","severity":1,"message":"729","line":574,"column":74,"nodeType":"730","messageId":"731","endLine":574,"endColumn":76},{"ruleId":"728","severity":1,"message":"729","line":616,"column":53,"nodeType":"730","messageId":"731","endLine":616,"endColumn":55},{"ruleId":"728","severity":1,"message":"729","line":624,"column":66,"nodeType":"730","messageId":"731","endLine":624,"endColumn":68},{"ruleId":"728","severity":1,"message":"741","line":626,"column":72,"nodeType":"730","messageId":"731","endLine":626,"endColumn":74},{"ruleId":"728","severity":1,"message":"729","line":631,"column":66,"nodeType":"730","messageId":"731","endLine":631,"endColumn":68},{"ruleId":"728","severity":1,"message":"729","line":632,"column":77,"nodeType":"730","messageId":"731","endLine":632,"endColumn":79},{"ruleId":"728","severity":1,"message":"729","line":642,"column":67,"nodeType":"730","messageId":"731","endLine":642,"endColumn":69},{"ruleId":"728","severity":1,"message":"729","line":643,"column":71,"nodeType":"730","messageId":"731","endLine":643,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":653,"column":70,"nodeType":"730","messageId":"731","endLine":653,"endColumn":72},{"ruleId":"728","severity":1,"message":"729","line":661,"column":69,"nodeType":"730","messageId":"731","endLine":661,"endColumn":71},{"ruleId":"728","severity":1,"message":"729","line":673,"column":53,"nodeType":"730","messageId":"731","endLine":673,"endColumn":55},{"ruleId":"728","severity":1,"message":"729","line":848,"column":53,"nodeType":"730","messageId":"731","endLine":848,"endColumn":55},{"ruleId":"728","severity":1,"message":"729","line":62,"column":22,"nodeType":"730","messageId":"731","endLine":62,"endColumn":24},{"ruleId":"705","severity":1,"message":"744","line":124,"column":15,"nodeType":"707","messageId":"708","endLine":124,"endColumn":22},{"ruleId":"745","severity":1,"message":"746","line":177,"column":49,"nodeType":"747","endLine":177,"endColumn":60},{"ruleId":"728","severity":1,"message":"729","line":116,"column":22,"nodeType":"730","messageId":"731","endLine":116,"endColumn":24},{"ruleId":"728","severity":1,"message":"741","line":148,"column":40,"nodeType":"730","messageId":"731","endLine":148,"endColumn":42},{"ruleId":"728","severity":1,"message":"729","line":185,"column":36,"nodeType":"730","messageId":"731","endLine":185,"endColumn":38},{"ruleId":"705","severity":1,"message":"749","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":41},{"ruleId":"728","severity":1,"message":"729","line":93,"column":75,"nodeType":"730","messageId":"731","endLine":93,"endColumn":77},{"ruleId":"728","severity":1,"message":"729","line":130,"column":68,"nodeType":"730","messageId":"731","endLine":130,"endColumn":70},{"ruleId":"728","severity":1,"message":"729","line":142,"column":63,"nodeType":"730","messageId":"731","endLine":142,"endColumn":65},{"ruleId":"728","severity":1,"message":"729","line":291,"column":75,"nodeType":"730","messageId":"731","endLine":291,"endColumn":77},{"ruleId":"728","severity":1,"message":"729","line":291,"column":119,"nodeType":"730","messageId":"731","endLine":291,"endColumn":121},{"ruleId":"734","severity":1,"message":"735","line":296,"column":85,"nodeType":"736","messageId":"737","endLine":296,"endColumn":87},{"ruleId":"728","severity":1,"message":"729","line":297,"column":66,"nodeType":"730","messageId":"731","endLine":297,"endColumn":68},{"ruleId":"728","severity":1,"message":"729","line":305,"column":77,"nodeType":"730","messageId":"731","endLine":305,"endColumn":79},{"ruleId":"728","severity":1,"message":"729","line":309,"column":74,"nodeType":"730","messageId":"731","endLine":309,"endColumn":76},{"ruleId":"728","severity":1,"message":"729","line":327,"column":101,"nodeType":"730","messageId":"731","endLine":327,"endColumn":103},{"ruleId":"728","severity":1,"message":"729","line":500,"column":78,"nodeType":"730","messageId":"731","endLine":500,"endColumn":80},{"ruleId":"728","severity":1,"message":"729","line":112,"column":27,"nodeType":"730","messageId":"731","endLine":112,"endColumn":29},{"ruleId":"705","severity":1,"message":"744","line":137,"column":15,"nodeType":"707","messageId":"708","endLine":137,"endColumn":22},{"ruleId":"728","severity":1,"message":"729","line":141,"column":74,"nodeType":"730","messageId":"731","endLine":141,"endColumn":76},{"ruleId":"728","severity":1,"message":"729","line":204,"column":47,"nodeType":"730","messageId":"731","endLine":204,"endColumn":49},{"ruleId":"745","severity":1,"message":"746","line":218,"column":53,"nodeType":"747","endLine":218,"endColumn":64},{"ruleId":"728","severity":1,"message":"729","line":222,"column":73,"nodeType":"730","messageId":"731","endLine":222,"endColumn":75},{"ruleId":"728","severity":1,"message":"729","line":241,"column":59,"nodeType":"730","messageId":"731","endLine":241,"endColumn":61},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":64,"column":51,"nodeType":"736","messageId":"737","endLine":64,"endColumn":53},{"ruleId":"728","severity":1,"message":"741","line":67,"column":54,"nodeType":"730","messageId":"731","endLine":67,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":141,"column":85,"nodeType":"730","messageId":"731","endLine":141,"endColumn":87},{"ruleId":"728","severity":1,"message":"729","line":217,"column":105,"nodeType":"730","messageId":"731","endLine":217,"endColumn":107},{"ruleId":"728","severity":1,"message":"729","line":235,"column":109,"nodeType":"730","messageId":"731","endLine":235,"endColumn":111},{"ruleId":"728","severity":1,"message":"729","line":236,"column":71,"nodeType":"730","messageId":"731","endLine":236,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":239,"column":109,"nodeType":"730","messageId":"731","endLine":239,"endColumn":111},{"ruleId":"728","severity":1,"message":"729","line":240,"column":71,"nodeType":"730","messageId":"731","endLine":240,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":266,"column":108,"nodeType":"730","messageId":"731","endLine":266,"endColumn":110},{"ruleId":"728","severity":1,"message":"729","line":280,"column":78,"nodeType":"730","messageId":"731","endLine":280,"endColumn":80},{"ruleId":"728","severity":1,"message":"729","line":283,"column":89,"nodeType":"730","messageId":"731","endLine":283,"endColumn":91},{"ruleId":"728","severity":1,"message":"729","line":288,"column":79,"nodeType":"730","messageId":"731","endLine":288,"endColumn":81},{"ruleId":"728","severity":1,"message":"729","line":291,"column":89,"nodeType":"730","messageId":"731","endLine":291,"endColumn":91},{"ruleId":"728","severity":1,"message":"729","line":114,"column":22,"nodeType":"730","messageId":"731","endLine":114,"endColumn":24},{"ruleId":"728","severity":1,"message":"729","line":128,"column":34,"nodeType":"730","messageId":"731","endLine":128,"endColumn":36},{"ruleId":"728","severity":1,"message":"729","line":246,"column":38,"nodeType":"730","messageId":"731","endLine":246,"endColumn":40},{"ruleId":"728","severity":1,"message":"729","line":299,"column":23,"nodeType":"730","messageId":"731","endLine":299,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":323,"column":49,"nodeType":"730","messageId":"731","endLine":323,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":430,"column":37,"nodeType":"730","messageId":"731","endLine":430,"endColumn":39},{"ruleId":"728","severity":1,"message":"729","line":431,"column":54,"nodeType":"730","messageId":"731","endLine":431,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":463,"column":72,"nodeType":"730","messageId":"731","endLine":463,"endColumn":74},{"ruleId":"728","severity":1,"message":"729","line":500,"column":44,"nodeType":"730","messageId":"731","endLine":500,"endColumn":46},{"ruleId":"728","severity":1,"message":"729","line":502,"column":63,"nodeType":"730","messageId":"731","endLine":502,"endColumn":65},{"ruleId":"728","severity":1,"message":"729","line":506,"column":59,"nodeType":"730","messageId":"731","endLine":506,"endColumn":61},{"ruleId":"728","severity":1,"message":"729","line":519,"column":83,"nodeType":"730","messageId":"731","endLine":519,"endColumn":85},{"ruleId":"728","severity":1,"message":"729","line":541,"column":54,"nodeType":"730","messageId":"731","endLine":541,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":562,"column":35,"nodeType":"730","messageId":"731","endLine":562,"endColumn":37},{"ruleId":"728","severity":1,"message":"729","line":567,"column":71,"nodeType":"730","messageId":"731","endLine":567,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":574,"column":75,"nodeType":"730","messageId":"731","endLine":574,"endColumn":77},{"ruleId":"728","severity":1,"message":"729","line":595,"column":43,"nodeType":"730","messageId":"731","endLine":595,"endColumn":45},{"ruleId":"728","severity":1,"message":"729","line":628,"column":35,"nodeType":"730","messageId":"731","endLine":628,"endColumn":37},{"ruleId":"728","severity":1,"message":"729","line":650,"column":51,"nodeType":"730","messageId":"731","endLine":650,"endColumn":53},{"ruleId":"728","severity":1,"message":"729","line":678,"column":51,"nodeType":"730","messageId":"731","endLine":678,"endColumn":53},{"ruleId":"728","severity":1,"message":"729","line":700,"column":63,"nodeType":"730","messageId":"731","endLine":700,"endColumn":65},{"ruleId":"728","severity":1,"message":"729","line":700,"column":108,"nodeType":"730","messageId":"731","endLine":700,"endColumn":110},{"ruleId":"728","severity":1,"message":"729","line":701,"column":85,"nodeType":"730","messageId":"731","endLine":701,"endColumn":87},{"ruleId":"728","severity":1,"message":"729","line":702,"column":85,"nodeType":"730","messageId":"731","endLine":702,"endColumn":87},{"ruleId":"728","severity":1,"message":"729","line":707,"column":81,"nodeType":"730","messageId":"731","endLine":707,"endColumn":83},{"ruleId":"728","severity":1,"message":"729","line":718,"column":81,"nodeType":"730","messageId":"731","endLine":718,"endColumn":83},{"ruleId":"728","severity":1,"message":"729","line":726,"column":75,"nodeType":"730","messageId":"731","endLine":726,"endColumn":77},{"ruleId":"728","severity":1,"message":"729","line":727,"column":82,"nodeType":"730","messageId":"731","endLine":727,"endColumn":84},{"ruleId":"728","severity":1,"message":"729","line":739,"column":102,"nodeType":"730","messageId":"731","endLine":739,"endColumn":104},{"ruleId":"728","severity":1,"message":"741","line":739,"column":128,"nodeType":"730","messageId":"731","endLine":739,"endColumn":130},{"ruleId":"728","severity":1,"message":"729","line":742,"column":102,"nodeType":"730","messageId":"731","endLine":742,"endColumn":104},{"ruleId":"728","severity":1,"message":"729","line":742,"column":128,"nodeType":"730","messageId":"731","endLine":742,"endColumn":130},{"ruleId":"728","severity":1,"message":"741","line":743,"column":107,"nodeType":"730","messageId":"731","endLine":743,"endColumn":109},{"ruleId":"728","severity":1,"message":"729","line":746,"column":102,"nodeType":"730","messageId":"731","endLine":746,"endColumn":104},{"ruleId":"728","severity":1,"message":"729","line":746,"column":128,"nodeType":"730","messageId":"731","endLine":746,"endColumn":130},{"ruleId":"728","severity":1,"message":"729","line":746,"column":161,"nodeType":"730","messageId":"731","endLine":746,"endColumn":163},{"ruleId":"728","severity":1,"message":"741","line":771,"column":78,"nodeType":"730","messageId":"731","endLine":771,"endColumn":80},{"ruleId":"728","severity":1,"message":"729","line":801,"column":63,"nodeType":"730","messageId":"731","endLine":801,"endColumn":65},{"ruleId":"728","severity":1,"message":"729","line":803,"column":85,"nodeType":"730","messageId":"731","endLine":803,"endColumn":87},{"ruleId":"728","severity":1,"message":"729","line":807,"column":67,"nodeType":"730","messageId":"731","endLine":807,"endColumn":69},{"ruleId":"728","severity":1,"message":"729","line":844,"column":67,"nodeType":"730","messageId":"731","endLine":844,"endColumn":69},{"ruleId":"734","severity":1,"message":"735","line":119,"column":51,"nodeType":"736","messageId":"737","endLine":119,"endColumn":53},{"ruleId":"728","severity":1,"message":"741","line":128,"column":54,"nodeType":"730","messageId":"731","endLine":128,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":129,"column":25,"nodeType":"730","messageId":"731","endLine":129,"endColumn":27},{"ruleId":"728","severity":1,"message":"729","line":129,"column":48,"nodeType":"730","messageId":"731","endLine":129,"endColumn":50},{"ruleId":"728","severity":1,"message":"729","line":169,"column":39,"nodeType":"730","messageId":"731","endLine":169,"endColumn":41},{"ruleId":"728","severity":1,"message":"729","line":169,"column":66,"nodeType":"730","messageId":"731","endLine":169,"endColumn":68},{"ruleId":"728","severity":1,"message":"729","line":231,"column":53,"nodeType":"730","messageId":"731","endLine":231,"endColumn":55},{"ruleId":"728","severity":1,"message":"729","line":311,"column":100,"nodeType":"730","messageId":"731","endLine":311,"endColumn":102},{"ruleId":"750","severity":1,"message":"751","line":326,"column":76,"nodeType":"752","messageId":"753","endLine":326,"endColumn":78},{"ruleId":"750","severity":1,"message":"751","line":326,"column":111,"nodeType":"752","messageId":"753","endLine":326,"endColumn":113},{"ruleId":"728","severity":1,"message":"729","line":356,"column":77,"nodeType":"730","messageId":"731","endLine":356,"endColumn":79},{"ruleId":"728","severity":1,"message":"729","line":359,"column":87,"nodeType":"730","messageId":"731","endLine":359,"endColumn":89},{"ruleId":"728","severity":1,"message":"729","line":26,"column":34,"nodeType":"730","messageId":"731","endLine":26,"endColumn":36},{"ruleId":"728","severity":1,"message":"729","line":26,"column":74,"nodeType":"730","messageId":"731","endLine":26,"endColumn":76},{"ruleId":"728","severity":1,"message":"729","line":28,"column":38,"nodeType":"730","messageId":"731","endLine":28,"endColumn":40},{"ruleId":"728","severity":1,"message":"729","line":51,"column":56,"nodeType":"730","messageId":"731","endLine":51,"endColumn":58},{"ruleId":"728","severity":1,"message":"729","line":73,"column":61,"nodeType":"730","messageId":"731","endLine":73,"endColumn":63},{"ruleId":"705","severity":1,"message":"754","line":3,"column":8,"nodeType":"707","messageId":"708","endLine":3,"endColumn":27},{"ruleId":"728","severity":1,"message":"729","line":27,"column":41,"nodeType":"730","messageId":"731","endLine":27,"endColumn":43},{"ruleId":"728","severity":1,"message":"729","line":28,"column":15,"nodeType":"730","messageId":"731","endLine":28,"endColumn":17},{"ruleId":"728","severity":1,"message":"729","line":38,"column":18,"nodeType":"730","messageId":"731","endLine":38,"endColumn":20},{"ruleId":"728","severity":1,"message":"729","line":42,"column":32,"nodeType":"730","messageId":"731","endLine":42,"endColumn":34},{"ruleId":"728","severity":1,"message":"729","line":69,"column":51,"nodeType":"730","messageId":"731","endLine":69,"endColumn":53},{"ruleId":"728","severity":1,"message":"729","line":82,"column":51,"nodeType":"730","messageId":"731","endLine":82,"endColumn":53},{"ruleId":"728","severity":1,"message":"729","line":100,"column":19,"nodeType":"730","messageId":"731","endLine":100,"endColumn":21},{"ruleId":"728","severity":1,"message":"729","line":101,"column":22,"nodeType":"730","messageId":"731","endLine":101,"endColumn":24},{"ruleId":"728","severity":1,"message":"729","line":46,"column":31,"nodeType":"730","messageId":"731","endLine":46,"endColumn":33},{"ruleId":"728","severity":1,"message":"729","line":88,"column":48,"nodeType":"730","messageId":"731","endLine":88,"endColumn":50},{"ruleId":"705","severity":1,"message":"754","line":3,"column":8,"nodeType":"707","messageId":"708","endLine":3,"endColumn":27},{"ruleId":"705","severity":1,"message":"755","line":6,"column":8,"nodeType":"707","messageId":"708","endLine":6,"endColumn":18},{"ruleId":"705","severity":1,"message":"756","line":8,"column":8,"nodeType":"707","messageId":"708","endLine":8,"endColumn":37},{"ruleId":"728","severity":1,"message":"729","line":54,"column":38,"nodeType":"730","messageId":"731","endLine":54,"endColumn":40},{"ruleId":"728","severity":1,"message":"729","line":54,"column":65,"nodeType":"730","messageId":"731","endLine":54,"endColumn":67},{"ruleId":"728","severity":1,"message":"729","line":80,"column":49,"nodeType":"730","messageId":"731","endLine":80,"endColumn":51},{"ruleId":"734","severity":1,"message":"735","line":140,"column":25,"nodeType":"736","messageId":"737","endLine":140,"endColumn":27},{"ruleId":"728","severity":1,"message":"741","line":141,"column":33,"nodeType":"730","messageId":"731","endLine":141,"endColumn":35},{"ruleId":"728","severity":1,"message":"729","line":141,"column":54,"nodeType":"730","messageId":"731","endLine":141,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":141,"column":94,"nodeType":"730","messageId":"731","endLine":141,"endColumn":96},{"ruleId":"705","severity":1,"message":"757","line":6,"column":16,"nodeType":"707","messageId":"708","endLine":6,"endColumn":26},{"ruleId":"728","severity":1,"message":"729","line":39,"column":34,"nodeType":"730","messageId":"731","endLine":39,"endColumn":36},{"ruleId":"728","severity":1,"message":"729","line":43,"column":27,"nodeType":"730","messageId":"731","endLine":43,"endColumn":29},{"ruleId":"728","severity":1,"message":"729","line":43,"column":73,"nodeType":"730","messageId":"731","endLine":43,"endColumn":75},{"ruleId":"728","severity":1,"message":"729","line":43,"column":113,"nodeType":"730","messageId":"731","endLine":43,"endColumn":115},{"ruleId":"728","severity":1,"message":"729","line":120,"column":49,"nodeType":"730","messageId":"731","endLine":120,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":173,"column":108,"nodeType":"730","messageId":"731","endLine":173,"endColumn":110},{"ruleId":"705","severity":1,"message":"758","line":7,"column":8,"nodeType":"707","messageId":"708","endLine":7,"endColumn":27},{"ruleId":"728","severity":1,"message":"729","line":34,"column":76,"nodeType":"730","messageId":"731","endLine":34,"endColumn":78},{"ruleId":"728","severity":1,"message":"729","line":34,"column":112,"nodeType":"730","messageId":"731","endLine":34,"endColumn":114},{"ruleId":"728","severity":1,"message":"729","line":61,"column":54,"nodeType":"730","messageId":"731","endLine":61,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":97,"column":58,"nodeType":"730","messageId":"731","endLine":97,"endColumn":60},{"ruleId":"728","severity":1,"message":"729","line":106,"column":90,"nodeType":"730","messageId":"731","endLine":106,"endColumn":92},{"ruleId":"728","severity":1,"message":"729","line":140,"column":72,"nodeType":"730","messageId":"731","endLine":140,"endColumn":74},{"ruleId":"728","severity":1,"message":"729","line":146,"column":46,"nodeType":"730","messageId":"731","endLine":146,"endColumn":48},{"ruleId":"728","severity":1,"message":"729","line":150,"column":92,"nodeType":"730","messageId":"731","endLine":150,"endColumn":94},{"ruleId":"728","severity":1,"message":"729","line":157,"column":66,"nodeType":"730","messageId":"731","endLine":157,"endColumn":68},{"ruleId":"728","severity":1,"message":"729","line":157,"column":109,"nodeType":"730","messageId":"731","endLine":157,"endColumn":111},{"ruleId":"728","severity":1,"message":"729","line":158,"column":96,"nodeType":"730","messageId":"731","endLine":158,"endColumn":98},{"ruleId":"728","severity":1,"message":"729","line":238,"column":22,"nodeType":"730","messageId":"731","endLine":238,"endColumn":24},{"ruleId":"728","severity":1,"message":"741","line":303,"column":28,"nodeType":"730","messageId":"731","endLine":303,"endColumn":30},{"ruleId":"728","severity":1,"message":"729","line":306,"column":22,"nodeType":"730","messageId":"731","endLine":306,"endColumn":24},{"ruleId":"728","severity":1,"message":"729","line":326,"column":27,"nodeType":"730","messageId":"731","endLine":326,"endColumn":29},{"ruleId":"728","severity":1,"message":"729","line":356,"column":71,"nodeType":"730","messageId":"731","endLine":356,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":466,"column":19,"nodeType":"730","messageId":"731","endLine":466,"endColumn":21},{"ruleId":"750","severity":1,"message":"751","line":557,"column":79,"nodeType":"752","messageId":"753","endLine":557,"endColumn":81},{"ruleId":"750","severity":1,"message":"751","line":557,"column":116,"nodeType":"752","messageId":"753","endLine":557,"endColumn":118},{"ruleId":"705","severity":1,"message":"732","line":6,"column":24,"nodeType":"707","messageId":"708","endLine":6,"endColumn":29},{"ruleId":"705","severity":1,"message":"749","line":6,"column":31,"nodeType":"707","messageId":"708","endLine":6,"endColumn":41},{"ruleId":"728","severity":1,"message":"729","line":48,"column":47,"nodeType":"730","messageId":"731","endLine":48,"endColumn":49},{"ruleId":"728","severity":1,"message":"741","line":55,"column":87,"nodeType":"730","messageId":"731","endLine":55,"endColumn":89},{"ruleId":"728","severity":1,"message":"741","line":56,"column":99,"nodeType":"730","messageId":"731","endLine":56,"endColumn":101},{"ruleId":"728","severity":1,"message":"729","line":94,"column":22,"nodeType":"730","messageId":"731","endLine":94,"endColumn":24},{"ruleId":"728","severity":1,"message":"729","line":158,"column":66,"nodeType":"730","messageId":"731","endLine":158,"endColumn":68},{"ruleId":"734","severity":1,"message":"735","line":241,"column":36,"nodeType":"736","messageId":"737","endLine":241,"endColumn":38},{"ruleId":"728","severity":1,"message":"741","line":248,"column":43,"nodeType":"730","messageId":"731","endLine":248,"endColumn":45},{"ruleId":"728","severity":1,"message":"729","line":270,"column":45,"nodeType":"730","messageId":"731","endLine":270,"endColumn":47},{"ruleId":"728","severity":1,"message":"729","line":298,"column":26,"nodeType":"730","messageId":"731","endLine":298,"endColumn":28},{"ruleId":"728","severity":1,"message":"729","line":318,"column":56,"nodeType":"730","messageId":"731","endLine":318,"endColumn":58},{"ruleId":"728","severity":1,"message":"729","line":331,"column":56,"nodeType":"730","messageId":"731","endLine":331,"endColumn":58},{"ruleId":"728","severity":1,"message":"729","line":421,"column":59,"nodeType":"730","messageId":"731","endLine":421,"endColumn":61},{"ruleId":"728","severity":1,"message":"729","line":441,"column":59,"nodeType":"730","messageId":"731","endLine":441,"endColumn":61},{"ruleId":"728","severity":1,"message":"729","line":464,"column":63,"nodeType":"730","messageId":"731","endLine":464,"endColumn":65},{"ruleId":"728","severity":1,"message":"729","line":464,"column":96,"nodeType":"730","messageId":"731","endLine":464,"endColumn":98},{"ruleId":"728","severity":1,"message":"741","line":469,"column":66,"nodeType":"730","messageId":"731","endLine":469,"endColumn":68},{"ruleId":"728","severity":1,"message":"729","line":47,"column":46,"nodeType":"730","messageId":"731","endLine":47,"endColumn":48},{"ruleId":"701","replacedBy":"759"},{"ruleId":"703","replacedBy":"760"},{"ruleId":"705","severity":1,"message":"732","line":2,"column":24,"nodeType":"707","messageId":"708","endLine":2,"endColumn":29},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":46,"column":51,"nodeType":"736","messageId":"737","endLine":46,"endColumn":53},{"ruleId":"728","severity":1,"message":"741","line":48,"column":54,"nodeType":"730","messageId":"731","endLine":48,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":90,"column":68,"nodeType":"730","messageId":"731","endLine":90,"endColumn":70},{"ruleId":"728","severity":1,"message":"729","line":53,"column":46,"nodeType":"730","messageId":"731","endLine":53,"endColumn":48},{"ruleId":"728","severity":1,"message":"729","line":68,"column":23,"nodeType":"730","messageId":"731","endLine":68,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":89,"column":23,"nodeType":"730","messageId":"731","endLine":89,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":137,"column":84,"nodeType":"730","messageId":"731","endLine":137,"endColumn":86},{"ruleId":"728","severity":1,"message":"729","line":145,"column":78,"nodeType":"730","messageId":"731","endLine":145,"endColumn":80},{"ruleId":"728","severity":1,"message":"729","line":43,"column":37,"nodeType":"730","messageId":"731","endLine":43,"endColumn":39},{"ruleId":"728","severity":1,"message":"729","line":43,"column":87,"nodeType":"730","messageId":"731","endLine":43,"endColumn":89},{"ruleId":"750","severity":1,"message":"751","line":24,"column":73,"nodeType":"752","messageId":"753","endLine":24,"endColumn":75},{"ruleId":"750","severity":1,"message":"751","line":24,"column":110,"nodeType":"752","messageId":"753","endLine":24,"endColumn":112},{"ruleId":"728","severity":1,"message":"729","line":41,"column":83,"nodeType":"730","messageId":"731","endLine":41,"endColumn":85},{"ruleId":"728","severity":1,"message":"729","line":41,"column":135,"nodeType":"730","messageId":"731","endLine":41,"endColumn":137},{"ruleId":"728","severity":1,"message":"729","line":44,"column":46,"nodeType":"730","messageId":"731","endLine":44,"endColumn":48},{"ruleId":"728","severity":1,"message":"729","line":57,"column":23,"nodeType":"730","messageId":"731","endLine":57,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":81,"column":38,"nodeType":"730","messageId":"731","endLine":81,"endColumn":40},{"ruleId":"728","severity":1,"message":"729","line":98,"column":86,"nodeType":"730","messageId":"731","endLine":98,"endColumn":88},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":42,"column":51,"nodeType":"736","messageId":"737","endLine":42,"endColumn":53},{"ruleId":"728","severity":1,"message":"741","line":44,"column":54,"nodeType":"730","messageId":"731","endLine":44,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":65,"column":39,"nodeType":"730","messageId":"731","endLine":65,"endColumn":41},{"ruleId":"705","severity":1,"message":"742","line":4,"column":8,"nodeType":"707","messageId":"708","endLine":4,"endColumn":20},{"ruleId":"728","severity":1,"message":"729","line":19,"column":37,"nodeType":"730","messageId":"731","endLine":19,"endColumn":39},{"ruleId":"728","severity":1,"message":"729","line":87,"column":101,"nodeType":"730","messageId":"731","endLine":87,"endColumn":103},{"ruleId":"728","severity":1,"message":"729","line":94,"column":101,"nodeType":"730","messageId":"731","endLine":94,"endColumn":103},{"ruleId":"728","severity":1,"message":"729","line":59,"column":22,"nodeType":"730","messageId":"731","endLine":59,"endColumn":24},{"ruleId":"728","severity":1,"message":"729","line":81,"column":23,"nodeType":"730","messageId":"731","endLine":81,"endColumn":25},{"ruleId":"728","severity":1,"message":"729","line":105,"column":38,"nodeType":"730","messageId":"731","endLine":105,"endColumn":40},{"ruleId":"728","severity":1,"message":"729","line":122,"column":86,"nodeType":"730","messageId":"731","endLine":122,"endColumn":88},{"ruleId":"728","severity":1,"message":"729","line":176,"column":80,"nodeType":"730","messageId":"731","endLine":176,"endColumn":82},{"ruleId":"705","severity":1,"message":"733","line":2,"column":31,"nodeType":"707","messageId":"708","endLine":2,"endColumn":43},{"ruleId":"734","severity":1,"message":"735","line":44,"column":51,"nodeType":"736","messageId":"737","endLine":44,"endColumn":53},{"ruleId":"728","severity":1,"message":"741","line":46,"column":54,"nodeType":"730","messageId":"731","endLine":46,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":67,"column":39,"nodeType":"730","messageId":"731","endLine":67,"endColumn":41},{"ruleId":"728","severity":1,"message":"729","line":101,"column":80,"nodeType":"730","messageId":"731","endLine":101,"endColumn":82},{"ruleId":"728","severity":1,"message":"729","line":130,"column":109,"nodeType":"730","messageId":"731","endLine":130,"endColumn":111},{"ruleId":"728","severity":1,"message":"729","line":131,"column":71,"nodeType":"730","messageId":"731","endLine":131,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":134,"column":109,"nodeType":"730","messageId":"731","endLine":134,"endColumn":111},{"ruleId":"728","severity":1,"message":"729","line":135,"column":71,"nodeType":"730","messageId":"731","endLine":135,"endColumn":73},{"ruleId":"728","severity":1,"message":"729","line":52,"column":49,"nodeType":"730","messageId":"731","endLine":52,"endColumn":51},{"ruleId":"728","severity":1,"message":"729","line":53,"column":94,"nodeType":"730","messageId":"731","endLine":53,"endColumn":96},{"ruleId":"728","severity":1,"message":"729","line":57,"column":56,"nodeType":"730","messageId":"731","endLine":57,"endColumn":58},{"ruleId":"728","severity":1,"message":"729","line":57,"column":107,"nodeType":"730","messageId":"731","endLine":57,"endColumn":109},{"ruleId":"728","severity":1,"message":"729","line":93,"column":54,"nodeType":"730","messageId":"731","endLine":93,"endColumn":56},{"ruleId":"728","severity":1,"message":"729","line":132,"column":62,"nodeType":"730","messageId":"731","endLine":132,"endColumn":64},{"ruleId":"728","severity":1,"message":"729","line":133,"column":58,"nodeType":"730","messageId":"731","endLine":133,"endColumn":60},{"ruleId":"728","severity":1,"message":"729","line":31,"column":30,"nodeType":"730","messageId":"731","endLine":31,"endColumn":32},{"ruleId":"728","severity":1,"message":"741","line":68,"column":26,"nodeType":"730","messageId":"731","endLine":68,"endColumn":28},{"ruleId":"728","severity":1,"message":"729","line":4,"column":27,"nodeType":"730","messageId":"731","endLine":4,"endColumn":29},{"ruleId":"750","severity":1,"message":"761","line":16,"column":20,"nodeType":"730","messageId":"753","endLine":16,"endColumn":21},{"ruleId":"750","severity":1,"message":"761","line":16,"column":67,"nodeType":"730","messageId":"753","endLine":16,"endColumn":68},{"ruleId":"750","severity":1,"message":"762","line":16,"column":67,"nodeType":"730","messageId":"753","endLine":16,"endColumn":68},{"ruleId":"750","severity":1,"message":"762","line":16,"column":72,"nodeType":"730","messageId":"753","endLine":16,"endColumn":74},{"ruleId":"701","replacedBy":"763"},{"ruleId":"703","replacedBy":"764"},{"ruleId":"728","severity":1,"message":"729","line":10,"column":37,"nodeType":"730","messageId":"731","endLine":10,"endColumn":39},{"ruleId":"728","severity":1,"message":"729","line":10,"column":88,"nodeType":"730","messageId":"731","endLine":10,"endColumn":90},{"ruleId":"750","severity":1,"message":"751","line":85,"column":67,"nodeType":"752","messageId":"753","endLine":85,"endColumn":69},{"ruleId":"750","severity":1,"message":"751","line":85,"column":104,"nodeType":"752","messageId":"753","endLine":85,"endColumn":106},{"ruleId":"705","severity":1,"message":"765","line":2,"column":10,"nodeType":"707","messageId":"708","endLine":2,"endColumn":29},{"ruleId":"705","severity":1,"message":"766","line":3,"column":8,"nodeType":"707","messageId":"708","endLine":3,"endColumn":18},"no-native-reassign",["767"],"no-negated-in-lhs",["768"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'AuthenticationServise' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["767"],["768"],"'AppInstructor' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'EventListner' is defined but never used.","'AuthenticationService' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Expected '!==' and instead saw '!='.","'CustomSelect' is defined but never used.","'precent' is assigned a value but never used.","'dataAll' is assigned a value but never used.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'length' is assigned a value but never used.","'FieldArray' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'DeliveryDataService' is defined but never used.","'DatePicker' is defined but never used.","'InventoryNumberInnerComponent' is defined but never used.","'withRouter' is defined but never used.","'ProductDetailFilter' is defined but never used.",["767"],["768"],"Unexpected mix of '^' and '&'.","Unexpected mix of '&' and '>>'.",["767"],["768"],"'EventSourcePolyfill' is defined but never used.","'authHeader' is defined but never used.","no-global-assign","no-unsafe-negation"]