[{"C:\\Users\\HP\\test-react-app\\src\\index.js":"1","C:\\Users\\HP\\test-react-app\\src\\App.js":"2","C:\\Users\\HP\\test-react-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\test-react-app\\src\\component\\AppInstructor.jsx":"4","C:\\Users\\HP\\test-react-app\\src\\component\\ListCoursesComponent.jsx":"5","C:\\Users\\HP\\test-react-app\\src\\service\\CourseDataService.js":"6","C:\\Users\\HP\\test-react-app\\src\\component\\CourseComponent.jsx":"7","C:\\Users\\HP\\test-react-app\\src\\service\\AuthenticationService.js":"8","C:\\Users\\HP\\test-react-app\\src\\component\\LoginComponent.jsx":"9","C:\\Users\\HP\\test-react-app\\src\\component\\LogoutComponent.jsx":"10","C:\\Users\\HP\\test-react-app\\src\\component\\MenuComponent.jsx":"11","C:\\Users\\HP\\test-react-app\\src\\component\\AuthenticatedRoute.jsx":"12","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\index.js":"13","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\App.js":"14","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\reportWebVitals.js":"15","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AppInstructor.jsx":"16","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthenticationService.js":"17","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LogoutComponent.jsx":"18","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AuthenticatedRoute.jsx":"19","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\MenuComponent.jsx":"20","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LoginComponent.jsx":"21","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserDataService.js":"22","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthHeader.js":"23","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\PaginationComponent.jsx":"24","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserFilter.jsx":"25","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CustomSelect.jsx":"26","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\footer.jsx":"27","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\SupplierDataService.js":"28","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\SupplierFilter.jsx":"29","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDataService.js":"30","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductFilter.jsx":"31","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDataService.js":"32","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\DeliveryFilter.jsx":"33","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDetailDataService.js":"34","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\SupplierComponent.jsx":"35","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductComponent.jsx":"36","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductsComponent.jsx":"37","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUsersComponent.jsx":"38","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveriesComponent.jsx":"39","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListSuppliersComponent.jsx":"40","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserComponent.jsx":"41","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryComponent.jsx":"42","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductDetails.jsx":"43","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductDetailFilter.jsx":"44","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserProfilesComponent.jsx":"45","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserProfileDataService.js":"46","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserProfileFilter.jsx":"47","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\InventoryNumberInnerComponent.jsx":"48","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryInnerComponent.jsx":"49","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DDInnerComponent.jsx":"50","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDetailDataService.js":"51","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductDetailInnerComponent.jsx":"52","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserProfileInnerComponent.jsx":"53","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\TimelineInnerComponent.jsx":"54","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CountryDataService.js":"55","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CityFilter.jsx":"56","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCountriesComponent.jsx":"57","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CountryInnerComponent.jsx":"58","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CityInnerComponent.jsx":"59","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCategoriesComponent.jsx":"60","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CategoryDataService.js":"61","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CategoryFilter.jsx":"62","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CategoryInnerComponent.jsx":"63","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserCategoriesComponent.jsx":"64","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserCategoryDataService.js":"65","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserCategoryFilter.jsx":"66","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserCategoryInnerComponent.jsx":"67","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Shared\\Function.js":"68","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\Functions.js":"69","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\HomeComponent.jsx":"70","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\OrderByComponent.jsx":"71","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeleteAllInnerComponent.jsx":"72","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\EventListner.jsx":"73","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListPendingUsersComponent.jsx":"74","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\PendingUserDataService.js":"75","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\PendingUserFilter.jsx":"76"},{"size":500,"mtime":499162500000,"results":"77","hashOfConfig":"78"},{"size":641,"mtime":1607907244036,"results":"79","hashOfConfig":"78"},{"size":362,"mtime":499162500000,"results":"80","hashOfConfig":"78"},{"size":1385,"mtime":1607913834807,"results":"81","hashOfConfig":"78"},{"size":3279,"mtime":1607822944698,"results":"82","hashOfConfig":"78"},{"size":840,"mtime":1607833218581,"results":"83","hashOfConfig":"78"},{"size":3617,"mtime":1607910567406,"results":"84","hashOfConfig":"78"},{"size":1663,"mtime":1607909799563,"results":"85","hashOfConfig":"78"},{"size":5841,"mtime":1607914025390,"results":"86","hashOfConfig":"78"},{"size":405,"mtime":1607904232280,"results":"87","hashOfConfig":"78"},{"size":1428,"mtime":1607913436644,"results":"88","hashOfConfig":"78"},{"size":475,"mtime":1607901172852,"results":"89","hashOfConfig":"78"},{"size":288,"mtime":1621944070770,"results":"90","hashOfConfig":"91"},{"size":459,"mtime":1621944070790,"results":"92","hashOfConfig":"91"},{"size":362,"mtime":499162500000,"results":"93","hashOfConfig":"91"},{"size":5364,"mtime":1621944230248,"results":"94","hashOfConfig":"91"},{"size":2524,"mtime":1619170740028,"results":"95","hashOfConfig":"91"},{"size":405,"mtime":1607904232280,"results":"96","hashOfConfig":"91"},{"size":457,"mtime":1619171170238,"results":"97","hashOfConfig":"91"},{"size":7698,"mtime":1622132688515,"results":"98","hashOfConfig":"91"},{"size":5377,"mtime":1621881911013,"results":"99","hashOfConfig":"91"},{"size":670,"mtime":1619170919657,"results":"100","hashOfConfig":"91"},{"size":313,"mtime":1614091362802,"results":"101","hashOfConfig":"91"},{"size":6682,"mtime":1619177185350,"results":"102","hashOfConfig":"91"},{"size":8279,"mtime":1620825184577,"results":"103","hashOfConfig":"91"},{"size":1264,"mtime":1619169580406,"results":"104","hashOfConfig":"91"},{"size":407,"mtime":1619171197143,"results":"105","hashOfConfig":"91"},{"size":664,"mtime":1619170919683,"results":"106","hashOfConfig":"91"},{"size":4386,"mtime":1619170154645,"results":"107","hashOfConfig":"91"},{"size":661,"mtime":1619170919708,"results":"108","hashOfConfig":"91"},{"size":8331,"mtime":1619170121254,"results":"109","hashOfConfig":"91"},{"size":809,"mtime":1619170919747,"results":"110","hashOfConfig":"91"},{"size":8130,"mtime":1619169640692,"results":"111","hashOfConfig":"91"},{"size":932,"mtime":1619170919695,"results":"112","hashOfConfig":"91"},{"size":7146,"mtime":1620831040417,"results":"113","hashOfConfig":"91"},{"size":10144,"mtime":1619177452011,"results":"114","hashOfConfig":"91"},{"size":12359,"mtime":1619175080464,"results":"115","hashOfConfig":"91"},{"size":11476,"mtime":1621989977480,"results":"116","hashOfConfig":"91"},{"size":43045,"mtime":1619174054647,"results":"117","hashOfConfig":"91"},{"size":9745,"mtime":1619175201196,"results":"118","hashOfConfig":"91"},{"size":19458,"mtime":1621959080159,"results":"119","hashOfConfig":"91"},{"size":38232,"mtime":1622133000932,"results":"120","hashOfConfig":"91"},{"size":16424,"mtime":1619174920511,"results":"121","hashOfConfig":"91"},{"size":16273,"mtime":1619669524228,"results":"122","hashOfConfig":"91"},{"size":33929,"mtime":1620910832609,"results":"123","hashOfConfig":"91"},{"size":1056,"mtime":1619170919331,"results":"124","hashOfConfig":"91"},{"size":13288,"mtime":1620994865166,"results":"125","hashOfConfig":"91"},{"size":5646,"mtime":1619179612193,"results":"126","hashOfConfig":"91"},{"size":5599,"mtime":1619172649839,"results":"127","hashOfConfig":"91"},{"size":11654,"mtime":1619172018640,"results":"128","hashOfConfig":"91"},{"size":682,"mtime":1619170919733,"results":"129","hashOfConfig":"91"},{"size":7961,"mtime":1619177508794,"results":"130","hashOfConfig":"91"},{"size":30099,"mtime":1621011222290,"results":"131","hashOfConfig":"91"},{"size":19874,"mtime":1619177952849,"results":"132","hashOfConfig":"91"},{"size":1031,"mtime":1619170919758,"results":"133","hashOfConfig":"91"},{"size":5299,"mtime":1619169523308,"results":"134","hashOfConfig":"91"},{"size":12219,"mtime":1619174331870,"results":"135","hashOfConfig":"91"},{"size":6643,"mtime":1621024533675,"results":"136","hashOfConfig":"91"},{"size":6389,"mtime":1621025624336,"results":"137","hashOfConfig":"91"},{"size":8222,"mtime":1619173273983,"results":"138","hashOfConfig":"91"},{"size":671,"mtime":1619170919772,"results":"139","hashOfConfig":"91"},{"size":4637,"mtime":1619169470872,"results":"140","hashOfConfig":"91"},{"size":5480,"mtime":1619171248889,"results":"141","hashOfConfig":"91"},{"size":8530,"mtime":1619175453557,"results":"142","hashOfConfig":"91"},{"size":678,"mtime":1619170919670,"results":"143","hashOfConfig":"91"},{"size":6200,"mtime":1620994268338,"results":"144","hashOfConfig":"91"},{"size":6966,"mtime":1620853940658,"results":"145","hashOfConfig":"91"},{"size":1630,"mtime":1619170696207,"results":"146","hashOfConfig":"91"},{"size":3021,"mtime":1619169661144,"results":"147","hashOfConfig":"91"},{"size":5389,"mtime":1619172853487,"results":"148","hashOfConfig":"91"},{"size":687,"mtime":1619177106433,"results":"149","hashOfConfig":"91"},{"size":4271,"mtime":1619172085764,"results":"150","hashOfConfig":"91"},{"size":3651,"mtime":1620788071533,"results":"151","hashOfConfig":"91"},{"size":12337,"mtime":1619174612760,"results":"152","hashOfConfig":"91"},{"size":673,"mtime":1619170919721,"results":"153","hashOfConfig":"91"},{"size":2761,"mtime":1619169711646,"results":"154","hashOfConfig":"91"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},"1i7ei4d",{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"157"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},"kghst6",{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"183"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"183"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"183"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"183"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"183"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"183"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"183"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"183"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"183"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"183"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"183"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"183"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"183"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"183"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"183"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"183"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"183"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"183"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"183"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"183"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"183"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"183"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"183"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"183"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"183"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"183"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"183"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"183"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"183"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"183"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"183"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"183"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"183"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"183"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"183"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"183"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"183"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"183"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"183"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"183"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"183"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"183"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"183"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"183"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"183"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"183"},"C:\\Users\\HP\\test-react-app\\src\\index.js",[],["357","358"],"C:\\Users\\HP\\test-react-app\\src\\App.js",["359"],"C:\\Users\\HP\\test-react-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\AppInstructor.jsx",["360"],"C:\\Users\\HP\\test-react-app\\src\\component\\ListCoursesComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\service\\CourseDataService.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\CourseComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\service\\AuthenticationService.js",[],"C:\\Users\\HP\\test-react-app\\src\\component\\LoginComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\component\\LogoutComponent.jsx",[],"C:\\Users\\HP\\test-react-app\\src\\component\\MenuComponent.jsx",["361"],"import React, { Component } from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport AuthenticationService from '../service/AuthenticationService';\r\n\r\nclass MenuComponent extends Component {\r\n    render() {\r\n\r\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n\r\n        return (\r\n            <header>\r\n\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div>\r\n                        < a href=\"#\" className=\"navbar-brand\">Inventory Management System</ a>\r\n                    </div>\r\n                    <ul className=\"navbar-nav\">\r\n                        <li><Link className=\"nav-link\" to=\"/courses\">Courses</Link></li>                        \r\n                    </ul>\r\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\r\n                        {\r\n                            !isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">\r\n                            Login</Link></li>\r\n                        }\r\n                        {\r\n\r\n                            isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\"\r\n                                onClick={AuthenticationService.logout}>Logout</Link></li>\r\n                        }\r\n\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n\r\n\r\n\r\n            )\r\n    }\r\n}\r\n\r\nexport default withRouter(MenuComponent)","C:\\Users\\HP\\test-react-app\\src\\component\\AuthenticatedRoute.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\index.js",[],["362","363"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\App.js",["364","365"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport AppInstructor from './component/AppInstructor';\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nfunction App() {\r\n\r\n    const [userLoggedIn, setUserLoggedIn] = useState();\r\n    return (\r\n        <div >\r\n            <AppInstructor\r\n            userLoggedIn={userLoggedIn} loggedIn={(value) => setUserLoggedIn(value)} />\r\n            \r\n        </div>\r\n    );\r\n      \r\n}\r\n\r\nexport default App;\r\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\reportWebVitals.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AppInstructor.jsx",["366"],"import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport LoginComponent from './LoginComponent';\r\nimport LogoutComponent from './LogoutComponent';\r\nimport MenuComponent from './MenuComponent';\r\nimport ListUsersComponent from './ListUsersComponent';\r\nimport UserComponent from './UserComponent';\r\nimport FooterComponent from './footer'\r\nimport ListSuppliersComponent from './ListSuppliersComponent';\r\nimport SupplierComponent from './SupplierComponent';\r\nimport ListProductsComponent from './ListProductsComponent';\r\nimport ProductComponent from './ProductComponent';\r\nimport ListDeliveriesComponent from './ListDeliveriesComponent';\r\nimport DeliveryComponent from './DeliveryComponent';\r\nimport ListProductDetails from './ListProductDetails';\r\nimport ListUserProfilesComponent from './ListUserProfilesComponent';\r\nimport ListCountriesComponent from './ListCountriesComponent';\r\nimport ListCategoriesComponent from './ListCategoriesComponent';\r\nimport ListUserCategoriesComponent from './ListUserCategoriesComponent';\r\nimport HomeComponent from './HomeComponent';\r\nimport ListPendingUsersComponent from './ListPendingUsersComponent';\r\nimport AuthenticatedRoute from './AuthenticatedRoute';\r\nimport AuthenticationService from '../service/AuthenticationService'\r\nimport EventListner from './EventListner';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass AppInstructor extends Component {\r\n\r\n    render() {\r\n\r\n        if (AuthenticationService.isUserLoggedIn())\r\n            this.props.loggedIn(true);\r\n       \r\n        return (           \r\n           <>\r\n                  <div className=\"pb-5\">\r\n                    <Router>   \r\n                        <>                           \r\n                            {this.props.userLoggedIn && <EventListner/>}\r\n                            <MenuComponent menuclicked={false} onLogout={() => this.props.loggedIn(false)} />                           \r\n                        <Switch>                           \r\n                            <Route path=\"/login\" exact render={(props) => (\r\n                                 <LoginComponent {...props} onLogin={(value) => this.props.loggedIn(value)} />                                    \r\n                            )} />                               \r\n                            <AuthenticatedRoute path=\"/logout\" exact component={LogoutComponent}/>                   \r\n                            <AuthenticatedRoute path=\"/users\" exact component={ListUsersComponent} />\r\n                            <AuthenticatedRoute path=\"/pendingrequests\" exact render={(props) => (<ListPendingUsersComponent {...props} />)} />\r\n                            <AuthenticatedRoute path=\"/users?:search\" exact component={ListUsersComponent} />\r\n                            <AuthenticatedRoute path=\"/users/:id\" component={UserComponent} />\r\n                            <AuthenticatedRoute path=\"/suppliers\" exact component={ListSuppliersComponent} />\r\n                            <AuthenticatedRoute path=\"/suppliers?:search\" exact component={ListSuppliersComponent} />\r\n                            <AuthenticatedRoute path=\"/suppliers/:id\" component={SupplierComponent} />\r\n                            <AuthenticatedRoute path=\"/products\" exact component={ListProductsComponent} />\r\n                            <AuthenticatedRoute path=\"products?:search\" exact component={ListProductsComponent} />\r\n                            <AuthenticatedRoute path=\"/products/:id\" component={ProductComponent} />\r\n                            <AuthenticatedRoute path=\"/deliveries\" exact component={ListDeliveriesComponent} />\r\n                            <AuthenticatedRoute path=\"/deliveries/:id\" exact component={DeliveryComponent} />\r\n                            <AuthenticatedRoute path=\"/deliveries/:id/:deliveryView\" exact component={DeliveryComponent} />\r\n                            <AuthenticatedRoute  path=\"/productdetails\" exact render={(props) => (<ListProductDetails {...props} />)} />\r\n                            <AuthenticatedRoute path=\"/userprofiles\" exact component={ListUserProfilesComponent} />\r\n                            <AuthenticatedRoute path=\"/countries\" exact component={ListCountriesComponent} />\r\n                            <AuthenticatedRoute path=\"/categories\" exact component={ListCategoriesComponent} />\r\n                            <AuthenticatedRoute path=\"/usercategories\" exact component={ListUserCategoriesComponent} />\r\n                            <AuthenticatedRoute path=\"/home\" exact component={HomeComponent} />\r\n                            <AuthenticatedRoute path=\"/\" exact component={HomeComponent} />\r\n                            <Route key={\"unique1\"} path=\"/register/:id\" exact render={(props) => (<UserComponent {...props} />)} />\r\n                            <AuthenticatedRoute key={\"unique2\"} path=\"/editprofile/:id\" exact render={(props) => (<UserComponent {...props} />)} />\r\n                        </Switch>\r\n                   </>\r\n                       {this.props.userLoggedIn && <ToastContainer/>}                           \r\n                    </Router>\r\n                <FooterComponent />\r\n                </div>\r\n                </>\r\n            )\r\n    }\r\n}\r\n\r\nexport default AppInstructor","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthenticationService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LogoutComponent.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\AuthenticatedRoute.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\MenuComponent.jsx",["367"],"import React, { Component } from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport '../myStyles/Menu.css'\r\n\r\nclass MenuComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n       \r\n        this.state = {\r\n            activeLinkId: 0,\r\n            menuClicked: props.menuClicked||false,\r\n            \r\n        }       \r\n        this.setActiveLink = this.setActiveLink.bind(this);       \r\n    }\r\n    setActiveLink(index) {\r\n        this.setState({\r\n            activeLinkId: index,\r\n            menuClicked:false\r\n        });\r\n    }\r\n    \r\n    openMenu=()=>{\r\n        let menuClicked = this.state.menuClicked;\r\n        menuClicked = !menuClicked;\r\n        this.setState({ menuClicked: menuClicked })\r\n    }\r\n\r\n    render() {\r\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const userName = AuthenticationService.getLoggedUerName();\r\n        const { location } = this.props;\r\n        return (\r\n            <header style={{\r\n                height: \"60px\"\r\n            }}>               \r\n                   <nav className=\"navbar navbar-expand-md\">\r\n                    <div>                       \r\n                        <Link className={\r\n                            location.pathname == \"/home\" ? \"navbar-brand special-h2-li selected\" : \"navbar-brand special-h2-li\"}\r\n                            onClick={() => this.setActiveLink(1)} to=\"/home\">Inventory UI</Link>\r\n                    </div>                   \r\n                    <div className={this.state.menuClicked ? \"clicked ml-auto\" : \"ml-auto\"}>                      \r\n                            <ul className=\"navbar-nav justify-content-end\">                           \r\n                        {(userRole === 'ROLE_Admin' || userRole === 'ROLE_Mol')&&\r\n                            <li><Link className={location.pathname.indexOf(\"/users\") > -1? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(2)} to=\"/users\">users</Link></li>\r\n                            }\r\n                            {(userRole === 'ROLE_Mol' || userRole === 'ROLE_Employee') &&\r\n                                <li><Link className={\r\n                                    location.pathname.indexOf(\"/userprofiles\") >-1? \"nav-link selected\" : \"nav-link\"}\r\n                                    onClick={() => this.setActiveLink(3)} to=\"/userprofiles\">profiles</Link></li>\r\n                            }                       \r\n                        {userRole === 'ROLE_Admin' &&\r\n                                <>\r\n                                    <li><Link className={\r\n                                        location.pathname.indexOf(\"/pendingrequests\") > -1 ? \"nav-link selected\" : \"nav-link\"}\r\n                                        onClick={() => this.setActiveLink(13)} to=\"/pendingrequests\">pending requests</Link></li>\r\n                                    <li><Link className={\r\n                                        location.pathname.indexOf(\"/categories\") >-1? \"nav-link selected\" : \"nav-link\"}\r\n                                        onClick={() => this.setActiveLink(4)} to=\"/categories\">categories</Link></li>\r\n                                    <li><Link className={\r\n                                        location.pathname.indexOf(\"/countries\") >-1? \"nav-link selected\" : \"nav-link\"}\r\n                                    onClick={() => this.setActiveLink(5)} to=\"/countries\">countries & cities</Link></li>\r\n                                </>\r\n                        }\r\n                        {userRole === 'ROLE_Mol' &&\r\n                            <>                       \r\n                                <li><Link className={\r\n                                    location.pathname.indexOf(\"/products\") >-1? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(6)} to=\"/products\">products</Link></li>\r\n                                <li><Link className={\r\n                                    (location.pathname.indexOf(\"/productdetails\") > -1 || location.pathname.indexOf(\"/productDetails\") > -1) ?\r\n                                \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(7)} to=\"/productdetails\">inventory</Link></li>\r\n                                <li><Link className={\r\n                                    location.pathname.indexOf(\"/usercategories\") >-1? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(8)} to=\"/usercategories\">categories</Link></li>\r\n                                <li><Link className={\r\n                                    location.pathname.indexOf(\"/suppliers\") >-1? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(9)} to=\"/suppliers\">suppliers</Link></li>                        \r\n                            <li><Link\r\n                                    className={\r\n                                        location.pathname.indexOf(\"/deliveries\") >-1? \"nav-link selected\" : \"nav-link\"}\r\n                                onClick={() => this.setActiveLink(10)} to=\"/deliveries\">deliveries</Link></li>\r\n                            </>\r\n                            }\r\n                            {\r\n                                <li className=\"ml-5\"><Link\r\n                                    className={\r\n                                        location.pathname.indexOf(\"/register\") > -1 || location.pathname.indexOf(\"/editprofile\") > -1 ?\r\n                                            \"nav-link selected\" : \"nav-link\"}\r\n                                    to={!isUserLoggedIn ? `/register/-1` : `/editprofile/${AuthenticationService.getLoggedUerId()}`}\r\n                                    onClick={() => {\r\n                                        this.setActiveLink(11)}}>\r\n                                    {!isUserLoggedIn ? \"register\" : userName}\r\n                                   </Link></li>\r\n                            }\r\n                            {\r\n                                !isUserLoggedIn && <li className=\"\"><Link\r\n                                    className={\r\n                                        location.pathname.indexOf(\"/login\") > -1 ? \"nav-link selected\" : \"nav-link\"} to=\"/login\">\r\n                                Login</Link></li>\r\n                        }\r\n                            {\r\n                                isUserLoggedIn && <li className=\"\"><Link className=\"nav-link\" to=\"/logout\"\r\n                                    onClick={() => {\r\n                                        this.setActiveLink(12); AuthenticationService.logout() ?\r\n                                            this.props.onLogout() : console.log(\"we r fine\")\r\n                                    }}>Logout</Link></li>\r\n                            }\r\n                                <li className=\"icon\"><Link                                    \r\n                                    onClick={() => {\r\n                                        let menuClicked = !this.state.menuClicked;\r\n                                        this.setState({ menuClicked: menuClicked })\r\n                                    }} \r\n                                    to=\"#\"><i class=\"fa fa-bars\"></i></Link></li>\r\n                        </ul>\r\n                        </div>                 \r\n                </nav >\r\n            </header>\r\n\r\n            )\r\n    }\r\n}\r\n\r\nexport default withRouter(MenuComponent)\r\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\LoginComponent.jsx",["368","369"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport '../myStyles/Style.css';\r\nimport Function from './Shared/Function'\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            hasLoginFailed: false,\r\n            showSuccessMsg: false,\r\n            errormsg: null,\r\n            isLoggedIn: props.isLoggedIn\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.loginClicked = this.loginClicked.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    getErrorMsg = (error) => {     \r\n        let msg = Function.getErrorMsg(error);\r\n        if (msg.startsWith('Error : Unauthorized,'))\r\n            msg = 'Invalid user name and/or password';       \r\n        return msg;\r\n    }\r\n\r\n    showError(msg,time) {\r\n        time = time || 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    } \r\n\r\n    loginClicked() {\r\n        AuthenticationService\r\n            .executeAuthentication(this.state.username, this.state.password)\r\n            .then((response) => {\r\n                this.setState({ showSuccessMsg: true })\r\n                this.setState({ hasLoginFailed: false })\r\n                let userRole = response.data.role;\r\n                AuthenticationService.registerSuccessfulLogin(\r\n                    this.state.username, response.data.token, userRole, response.data.id);              \r\n                this.props.onLogin(true);\r\n              \r\n                if (userRole == \"ROLE_Employee\") this.props.history.push('/userprofiles');\r\n                else this.props.history.push('/home');                \r\n            }).catch((error) => {\r\n                this.setState({\r\n                    showSuccessMsg: false,\r\n                    hasLoginFailed: true,\r\n                })\r\n                this.showError(this.getErrorMsg(error))\r\n        })           \r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.username) {\r\n            errors.username = 'Enter user name'\r\n        } else if (values.username.length < 3) {\r\n            errors.username = 'Enter at least 3 Characters for user name'\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Enter password'\r\n        } else if (values.password.length < 6) {\r\n            errors.password = 'Enter at least 6 Characters for password'\r\n        }\r\n        return errors\r\n    }\r\n\r\n    render() {\r\n        let { username, password } = this.state;\r\n        return (\r\n            <div className=\"container pt-5\">\r\n                <h3 className=\"mb-3\">Login</h3>\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                    {this.state.showSuccessMsg && <div>Login Successfull</div>}\r\n                    <Formik\r\n                        initialValues={{ username, password }}\r\n                        onSubmit={this.loginClicked}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >{(props) => (\r\n                        <Form>\r\n                            <fieldset className=\"form-group\">\r\n                                <label>User Name:</label>\r\n                                <Field className=\"form-control w-25\"\r\n                                    type=\"text\" name=\"username\"\r\n                                    value={this.state.username}\r\n                                    onChange={this.handleChange} />\r\n                                <ErrorMessage name=\"username\" component=\"div\"\r\n                                    className=\"alert alert-warning\" />\r\n                            </fieldset>\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Password:</label>\r\n                                <Field className=\"form-control w-25\"\r\n                                    type=\"password\" name=\"password\"\r\n                                    value={this.state.password}\r\n                                    onChange={this.handleChange} />\r\n                                <ErrorMessage name=\"password\" component=\"div\"\r\n                                    className=\"alert alert-warning\" />\r\n                            </fieldset>\r\n                            <button className=\"btn btn-mybtn p-x-5 mt-3\" type=\"submit\">Login</button>\r\n                        </Form>                               \r\n                            )}\r\n                    </Formik>\r\n            </div>\r\n        )}\r\n}\r\n\r\nexport default LoginComponent\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\AuthHeader.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\PaginationComponent.jsx",["370","371","372","373","374","375","376","377","378","379","380"],"import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport '../myStyles/Paging.css'\r\n\r\nclass PaginationComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedOption: { value: '10', label: '10' }\r\n        }\r\n        this.onPageClicked = this.onPageClicked.bind(this)\r\n        this.onCountChange = this.onCountChange.bind(this)\r\n    }\r\n\r\n    onCountChange = (selectedOption) => {\r\n        if (selectedOption.value == this.state.selectedOption.value) return;\r\n        this.setState({ selectedOption: selectedOption })\r\n        let path =  window.location.pathname;\r\n        let search = this.props.search || window.location.search; \r\n        let newPath = ``;\r\n        if (search.length < 1) {\r\n            newPath = `?${this.props.prefix}.itemsPerPage=${selectedOption.value}`;\r\n            newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith(this.props.prefix))\r\n                    continue\r\n                else                 \r\n                        newPath += searchItems[i] + '&'\r\n            }\r\n            newPath += this.props.prefix + '.itemsPerPage=' + selectedOption.value;\r\n            newPath = this.props.onNewSearch ? '?' + newPath : path + '?' + newPath ;\r\n        }\r\n        this.props.onNewSearch ? this.props.onNewSearch(newPath)\r\n            : this.props.history ? this.props.history.push(newPath) : window.location.href = newPath;\r\n    }\r\n\r\n    onPageClicked(pageNumber) {\r\n        if (pageNumber == this.props.page) return;\r\n        if(pageNumber < 0)  pageNumber = 0;\r\n        let path = window.location.pathname;\r\n        let search = this.props.search || window.location.search; \r\n        let newPath = ``;\r\n        if (search.length < 1) {\r\n            newPath = `?${this.props.prefix}.page=${pageNumber}`;\r\n            newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith(this.props.prefix + '.page'))\r\n                    continue\r\n                else                    \r\n                   newPath += searchItems[i]+'&'\r\n            }\r\n            newPath = '?' + newPath + this.props.prefix + '.page=' + pageNumber; \r\n            newPath = this.props.onNewSearch ? newPath : path + newPath;\r\n        }\r\n        this.props.onNewSearch ? this.props.onNewSearch(newPath)\r\n            : this.props.history ? this.props.history.push(newPath) : window.location.href = newPath;       \r\n    }\r\n\r\n    render() {\r\n        const options = [\r\n            { value: '5', label: '5'},\r\n            { value: '10', label: '10' },\r\n            { value: '20', label: '20' },\r\n            { value: '50', label: '50' },\r\n        ];\r\n\r\n        const current = this.props.page;\r\n        const { selectedOption } = this.state;\r\n        const numrows = this.props.pagesCount;\r\n        const pageNumbers = [];\r\n        if (numrows < 10)\r\n            for (let i = 1; i <= numrows; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}> <a class=\"page-link\" href=\"#\"\r\n                    onClick={() => this.onPageClicked(i - 1)}>{i}</a></li >);\r\n            }\r\n        else {\r\n            for (let i = 1; i <= 4; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}><a class=\"page-link\" href=\"#\"\r\n                    onClick={() => this.onPageClicked(i - 1)}>{i}</a></li>);\r\n            }\r\n            if(current + 1 > 4 && current + 1 < numrows-3 )\r\n                pageNumbers.push(<li key={current + 1} class=\"page-item active\" ><a class=\"page-link\" href=\"#\"\r\n                    onClick={() => this.onPageClicked(current + 1)}>{current + 1}</a></li>)\r\n                \r\n            for (let i = numrows - 3; i <= numrows; i++) {\r\n                pageNumbers.push(<li key={i} class={current + 1 == i ? \"page-item active\" : \"page-item\"}><a class=\"page-link\" href=\"#\"\r\n                    onClick={() => this.onPageClicked(i - 1)}>{i}</a></li>);\r\n            }\r\n        }\r\n      \r\n        let begining = this.props.page * this.props.itemsPerPage;\r\n        let ending = Number(this.props.page+1) * Number(this.props.itemsPerPage);       \r\n        begining = this.props.itemsCount >= begining + 1 ? begining += 1 : 0;\r\n        ending = this.props.itemsCount < ending ? ending = this.props.itemsCount : ending;\r\n\r\n        return (            \r\n            <div className=\" d-inline-flex justify-content-end flex-grow-1\">\r\n                <label className=\"pager-label\">showing&nbsp;{begining}-{ending}&nbsp; of &nbsp; {this.props.itemsCount}</label>               \r\n                <Select\r\n                    className=\"select\"\r\n                    value={selectedOption}\r\n                    onChange={(value, selectedOption) => this.onCountChange(value, selectedOption)}\r\n                    options={options}\r\n                    placeholder={\"showing...\"}\r\n                />\r\n                    <nav aria-label=\"Page navigation example\" >               \r\n                    <ul class=\"pagination\">\r\n                            <li class=\"page-item\"><a class=\"page-link\" aria-label=\"Previous\" href=\"#\" onClick={() => this.onPageClicked(this.props.page - 1)} >\r\n                                <span aria-hidden=\"true\">&laquo;</span>\r\n                                <span class=\"sr-only\">Previous</span>\r\n                                </a></li>\r\n                            <ul class=\"pagination\">\r\n                            {\r\n                                pageNumbers\r\n                            }\r\n                            </ul>\r\n                            <li class=\"page-item\"><a class=\"page-link\" aria-label=\"Next\" href=\"#\" onClick={() => this.onPageClicked(this.props.page + 1)}>\r\n                                <span aria-hidden=\"true\">&raquo;</span>\r\n                                <span class=\"sr-only\">Next</span>\r\n                                </a></li>\r\n                    </ul>\r\n                    </nav>                 \r\n            </div>               \r\n            )\r\n    }\r\n}\r\n\r\nexport default PaginationComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserFilter.jsx",["381","382","383","384","385","386"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass UserFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all:props.all,\r\n            firstNames: props.firstNames || [],\r\n            firstName: props.firstName,\r\n            lastNames: props.lastNames || [],\r\n            lastName: props.lastName,\r\n            userNames: props.userNames || [],\r\n            userName: props.userName,\r\n            emails: props.emails || [],\r\n            email: props.email,\r\n            cityId: props.cityId,\r\n            cities: props.cities,\r\n            filteredcities: props.countryId ? this.filter([], props.cities, props.countryId) : props.cities,\r\n            countryId: props.countryId,\r\n            countries: props.countries,\r\n            prefix: props.prefix,\r\n            userRole: props.userRole,\r\n            lastActiveBefore: props.lastActiveBefore\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n    }\r\n\r\n    resetForm() {\r\n       this.props.onNewSearch ? \r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (!value || value == 'undefined') subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n                if (names[i].filterBy == value || names[i].value == '') {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n   \r\n    render() {  \r\n\r\n        let { all, firstNames, firstName, lastNames, lastName, userNames, userName, emails,\r\n            email, countryId, filteredcities, cityId, lastActiveBefore } = this.state\r\n        return (                        \r\n               \r\n            <Formik\r\n                initialValues={{\r\n                    all, firstNames, firstName, lastNames, lastName, userNames,\r\n                    userName, emails, email, countryId, filteredcities, cityId, lastActiveBefore\r\n                }}\r\n                        onSubmit={this.onSubmit}                       \r\n                        enableReinitialize={true}\r\n                >\r\n                {({ props, setFieldValue, values}) => (\r\n                    <Form className=\"filter-form\">\r\n                            <fieldset >\r\n                                 <div className=\"inline\">\r\n                                 <label>first name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                        items={firstNames}\r\n                                        value={values.firstName}\r\n                                        onChange={(selected) => setFieldValue(\"firstName\", selected.value)}\r\n                                />\r\n                            </div>  \r\n                            <div className=\"inline\">\r\n                                 <label >last name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                        items={lastNames}\r\n                                        value={values.lastName}\r\n                                        onChange={(selected) => setFieldValue(\"lastName\", selected.value)}\r\n                                />\r\n                            </div>\r\n                                <div className=\"inline\">\r\n                                <label>user name&nbsp;</label>\r\n                                <CustomSelect  \r\n                                    className={\"inline inline-2-5\"}\r\n                                       name=\"userNames\"\r\n                                       items={userNames}\r\n                                       value={values.userName}\r\n                                       onChange={(selected) => setFieldValue(\"userName\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >email&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                      items={emails}\r\n                                      value={values.email}\r\n                                      onChange={(selected) =>setFieldValue(\"email\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            {this.state.userRole == 'ROLE_Admin' &&\r\n                                <>\r\n                                <div className=\"inline\">\r\n                                <label >country&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                    items={this.state.countries}\r\n                                    value={values.countryId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"countryId\", selected.value);\r\n                                        let subs = this.filter([], this.state.cities, selected.value);\r\n                                        setFieldValue(\"filteredcities\", subs);\r\n                                    }}/>\r\n                                </div>\r\n                            <div className=\"inline\">\r\n                                <label >city&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                    items={values.filteredcities}\r\n                                    value={values.cityId}\r\n                                    onChange={(selected) => setFieldValue(\"cityId\", selected.value)}\r\n                                />\r\n                                </div>\r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">last active&nbsp;</label>\r\n                                    <label className=\"pl-1 mb-1 fw-s\">before&nbsp;</label>\r\n                                    <DatePicker className=\"form-control in-inline inline-2 foo p-1 pl-2\"\r\n                                        dateFormat=\"MMMM dd yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        // minDate={values.dateCreatedAfter}\r\n                                        selected={values.lastActiveBefore && new Date(values.lastActiveBefore)}\r\n                                        isClearable\r\n                                        maxDate={new Date()}\r\n                                        onChange={date => setFieldValue(\"lastActiveBefore\", Functions.convertDate(date))}\r\n                                        highlightDates={new Date()}\r\n                                        shouldCloseOnSelect={true}\r\n                                        showYearDropdown\r\n                                        dropdownMode=\"select\" />\r\n                                </div>\r\n                                </>\r\n                            }\r\n                            <div className=\"inline\">                                 \r\n                               <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                            </fieldset>\r\n                         </Form>\r\n                       )}\r\n                 </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CustomSelect.jsx",["387","388"],"import React from 'react'\r\nimport Select from 'react-select'\r\nimport './Filter.css'\r\n\r\nexport default ({ onChange, items, value, className, defaultMenuIsOpen, disabled , name }) => {\r\n\r\n    const options = []\r\n\r\n    const getOptions = (items) => {\r\n        if (items == null) return;\r\n        if (options.length < 1) {          \r\n            for (let i = 0; i < items.length; i++) {\r\n                options.push(\r\n                    { value: `${items[i].value || items[i].id}`, label: `${items[i].name || (items[i][name] && items[i][name].name) || '...'}` })\r\n            }\r\n           \r\n        }\r\n        return options\r\n    }\r\n    \r\n    const defaultValue = (options, value) => {      \r\n        return options ? options.find(option => option.value == value) : \"\"\r\n    }\r\n\r\n    return (       \r\n                <Select\r\n            className={className}\r\n            options={getOptions(items)}\r\n            value={defaultValue(options, value) || 'undefined'}\r\n            onChange={value => onChange(value)}\r\n            placeholder={\"...\"}\r\n            autosize={true}\r\n            clearable={true}\r\n            isSearchable={true}\r\n            defaultMenuIsOpen={defaultMenuIsOpen}\r\n            isDisabled={disabled}\r\n                />       \r\n        )\r\n}","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\footer.jsx",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\SupplierDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\SupplierFilter.jsx",["389","390"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nclass SupplierFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            name: props.name,\r\n            names: props.names,\r\n            phoneNumber: props.phoneNumber,\r\n            phoneNumbers: props.phoneNumbers,\r\n            ddcnumber: props.ddcnumber,\r\n            ddcnumbers: props.ddcnumbers,\r\n            emails: props.emails,\r\n            email: props.email,\r\n            prefix: props.prefix\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n      }\r\n\r\n    resetForm() {\r\n        this.props.onNewSearch ?\r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;\r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, name, names, phoneNumber, phoneNumbers, ddcnumber, ddcnumbers, email, emails } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ all, name, names, phoneNumber, phoneNumbers, ddcnumber, ddcnumbers, email, emails }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue , values}) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>name&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={names}\r\n                                    value={values.name}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >phone number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2\"}\r\n                                    items={phoneNumbers}\r\n                                    value={values.phoneNumber}\r\n                                    onChange={(selected) => setFieldValue(\"phoneNumber\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>DDC number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2\"}\r\n                                    name=\"ddcnumber\"\r\n                                    items={ddcnumbers}\r\n                                    value={values.ddcnumber+''}\r\n                                    onChange={(selected) => setFieldValue(\"ddcnumber\", selected.value+'')}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >email&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3\"}\r\n                                    items={emails}\r\n                                    value={values.email}\r\n                                    onChange={(selected) => setFieldValue(\"email\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SupplierFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductFilter.jsx",["391","392","393","394","395","396","397","398"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nclass ProductFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            name: props.name,\r\n            names: props.names ||[],\r\n            productType: props.productType,\r\n            productTypes: props.productTypes||[],\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n            totalCountMoreThan: props.totalCountMoreThan,\r\n            totalCountLessThan: props.totalCountLessThan,\r\n            prefix: props.prefix,\r\n            maxmore: 100,\r\n            minless:0,\r\n            mintotal: 0,\r\n            userCategories: props.userCategories || [],\r\n            filteredUserCategories: this.filter([], props.userCategories, props.productType),\r\n            userCategoryId: props.userCategoryId\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n                if (names[i].filterBy == value || !names[i].value || names[i].value == 'undefined') {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n     }\r\n\r\n    resetForm() {\r\n        this.props.onNewSearch ?\r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;      \r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, name, names, productType, productTypes, amortizationPercentMoreThan, amortizationPercentLessThan,\r\n            totalCountMoreThan, totalCountLessThan, maxmore, minless, mintotal, userCategories, userCategoryId, filteredUserCategories} = this.state\r\n\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    all, name, names, productType, productTypes, amortizationPercentMoreThan,\r\n                    amortizationPercentLessThan, totalCountMoreThan, totalCountLessThan, maxmore, minless, mintotal, userCategories, userCategoryId, filteredUserCategories\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values}) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>name&nbsp;</label>\r\n                                <CustomSelect                                    \r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={names}\r\n                                    value={name}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            {\r\n                                <div className=\"inline\" >\r\n                                    <label className=\"mb-1\">total&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min=\"0\" max={values.totalCountLessThan || \"\"}\r\n                                        name=\"totalCountMoreThan\" />\r\n                                    <label className=\"pl-1 mb-1 fw-s\">less than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min={values.totalCountMoreThan || 0}\r\n                                        name=\"totalCountLessThan\" />\r\n                                    </div>\r\n                                </div>\r\n                            }                            \r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                { productTypes && productTypes.map((type) =>\r\n                                        <div className=\"inline\">                                        \r\n                                            <Field \r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                    console.log('value of checked = ' + value.target.value);\r\n                                                    setFieldValue(\"productType\", value.target.value == values.productType ? null : value.target.value);\r\n                                                    let subs = values.filteredUserCategories;\r\n                                                    subs = this.filter([], values.userCategories, value.target.value)\r\n                                                    setFieldValue(\"filteredUserCategories\", subs);\r\n                                                }} \r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                   )}\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={values.filteredUserCategories}\r\n                                    value={values.userCategoryId}\r\n                                    onChange={(selected) => setFieldValue(\"userCategoryId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-50px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                        name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                        value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan} />&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-50px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                        name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                        value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan}/>&nbsp;%\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"reset\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\DeliveryFilter.jsx",["399"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\nimport DatePicker from \"react-datepicker\";\r\nimport Functions from './Functions';\r\n\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass DeliveryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            number: props.number,\r\n            numbers: props.numbers,\r\n            supplierId: props.supplierId,\r\n            suppliers: props.suppliers,\r\n            productId: props.productId,\r\n            products: props.products,\r\n            dateCreatedBefore: props.dateCreatedBefore,\r\n            dateCreatedAfter: props.dateCreatedAfter,\r\n            totalBillMoreThan: props.totalBillMoreThan,\r\n            totalBillLessThan: props.totalBillLessThan,\r\n            prefix: props.prefix,\r\n            maxmore: 100,\r\n            minless: 0,\r\n            mintotal: 0,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)     \r\n    }\r\n\r\n    resetForm() {\r\n      \r\n        let index = window.location.search.indexOf(\"DeliveryDetailView\");\r\n        if (index < 0)\r\n            this.props.onNewSearch('');\r\n        else\r\n            this.props.onNewSearch('?deliveryView=DeliveryDetailView');\r\n      \r\n    }\r\n\r\n    render() {\r\n\r\n        let { all, number, numbers, supplierId, suppliers,productId, products, dateCreatedBefore, dateCreatedAfter,\r\n            totalBillMoreThan, totalBillLessThan, maxmore, minless, mintotal } = this.state\r\n\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    all, number, numbers, supplierId, suppliers, productId, products, dateCreatedBefore, dateCreatedAfter,\r\n                    totalBillMoreThan, totalBillLessThan, maxmore, minless, mintotal\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                           \r\n                            <div className=\"inline\">\r\n                                <label>number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-1-5\"}\r\n                                    items={numbers}\r\n                                    value={values.number}\r\n                                    onChange={(selected) => setFieldValue(\"number\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>supplier&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={suppliers}\r\n                                    value={values.supplierId}\r\n                                    onChange={(selected) => setFieldValue(\"supplierId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">date&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                <label className=\"mb-1 fw-s\">after&nbsp;</label>\r\n                                <div className=\"inline \">\r\n                                <DatePicker className=\"form-control in-inline inline-2\"\r\n                                    dateFormat=\"dd MMMM yyyy\"\r\n                                    locale=\"en-GB\"\r\n                                    maxDate={values.dateCreatedBefore || new Date()}\r\n                                            selected={values.dateCreatedAfter && new Date(values.dateCreatedAfter)}\r\n                                            onChange={date => setFieldValue(\"dateCreatedAfter\", date)}\r\n                                            shouldCloseOnSelect={true}\r\n                                            showYearDropdown\r\n                                            dropdownMode=\"select\"\r\n                                            isClearable/>\r\n                                    </div>\r\n                                <label className=\"pl-1 mb-1 fw-s\">before&nbsp;</label>\r\n                                <DatePicker className=\"form-control in-inline inline-2\"\r\n                                    dateFormat=\"MMMM dd yyyy\"\r\n                                    locale=\"en-GB\"\r\n                                        minDate={values.dateCreatedAfter}\r\n                                        maxDate={values.dateCreatedBefore||new Date()}\r\n                                    selected={values.dateCreatedBefore && new Date(values.dateCreatedBefore)}\r\n                                        onChange={date => setFieldValue(\"dateCreatedBefore\", date)}\r\n                                        shouldCloseOnSelect={true}\r\n                                        showYearDropdown\r\n                                        dropdownMode=\"select\"\r\n                                        isClearable\r\n                                        highlightDates={new Date()} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>product&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={products}\r\n                                    value={values.productId}\r\n                                    onChange={(selected) => setFieldValue(\"productId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                                <div className=\"inline\">\r\n                                <label className=\"mb-1\">total bill&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min=\"0\" max={values.totalBillLessThan || \"\"}\r\n                                        name=\"totalBillMoreThan\" />\r\n                                    <label className=\"pl-1 mb-1 fw-s\">less than&nbsp;</label>\r\n                                    <Field className=\"form-control in-inline inline-100px\" type=\"number\" min={values.totalBillMoreThan || 0}\r\n                                        name=\"totalBillLessThan\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"reset\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                            {this.props.ids && <div className=\"\">\r\n                                <h5 className=\"mt-2 ml-2 font-bold\" ><b><u>{window.location.search.indexOf(\"Filter.empty=true\") > -1 ? \"empty Deliveries\"\r\n                                    : window.location.search.indexOf(\"Filter.discarded=true\") > -1 ? \"Deliveries with all discared inventories\" : \"\"}</u></b></h5>\r\n                            </div>}\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeliveryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\ProductDetailDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\SupplierComponent.jsx",["400"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport SupplierDataService from '../service/SupplierDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect'\r\nimport Function from './Shared/Function';\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\n\r\nclass SupplierComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            phoneNumber: '',\r\n            ddcnumber: '',\r\n            email: '',          \r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.id)\r\n        if (this.state.id === -1) {\r\n            return\r\n        }\r\n        SupplierDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    name: response.data.name||'',\r\n                    phoneNumber: response.data.phoneNumber||'',\r\n                    ddcnumber: response.data.ddcnumber||'',\r\n                    email: response.data.email,\r\n                })\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {      \r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            phoneNumber: this.getTrimmedNumber(values.phoneNumber),\r\n            ddcnumber: values.ddcnumber,\r\n            email: values.email,\r\n            targetDate: values.targetDate\r\n        }\r\n       SupplierDataService.save(item)\r\n            .then(() => this.props.history.push('/suppliers'))\r\n            .catch(error => {              \r\n                let msg = Function.getErrorMsg(error);                  \r\n               if (msg.indexOf(\"phone\") > -1)\r\n                    actions.setErrors({ phoneNumber: msg }) \r\n                if (msg.indexOf(\"name\") > -1)\r\n                    actions.setErrors({ name: msg }) \r\n                if (msg.indexOf(\"DDC number\") > -1)\r\n                    actions.setErrors({ ddcnumber: msg }) \r\n                if (msg.indexOf(\"email\") > -1)\r\n                    actions.setErrors({ email: msg }) \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            } )\r\n    }\r\n\r\n    getTrimmedNumber(value) {\r\n        if (value == null || value.length < 1) return;\r\n       value = value.trim();\r\n        value = value.replace(/ +/g, \" \");\r\n        return value;\r\n    }\r\n\r\n    validate(values) {\r\n\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.userName = 'Enter atleast 5 Characters'\r\n        } else if (values.name.length >50) {\r\n            errors.userName = 'too Long Max is 50 charachters'\r\n        }\r\n        if (!values.ddcnumber) {\r\n            errors.ddcnumber = 'required field !!!'\r\n        } else if (values.ddcnumber.length < 4) {\r\n            errors.ddcnumber = 'too short, enter at least 4 charachters !!!'\r\n        } else if (values.ddcnumber.length > 15) {\r\n            errors.ddcnumber = 'Enter max 15 Characters'\r\n        }       \r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        let { id, name, phoneNumber, ddcnumber, email } = this.state\r\n        return (\r\n            <div className=\"container pt-5\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Supplier</h3> : <h3 className=\"mb-3\"> Add New Supplier </h3>}\r\n                <Formik\r\n                    initialValues={{ id, name, phoneNumber, ddcnumber, email }}\r\n                    onSubmit={(values, actions)=>this.onSubmit(values, actions)}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {({ setFieldValue, values, dirty }) => (\r\n                            <Form>\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <Field className=\"form-control \" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group w-50\">\r\n                                    <label className=\"required-field\">name</label>\r\n                                    <Field className=\"form-control \" type=\"text\" name=\"name\" />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning \" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group inline-3\">\r\n                                    <label>phone number</label>\r\n                                <PhoneInput\r\n                                        country={'bg'}\r\n                                        value={values.phoneNumber}\r\n                                        onChange={(value, country, e, phone) => {                                            \r\n                                            setFieldValue(\"phoneNumber\", phone)\r\n                                        }}\r\n                                />\r\n                                <ErrorMessage name=\"phoneNumber\" component=\"div\"\r\n                                    className=\"alert alert-warning \" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group inline-3\">\r\n                                    <label className=\"required-field\">DDC number</label>\r\n                                    <Field className=\"form-control \" maxlength=\"14\" type=\"text\" name=\"ddcnumber\" />\r\n                                    <ErrorMessage name=\"ddcnumber\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group w-50\">\r\n                                    <label>email</label>\r\n                                    <Field className=\"form-control \" type=\"email\" name=\"email\" />\r\n                                    <ErrorMessage name=\"email\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group mt-5\">  \r\n                                <button className=\"btn btn-mybtn p-x-5\" type=\"submit\" disabled={!dirty}>Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                            </Form>\r\n                        )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SupplierComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductComponent.jsx",["401","402","403","404","405"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass ProductComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            name: '',\r\n            description: '',\r\n            productType: '',\r\n            productTypes: [],           \r\n            userCategoryId: '',          \r\n            userCategories: [],\r\n            filteredUserCategories:[],\r\n            amortizationPercent: '',\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {       \r\n        ProductDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                if (this.state.id > 0) {\r\n                    this.setState({\r\n                        name: response.data.name||'',\r\n                        description: response.data.description||'',\r\n                        productType: response.data.productType||'',\r\n                        userCategoryId: response.data.userCategoryId||'',//response.data.productType == 'DMA' ? response.data.subCategory : '',\r\n                        amortizationPercent: response.data.amortizationPercent||''\r\n                    })\r\n                }\r\n                this.setState({\r\n                    productTypes: response.data.productTypes||[],\r\n                    userCategories: response.data.userCategories||[],\r\n                    filteredUserCategories: response.data.userCategories||[],\r\n                });\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n        let item = {\r\n            id: this.state.id,\r\n            name: values.name,\r\n            description: values.description,\r\n            userCategoryId: /*values.productType == 'DMA' ?*/ values.userCategoryId,//: null,\r\n            targetDate: values.targetDate\r\n        }\r\n        ProductDataService.save(item)\r\n            .then(() => this.props.history.push('/products'))\r\n            .catch(error =>{              \r\n                let msg = Function.getErrorMsg(error);\r\n                actions.setErrors({ phoneNumber: msg })\r\n                if (msg.indexOf(\"name\") > -1)\r\n                    actions.setErrors({ name: msg }) \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.name) {\r\n            errors.name = 'required field !!!'\r\n        } else if (values.name.length < 5) {\r\n            errors.name = 'Enter atleast 5 Characters'\r\n        }\r\n        if (!values.userCategoryId) {\r\n            errors.userCategoryId = 'required field !!!'\r\n        }                      \r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        window.history.back();\r\n    }\r\n\r\n    render() {\r\n        const precent = \"%\";\r\n        let { id, name, description,  userCategoryId} = this.state\r\n        return (\r\n            <div className=\"container pt-5\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Product</h3> : <h3 className=\"mb-3\"> Add New Product </h3>}\r\n                <Formik\r\n                    initialValues={{ id, name, description, userCategoryId}}\r\n                    onSubmit={(values, actions) => this.onSubmit(values, actions)}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {({ setFieldValue, values, dirty}) => (\r\n                            <Form>\r\n                                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label className=\"required-field\">name</label>\r\n                                    <Field className=\"form-control w-50\" type=\"text\" name=\"name\"\r\n                                   />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"\r\n                                        className=\"alert alert-warning  w-25\" />\r\n                                </fieldset>\r\n                                \r\n                                <fieldset className=\"form-group\">\r\n                                    <label>product type</label>\r\n                                    {this.state.productTypes.map((type) =>\r\n                                            <label className=\"mx-3\">\r\n                                                <Field\r\n                                                    className=\"mx-1\"\r\n                                                    type=\"radio\" name=\"productType\" value={type.value}\r\n                                                    checked={this.state.productType == type.value}\r\n                                                    onChange={(value) => {                                                        \r\n                                                        this.setState({ productType: value.target.value });                                                       \r\n                                                        let subs = [];\r\n                                                        for (let i = 0; i < this.state.userCategories.length; i++) {\r\n                                                            if (this.state.userCategories[i].category.productType == value.target.value) {\r\n                                                                subs.push(this.state.userCategories[i])\r\n                                                            }\r\n                                                        }\r\n                                                        this.setState({ filteredUserCategories: subs })\r\n                                                    }}/>\r\n                                                {type.name}\r\n                                    </label>)}                                   \r\n                                    <ErrorMessage name=\"productType\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>                                        \r\n                                        <fieldset className=\"form-group\">\r\n                                        <label className=\"required-field\">category</label>\r\n                                        <CustomSelect\r\n                                                    name=\"category\"\r\n                                                    className={\"w-50\"}\r\n                                                    items={this.state.filteredUserCategories}\r\n                                                    value={values.userCategoryId}\r\n                                                    onChange={(value) => {\r\n                                                        let sub = this.state.filteredUserCategories.find(s => s.id == value.value);\r\n                                                        setFieldValue(\"userCategoryId\", value.value);\r\n                                                        console.log(\"sub = \" + JSON.stringify(sub));\r\n                                                        this.setState({\r\n                                                            amortizationPercent: sub.amortizationPercent,                                                           \r\n                                                        })\r\n                                                       if (this.state.productType == '')\r\n                                                            this.setState({                                                              \r\n                                                                productType: sub.category.productType\r\n                                                            })\r\n                                                    }}\r\n                                        />\r\n                                        <ErrorMessage name=\"userCategoryId\" component=\"div\"\r\n                                            className=\"alert alert-warning w-50\" />\r\n                                            </fieldset>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>amortization percent</label><br/>\r\n                                <Field className=\"form-control ws inline pt-2 pb-2\"\r\n                                    readOnly type=\"number\" value={this.state.amortizationPercent} />&nbsp;%                                            \r\n                                            </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>description</label>\r\n                                    <Field className=\"form-control w-50\" as=\"textarea\" type=\"textarea\" name=\"description\" />\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group mt-5\">    \r\n                                <button className=\"btn btn-mybtn p-x-5\" disabled={!dirty} type=\"submit\">Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                </fieldset>\r\n                            </Form>\r\n                        )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductsComponent.jsx",["406","407","408","409","410","411","412"],"import React, { Component } from 'react';\r\nimport ProductDataService from '../service/ProductDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport ProductFilter from './Filters/ProductFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Link, Route} from 'react-router-dom';\r\nimport Function from './Shared/Function';\r\n\r\nconst headers = [\r\n    { label: \"Name\", key: \"name\" },\r\n    { label: \"product Type\", key: \"productType\" },\r\n    { label: \"amortization Percent\", key: \"amortizationPercent\" },\r\n    { label: \"sub-Category\", key: \"subCategory\" }\r\n];\r\n\r\nclass ListProductsComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: {},\r\n            filterKey: 0,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            showdts: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n        this.searchLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n                if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                    newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                    newSearch += 'Filter.filtersSet=true'\r\n                }\r\n            this.refresh(newSearch);\r\n        }\r\n    }\r\n\r\n    refresh(newSearch) {\r\n        if (!newSearch) newSearch = this.state.search;\r\n       ProductDataService.retrieveAll(newSearch)\r\n            .then(response => {              \r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: this.getfilter(response.data.filter),\r\n                        filterKey: this.state.filterKey + 1\r\n                    });\r\n                }\r\n        ).catch((error) => {\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg, 5)\r\n        })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.names = filter.names;\r\n            newfilter.productTypes = filter.productTypes;\r\n            newfilter.userCategories = filter.userCategories;           \r\n            return newfilter\r\n        }\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time || 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        ProductDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        ProductDataService.delete(id)\r\n            .then(() => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n             }).catch(error => {           \r\n                let msg = Function.getErrorMsg(error);           \r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n        })\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/products/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/products/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }  \r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {\r\n        this.updateLink(newSearch);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>               \r\n                {this.state.filter && <ProductFilter {...this.state.filter}\r\n                    key={this.state.filterKey}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 pb-3\">\r\n                            <strong> Products</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"products-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}>Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"products-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}\r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormas: null })}></i></div>}                       \r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n                        <table className=\"table border-bottom my-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\" className=\"ws\">product Type</th>\r\n                                    <th scope=\"col\">category</th>                                  \r\n                                    <th scope=\"col\" className=\"ws\">amortization</th>\r\n                                    <th scope=\"col\" className=\"ws\">total</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.items.map(\r\n                                        (item, i) =>\r\n                                           <>\r\n                                                <tr scope=\"row\" key={item.id}>\r\n                                                    <td className=\"hoverable\"\r\n                                                        onClick={() => {\r\n                                                            let showdts = this.state.showdts;\r\n                                                            if (showdts == undefined) showdts = [];\r\n                                                            showdts[i] = showdts[i] ? false : true;\r\n                                                            this.setState({ showdts: showdts })\r\n                                                        }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                            aria-hidden=\"true\"></i></td>\r\n                                                <td className=\"hoverable\"\r\n                                                    onClick={() => {\r\n                                                        this.props.history.push(`/productdetails?Filter.productId=${item.id}`)\r\n                                                    }}>{item.name}</td>\r\n                                                <td>{item.userCategory.category.productType}</td>\r\n                                                <td>{ item.userCategory.category.name }</td>\r\n\r\n                                                <td>{item.userCategory.category.productType =='LTA'? item.userCategory.amortizationPercent + '%' : '-' }</td>\r\n                                                <td>{item.total ? item.total : '0'}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                                </tr>\r\n                                                {this.state.showdts && this.state.showdts[i] &&\r\n                                                    <tr >\r\n                                                        <td></td>\r\n                                                    <td colSpan=\"1\">description :&nbsp;</td>\r\n                                                    <td colSpan=\"4\" className=\"pt-3 pb-3 bold-border-bottom\">\r\n                                                        {item.description}\r\n                                                    </td>\r\n                                                    <td></td>\r\n                                                    </tr>}       \r\n                                                </>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListProductsComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUsersComponent.jsx",["413","414","415","416","417","418"],"import React, { Component } from 'react';\r\nimport UserDataService from '../service/UserDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserFilter from './Filters/UserFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport Function from './Shared/Function';\r\nimport { Link, Route } from 'react-router-dom'\r\n\r\nimport AuthenticationService from '../service/AuthenticationService'\r\n\r\nconst headers = [\r\n    { label: \"First Name\", key: \"firstName\" },\r\n    { label: \"Last Name\", key: \"lastName\" },\r\n    { label: \"User Name\", key: \"userName\" },\r\n    { label: \"Email\", key: \"email\" }\r\n];\r\n\r\nclass ListUsersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: {},\r\n            filterKey: 0,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();   \r\n        this.searchLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n                if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                    newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                    newSearch += 'Filter.filtersSet=true'\r\n                }\r\n            this.refresh(newSearch);\r\n        }\r\n    }\r\n\r\n    refresh(newSearch) {\r\n        if (!newSearch) newSearch = this.state.search;\r\n        UserDataService.retrieveAll(newSearch)\r\n            .then(\r\n            response => {\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: this.getfilter(response.data.filter), \r\n                        filterKey: this.state.filterKey + 1\r\n                    });\r\n            }\r\n        ).catch((error) => {\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg, 5);           \r\n        })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.firstNames = filter.firstNames;\r\n            newfilter.lastNames = filter.lastNames;\r\n            newfilter.userNames = filter.userNames;\r\n            newfilter.emails = filter.emails;\r\n            newfilter.cities = filter.cities;\r\n            newfilter.countries = filter.countries;          \r\n            return newfilter\r\n        }\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        UserDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items }); \r\n                this.csvLink.current.link.click()\r\n        })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        UserDataService.delete(id)\r\n            .then(() => {\r\n                this.setState({ message: `Delete successful` })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.setState({\r\n                    errormsg: msg\r\n                })\r\n            })\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/users/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/users/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null})\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {       \r\n       this.updateLink(newSearch);      \r\n    }\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {this.state.filter && <UserFilter {...this.state.filter}\r\n                    key={this.state.filterKey}\r\n                    userRole={userRole}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                            <h5 className=\"panel-title p-2 pb-3\">\r\n                                <strong> Users</strong>\r\n                            </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap \">\r\n                                <div >\r\n                                    <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"users-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\"); \r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"users-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                                </div>                              \r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}\r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}                              \r\n                            </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}<i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                            onClick={this.togglemsgbox}></i></div>}\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                      \r\n                    <table className= \"table border-bottom my-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>first name</th>\r\n                                <th>last name</th>\r\n                                <th>user name</th>\r\n                                    <th>email</th>\r\n                                    {console.log(\"userRole  = \" + (userRole))}\r\n                                    {console.log(\"userRole === 'ROLE_Admin'  = \"+(userRole === 'ROLE_Admin' ))}\r\n                                    {userRole === 'ROLE_Admin' && <th> city </th>}\r\n                                    {userRole === 'ROLE_Admin' && <th> last active </th>}\r\n\r\n                                    {userRole =='ROLE_Mol' && <th>profiles</th>}\r\n                                <th>Update &emsp;&nbsp; Delete</th>                                                                     \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                                {this.state.items.map(\r\n                                    item =>\r\n                                        <tr key={item.id}>\r\n                                            <td>{item.firstName}</td>\r\n                                            <td>{item.lastName}</td>\r\n                                            <td>{item.userName}</td>\r\n                                            <td>{item.email}</td>\r\n                                            {userRole === 'ROLE_Admin' && <td> {item.countryName}/{item.cityName} </td>}\r\n                                            {userRole === 'ROLE_Admin' && <td> {item.lastActive}</td>}\r\n                                            {userRole == 'ROLE_Mol' && <td className=\"hoverable\"\r\n                                                onClick={() => {\r\n                                                    this.props.history.push(`/userProfiles?Filter.userId=${item.id}`);\r\n                                                }}>&nbsp;>></td>}\r\n                                            {item.deleted && <td>\r\n                                                &nbsp;&nbsp;deleted&emsp;&nbsp;&nbsp;</td>}\r\n                                            {!item.deleted && <td>\r\n                                                <button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>}\r\n                                        </tr>\r\n                                )}\r\n                        </tbody>\r\n                            </table>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ListUsersComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListDeliveriesComponent.jsx",["419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449"],"import React, { Component } from 'react';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport DeliveryFilter from './Filters/DeliveryFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport InventoryNumberInnerComponent from './InventoryNumberInnerComponent';\r\nimport DeliveryInnerComponent from './DeliveryInnerComponent';\r\nimport DDInnerComponent from './DDInnerComponent';\r\nimport Function from './Shared/Function';\r\nimport { Link, Route} from 'react-router-dom'\r\n\r\nconst headers = [\r\n    { label: \"number\", key: \"number\" },\r\n    { label: \"date\", key: \"date\" },\r\n    { label: \"supplier\", key: \"supplierName\" },\r\n    { label: \"total bill\", key: \"total\" },  \r\n];\r\nconst headers2 = [\r\n    { label: \"delivery\", key: \"number\" },\r\n    { label: \"date\", key: \"date\" },\r\n    { label: \"supplier\", key: \"supplierName\" },    \r\n    { label: \"product\", key: \"productName\" },\r\n    { label: \"quantity\", key: \"quantity\" },\r\n    { label: \"unit price\", key: \"pricePerUnit\" },\r\n];\r\n\r\nclass ListDeliveriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],            \r\n            pager: null,\r\n            filter: {},\r\n            filterkey: 0,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            message: null,\r\n            ddmessage: [],\r\n            dderrormessage:[],\r\n            ddShow: [],\r\n            pdShow: [],\r\n            pdmessage: [],\r\n            pdUpdateShow: {\r\n                pd: {}, show: false\r\n            },\r\n            ddUpdateShow: {\r\n                dd: {}, show: false\r\n            },\r\n            \r\n            deliveryUpdateShow: {\r\n                delivery: {},show:false}\r\n           \r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)      \r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n        this.searchLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"version = \" + React.version);\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {       \r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n                if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                    newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                    newSearch += 'Filter.filtersSet=true'\r\n                }\r\n            if (newSearch.indexOf(\"deliveryView\") < 0 && this.state.deliveryView && this.state.deliveryView == 'DeliveryDetailView') {\r\n                let view = 'deliveryView=' + this.state.deliveryView;\r\n                newSearch += newSearch.length > 1 ? \"&\" + view : view;\r\n            }\r\n            this.refresh(newSearch);\r\n        }\r\n    }\r\n\r\n    refresh(newsearch) {\r\n        if (!newsearch) newsearch = this.state.search;\r\n        DeliveryDataService.retrieveAll(newsearch)\r\n            .then(\r\n            response => {   \r\n                this.setState({\r\n                    items: response.data.items || response.data.daoitems,\r\n                    pager: response.data.pager,\r\n                    filter: this.getfilter(response.data.filter), \r\n                    filterkey: this.state.filterkey+1,\r\n                   deliveryView: response.data.deliveryView || 'DeliveryView',                   \r\n               });\r\n           }).catch((error) => {\r\n               let msg = Function.getErrorMsg(error);\r\n               this.setState({ errormsg: msg })\r\n               this.showError('errormsg', 8);\r\n           })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.numbers = filter.numbers;\r\n            newfilter.products = filter.products;\r\n            newfilter.suppliers = filter.suppliers;\r\n            return newfilter//this.state.filter\r\n        }\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        DeliveryDataService.retrieveAll(newSearch)\r\n            .then(response => {               \r\n                let downloadData = [];\r\n                let data = response.data.items || response.data.daoitems;\r\n                data = data.map(row => ({\r\n                    ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                        month: \"numeric\",\r\n                        day: \"2-digit\",\r\n                        year: \"numeric\",\r\n                    }).format(new Date(row.date))\r\n                }));\r\n                if (this.state.deliveryView == 'DeliveryDetailView') {\r\n                    this.getDetailData(data, downloadData);                   \r\n                } else {\r\n                    downloadData = data\r\n                }\r\n                this.setState({\r\n                    alldata: downloadData\r\n                });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getDetailData = (data, arr) => {\r\n        data.map(i => {\r\n            i.deliveryDetails.map(x => {\r\n                arr.push({\r\n                    number: i.number,\r\n                    date: i.date,\r\n                    supplierName: i.supplierName,\r\n                    productName: x.productName,\r\n                    quantity: x.quantity,\r\n                    pricePerUnit: x.pricePerOne\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;       \r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n        }\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        newSearch += 'Pager.itemsPerPage=2147483647';       \r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id, x) {   \r\n        this.nullifyErrors();\r\n        DeliveryDataService.delete(id)\r\n            .then(\r\n            response => {\r\n                let show = this.state.pdShow;\r\n                if (this.state.items[x]) {\r\n                    show.splice(x, 1);                   \r\n                }\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                    pdShow: show,                    \r\n                })\r\n                    this.refresh()\r\n            }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error);           \r\n            this.setState({ errormsg: msg })\r\n            this.showError('errormsg', 8);\r\n        })\r\n    }\r\n\r\n   \r\n\r\n    showError(field, time) {        \r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {               \r\n                this.setState({\r\n                    [field]: null\r\n                })\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    \r\n    deleteChildClicked(id, x, y, parentid) {\r\n        this.nullifyErrors();\r\n        DeliveryDataService.deleteChild(id, parentid)\r\n            .then(\r\n            () => {                \r\n                let show = this.state.pdShow;\r\n                if (this.state.pdShow[x] == undefined) show[x] = [];\r\n\r\n                if (this.state.pdShow[x][y] == undefined) show[x][y] = {}\r\n                show[x].splice(y, 1);\r\n                let ddmessage = this.state.ddmessage;\r\n                ddmessage[x] = `Delete successful`;\r\n              \r\n                this.setState({\r\n                   pdShow: show,\r\n                   ddmessage: ddmessage,\r\n                })                \r\n               this.refresh()\r\n            }\r\n        ).catch(error => {           \r\n            let errormsg = Function.getErrorMsg(error);\r\n            let dderrormessage = this.state.dderrormessage;\r\n            dderrormessage[x] = errormsg;\r\n            this.setState({\r\n                dderrormessage: dderrormessage,\r\n            })\r\n        })\r\n    }\r\n    \r\n    deletePDChildClicked = (value, x, y, id) => {     \r\n        this.nullifyErrors();\r\n            ProductDetailDataService.delete(value)\r\n                .then(\r\n                    response => {                       \r\n                        ProductDetailDataService.retrieveAllNumbers(\"?deliveryDetailId=\" + id)\r\n                            .then(response => {\r\n                                let show = this.state.pdShow;\r\n                                show[x][y].data = response.data;\r\n\r\n                                let items = this.state.items;\r\n                                items[x].deliveryDetails[y].quantity = items[x].deliveryDetails[y].quantity - 1;\r\n                                items[x].total = items[x].total - items[x].deliveryDetails[y].pricePerOne;\r\n\r\n                                let pdmessages = this.state.pdmessage;                               \r\n                                if (pdmessages[x] == null) pdmessages[x] = [];\r\n                                pdmessages[x][y] = `Delete successful`;\r\n\r\n                                this.setState({\r\n                                    items: items,\r\n                                    pdShow: show,\r\n                                    pdmessage: pdmessages,                                    \r\n                                })\r\n                            })            \r\n            }).catch(error => {               \r\n                let errorpdmessages = this.state.errorpdmessage;\r\n                if (errorpdmessages == null) errorpdmessages = [];\r\n                if (errorpdmessages[x] == null) errorpdmessages[x] = [];\r\n                errorpdmessages[x][y] = Function.getErrorMsg(error);//`error ` + error;\r\n                this.setState({\r\n                    errorpdmessage: errorpdmessages,\r\n                })\r\n            }) \r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.state.deliveryView == 'DeliveryDetailView' ? \r\n            this.props.history.push(`/deliveries/${id}/DeliveryDetailView`) :\r\n            this.props.history.push(`/deliveries/${id}`)\r\n    }\r\n\r\n    updateClickedInner = (item, x) => {\r\n        this.nullifyErrors();\r\n        let show = this.state.deliveryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.delivery = JSON.parse(JSON.stringify(item))\r\n            show.x = x;            \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            deliveryUpdateShow: show,           \r\n        });    \r\n    }\r\n\r\n    updateChildClicked = (dd, x, y) => {\r\n        this.nullifyErrors();\r\n        let show = this.state.ddUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.dd = JSON.parse(JSON.stringify(dd))\r\n            show.x = x;\r\n            show.y = y;           \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            ddUpdateShow: show,          \r\n        });      \r\n    }\r\n   \r\n    updatePdChildClicked = (pd, x, y, i, ddid) => {\r\n        this.nullifyErrors();\r\n        let show = this.state.pdUpdateShow ;       \r\n        show.show = !show.show;\r\n        if (show.show == true) {          \r\n            show.pd = JSON.parse(JSON.stringify(pd))\r\n            show.x = x;\r\n            show.y = y;\r\n            show.i = i;\r\n            show.ddid = ddid;\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            pdUpdateShow: show,           \r\n        });      \r\n    }\r\n\r\n    nullifyErrors() {\r\n        this.setState({\r\n            pdmessage: [],\r\n            ddmessage: [],\r\n            dderrormessage: [],\r\n            message: null,\r\n        })\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/deliveries/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    setView(value) {       \r\n        let newPath = ``;\r\n        let search =  window.location.search;\r\n        if (search.length < 1) {\r\n            newPath =  `?deliveryView=${value.target.value}`;\r\n        }\r\n        else {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith('deliveryView'))\r\n                    continue\r\n                else\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n            newPath = '?' + newPath + 'deliveryView=' + value.target.value;\r\n        }      \r\n        this.updateLink(newPath)       \r\n    }\r\n    \r\n    getProductDetails( x, y, id) {      \r\n        if (this.state.pdShow[x] == undefined || this.state.pdShow[x][y] == undefined) {\r\n             let show = this.state.pdShow;\r\n            if (this.state.pdShow[x] == undefined) show[x] = [];\r\n\r\n            ProductDetailDataService.retrieveAllNumbers(\"?deliveryDetailId=\" + id )\r\n                .then(response => {\r\n                    console.log(\"pds = \" + JSON.stringify(response.data));\r\n                    show[x][y] = {}\r\n                    show[x][y].show = true;\r\n                    show[x][y].data = response.data;\r\n                this.setState({ pdShow: show });\r\n            })\r\n        }\r\n        else {\r\n            let show = this.state.pdShow;\r\n            show[x][y].show = !show[x][y].show;\r\n            this.setState({ pdShow: show })\r\n        }\r\n    }\r\n\r\n    showdd = (x) => {\r\n        let ddShow = this.state.ddShow;\r\n        ddShow[x] = !ddShow[x];\r\n        this.setState({ ddShow: ddShow })\r\n    }\r\n\r\n    getPageData = () => {\r\n        const data = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        }));\r\n        if (this.state.deliveryView == 'DeliveryView')\r\n            return data;\r\n        else {\r\n            let downloadData = [];\r\n            downloadData = this.getDetailData(data, downloadData);\r\n            return downloadData;\r\n        }\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {        \r\n        this.updateLink(newSearch);      \r\n    }\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        const data = this.state.items.map(row => ({\r\n            ...row, date: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.date))\r\n        })); \r\n        const data2 = [];\r\n        if (this.state.deliveryView !== 'DeliveryView') {\r\n           this.getDetailData(data, data2);}\r\n       \r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>               \r\n                {this.state.pdUpdateShow && this.state.pdUpdateShow.show == true &&\r\n                    <InventoryNumberInnerComponent\r\n                    pdUpdateShow={this.state.pdUpdateShow}\r\n                    pdShow={this.state.pdShow}\r\n                    pdmessage={this.state.pdmessage}\r\n                    updatePdChildClicked={() => this.updatePdChildClicked(null)}\r\n                    setpdShow={(value) => this.setState({ pdShow: value })}\r\n                    setpdMessage={(value) => this.setState({ pdmessage: value })}\r\n                    refresh={() => this.refresh()}\r\n                    />}\r\n                {this.state.deliveryUpdateShow && this.state.deliveryUpdateShow.show == true &&\r\n                    <DeliveryInnerComponent\r\n                    deliveryUpdateShow={this.state.deliveryUpdateShow}\r\n                    items={this.state.items}\r\n                    message={this.state.message}\r\n                    suppliers={this.state.filter.suppliers}\r\n                    updateClickedInner={() => this.updateClickedInner(null)}\r\n                    setItems={(value) => this.setState({ items: value })}\r\n                    setMessage={(value) => this.setState({ message: `update successful` })}\r\n                    />}\r\n                {this.state.ddUpdateShow && this.state.ddUpdateShow.show == true &&\r\n                    <DDInnerComponent\r\n                        ddUpdateShow={this.state.ddUpdateShow}\r\n                        items={this.state.items}\r\n                        ddmessage={this.state.ddmessage}\r\n                        products={this.state.filter.products}\r\n                        updateChildClicked={() => this.updateChildClicked(null)}\r\n                        setItems={(value) => this.setState({ items: value })}\r\n                        setddMessage={(value) => this.setState({ ddmessage: value})}\r\n                    />}               \r\n                {this.state.filter && <DeliveryFilter {...this.state.filter}\r\n                    search={this.state.deliveryView == 'DeliveryView' ? this.state.search : null}\r\n                    key={this.state.filterkey}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Deliveries</strong>\r\n                        </h5>\r\n                        <label className=\"mx-1 pull-right mr-5\">\r\n                            <input className=\"mx-1 m-2 mt-3 \" type=\"radio\" name=\"DeliveryView\" value=\"DeliveryDetailView\"\r\n                                checked={this.state.deliveryView == 'DeliveryDetailView'}\r\n                                onClick={\r\n                                    (value) => this.state.deliveryView != 'DeliveryDetailView' ?                              \r\n                                    this.setView(value) : {}} />Delivery&Details View\r\n                        </label>\r\n                        <label className=\"mx-1 pull-right mr-5\">\r\n                            <input className=\"mx-1 m-2 mt-3 \" type=\"radio\" name=\"DeliveryView\" value=\"DeliveryView\"\r\n                                checked={this.state.deliveryView == 'DeliveryView'}\r\n                                onClick={(value) => this.state.deliveryView == 'DeliveryDetailView' ? this.setView(value) : {}}\r\n                            />Delivery View\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={this.state.deliveryView == 'DeliveryView' ? data : data2}\r\n                                    headers={ this.state.deliveryView == 'DeliveryView' ? headers : headers2 } filename={\"deliveries-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {}}\r\n                                >Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"deliveries-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={this.state.deliveryView == 'DeliveryView' ? headers : headers2}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}\r\n                                search={this.state.deliveryView == 'DeliveryView' ? this.state.search : null}\r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>\r\n                            }\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                        {this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        } \r\n                        {this.state.deliveryView == 'DeliveryDetailView' &&                            \r\n                                    this.state.items.map(\r\n                                        (item, x) =>\r\n                                            <div className=\"panel-body\">\r\n                                                <table className=\"table  border table-s\">\r\n                                                    <tbody>\r\n                                                        <tr>\r\n                                                            <th className=\"wl pl-5\"\r\n                                                                onClick={() => {\r\n                                                                }}> Number : {item.number} </th>\r\n                                                            <th className=\"wl pl-3\"                                                               \r\n                                                            > Date : {\r\n                                                                new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                                    month: \"long\",\r\n                                                                    day: \"2-digit\",\r\n                                                                    year: \"numeric\",                                                                  \r\n                                                                }).format(new Date(item.date))\r\n                                                            }</th>\r\n                                                            <th className=\" wl hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    this.props.history.push(`/suppliers?Filter.name=${item.supplierName}`)\r\n                                                                }}> Supplier : {item.supplierName || '-'}</th>\r\n                                                            <th className=\"d-flex justify-content-end mr-1\">\r\n                                                                <button className=\"btn btn-mybtn mr-1\" onClick={() =>\r\n                                                                    this.updateClickedInner(item, x)}>Update</button>\r\n                                                                <button className=\"btn btn-mybtn btn-delete\" onClick={() =>\r\n                                                                    this.deleteClicked(item.id, x)}>Delete</button>\r\n                                                            </th>\r\n                                                         </tr>\r\n                                                         <tr>\r\n                                                            <td colspan=\"4\">\r\n                                                                {\r\n                                                                    <>\r\n                                                                    {this.state.ddmessage && this.state.ddmessage[x] &&\r\n                                                                        <div className=\"alert alert-success d-flex\">{this.state.ddmessage[x]}\r\n                                                                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => {\r\n                                                                                let ddmessages = this.state.ddmessage;\r\n                                                                                ddmessages[x] = null;\r\n                                                                                this.setState({ ddmessage: ddmessages })\r\n                                                                            }}></i>\r\n                                                                        </div>\r\n                                                                    }                                                                        \r\n                                                                    {this.state.dderrormessage && this.state.dderrormessage[x] &&\r\n                                                                        <div className=\"alert alert-warning d-flex\">{this.state.dderrormessage[x]}\r\n                                                                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => {\r\n                                                                                let dderrormessages = this.state.dderrormessage;\r\n                                                                                dderrormessages[x] = null;\r\n                                                                                this.setState({ dderrormessage: dderrormessages })\r\n                                                                            }}></i>\r\n                                                                        </div>\r\n                                                                    }\r\n                                                                        <table className=\"table border x-Table \">\r\n                                                                            <tbody>\r\n                                                                                <tr>\r\n                                                                                    <td>Product</td>\r\n                                                                                    <td>Quantity</td>\r\n                                                                                    <td>Unit Price</td>\r\n                                                                                    <td>Total</td>\r\n                                                                                <td style={{ width: '140px', padding: '.2rem .5rem' }}>\r\n                                                                                    <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                     onClick={() => this.updateChildClicked(null, x, null)}>add one</button>\r\n                                                                                </td>\r\n                                                                                </tr>\r\n                                                                                {item.deliveryDetails.map((dd, y) =>\r\n                                                                                <>\r\n                                                                                    <tr key={dd.id}>\r\n                                                                                        <td><p className=\"hoverable\"\r\n                                                                                            onClick={() => {\r\n                                                                                                this.props.history.push(`/products?Filter.name=${dd.productName}`)\r\n                                                                                            }}>{dd.productName}</p></td>\r\n                                                                                        <td className=\"hoverable\"\r\n                                                                                            onClick={() => {\r\n                                                                                                this.getProductDetails(x, y, dd.id)\r\n                                                                                            }}><p>{dd.quantity}</p></td>\r\n                                                                                        <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                                            style: \"currency\",\r\n                                                                                            currency: \"BGN\",\r\n                                                                                            maximumFractionDigits: 2\r\n                                                                                        }).format(dd.pricePerOne)}</td>\r\n                                                                                        <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                                            style: \"currency\",\r\n                                                                                            currency: \"BGN\",\r\n                                                                                            maximumFractionDigits: 2\r\n                                                                                        }).format(dd.pricePerOne * dd.quantity)}  </td>\r\n                                                                                        <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateChildClicked(dd, x, y)}>Update</button>\r\n                                                                                                <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteChildClicked(dd.id, x, y, item.id)}>\r\n                                                                                                    Delete</button></td>\r\n                                                                                    </tr>\r\n                                                                                    {this.state.pdShow[x] && this.state.pdShow[x][y] && this.state.pdShow[x][y].show &&\r\n                                                                                        <tr>\r\n                                                                                            <td colspan=\"5\">\r\n                                                                                                <>\r\n                                                                                                    {this.state.pdmessage[x] && this.state.pdmessage[x][y] &&\r\n                                                                                                        <div className=\"alert alert-success d-flex\">{this.state.pdmessage[x][y]}\r\n                                                                                                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                                                                                onClick={() => {\r\n                                                                                                                    let pdmessages = this.state.pdmessage;\r\n                                                                                                                    pdmessages[x][y] = null;\r\n                                                                                                                    this.setState({ pdmessage: pdmessages })\r\n                                                                                                                }}>\r\n                                                                                                            </i>\r\n                                                                                                        </div>\r\n                                                                                                    }\r\n                                                                                                    {this.state.errorpdmessage &&\r\n                                                                                                        this.state.errorpdmessage[x] && this.state.errorpdmessage[x][y] &&\r\n                                                                                                        <div className=\"alert alert-warning d-flex\">{this.state.errorpdmessage[x][y]}\r\n                                                                                                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                                                                                onClick={() => {\r\n                                                                                                                    let errorpdmessages = this.state.errorpdmessage;\r\n                                                                                                                    errorpdmessages[x][y] = null;\r\n                                                                                                                    this.setState({ errorpdmessage: errorpdmessages })\r\n                                                                                                                }}>\r\n                                                                                                            </i>\r\n                                                                                                        </div>\r\n                                                                                                }\r\n                                                                                                <table className=\"ml-5 mb-3\" style={{ width: '80%' }}>\r\n                                                                                                    <tr><td style={{ width: '10%' }}>number</td>\r\n                                                                                                        <td className=\"pl-5\">inventory number</td>\r\n                                                                                                        <td style={{ width: '140px', padding: '.2rem .5rem' }}>\r\n                                                                                                            <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                                                onClick={() => this.updatePdChildClicked(null, x, y, null, dd.id)}>add one</button>\r\n                                                                                                        </td></tr>\r\n                                                                                                    {this.state.pdShow[x][y].data.map((pd, i) =>\r\n                                                                                                        <tr>\r\n                                                                                                            <td >{i + 1}</td>\r\n                                                                                                            <td className=\"pl-5 pb-3 hoverable\"\r\n                                                                                                                onClick={() => {\r\n                                                                                                                    this.props.history.push(`/productDetails?Filter.id=${pd.value}`)\r\n                                                                                                                }}>\r\n                                                                                                                {pd.name}\r\n                                                                                                            </td>\r\n                                                                                                            <td><button className=\"btn btn-mybtn mr-1\" onClick={() => {\r\n                                                                                                                this.updatePdChildClicked(pd, x, y, i)\r\n                                                                                                            }}>Update</button>\r\n                                                                                                                <button className=\"btn btn-mybtn btn-delete\"\r\n                                                                                                                    onClick={() => this.deletePDChildClicked(pd.value, x, y, dd.id)}>\r\n                                                                                                                    Delete</button></td>\r\n                                                                                                        </tr>\r\n                                                                                                    )}\r\n                                                                                                </table>\r\n                                                                                                    </>\r\n                                                                                                </td>\r\n                                                                                            </tr>\r\n                                                                                        }\r\n                                                                                    </>\r\n                                                                                )}\r\n                                                                            </tbody>\r\n                                                                        </table>\r\n                                                                    </>\r\n                                                                }\r\n                                                        <span class=\"pull-right\" style={{ marginRight: '100px' }}><strong>Total Bill : {new Intl.NumberFormat(\"en-GB\", {\r\n                                                            style: \"currency\",\r\n                                                            currency: \"BGN\",\r\n                                                            maximumFractionDigits: 2\r\n                                                        }).format(item.total)} </strong> {}</span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                            )}\r\n                        {this.state.deliveryView == 'DeliveryView' &&\r\n                             <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">number</th>\r\n                                    <th scope=\"col\" >date</th>\r\n                                    <th scope=\"col\" >supplier</th>\r\n                                    <th >total</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr> \r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.items.map(\r\n                                        item =>\r\n                                            <tr>\r\n                                                <td>{item.number}</td>\r\n                                                <td>\r\n                                                    {new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                        month: \"long\",\r\n                                                        day: \"2-digit\",\r\n                                                        year: \"numeric\",\r\n                                                    }).format(new Date(item.date))}\r\n                                                </td>\r\n                                                <td >{item.supplierName || '-'}</td>\r\n                                                <td >{\r\n                                                    new Intl.NumberFormat(\"en-GB\", {\r\n                                                        style: \"currency\",\r\n                                                        currency: \"BGN\",\r\n                                                        maximumFractionDigits: 2\r\n                                                    }).format(item.total)}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>                                                \r\n                                    )}\r\n                            </tbody>                               \r\n                        </table>\r\n                       }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListDeliveriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListSuppliersComponent.jsx",["450","451","452","453","454"],"import React, { Component } from 'react';\r\nimport SupplierDataService from '../service/SupplierDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport SupplierFilter from './Filters/SupplierFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Link, Route} from 'react-router-dom';\r\nimport Function from './Shared/Function';\r\n\r\nconst headers = [\r\n    { label: \"Name\", key: \"name\" },\r\n    { label: \"Phone Number\", key: \"phoneNumber\" },\r\n    { label: \"DDC Number\", key: \"ddcnumber\" },\r\n    { label: \"Email\", key: \"email\" }\r\n];\r\n\r\nclass ListSuppliersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: {},\r\n            filterKey: 0,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n        this.searchLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n                if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                    newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                    newSearch += 'Filter.filtersSet=true'\r\n                }\r\n            this.refresh(newSearch);\r\n        }\r\n    }\r\n\r\n        refresh(newSearch) {\r\n            if (!newSearch) newSearch = this.state.search;\r\n        SupplierDataService.retrieveAll(newSearch)\r\n            .then(\r\n            response => {\r\n                this.setState({\r\n                    items: response.data.items,\r\n                    pager: response.data.pager,\r\n                    filter: this.getfilter(response.data.filter),\r\n                    filterKey: this.state.filterKey + 1\r\n                })\r\n            }).catch((error) => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5)       \r\n            })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.names = filter.names;\r\n            newfilter.phoneNumbers = filter.phoneNumbers;\r\n            newfilter.ddcnumbers = filter.ddcnumbers;\r\n            newfilter.emails = filter.emails;\r\n            return newfilter\r\n        }\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time || 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    } \r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n       SupplierDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n       SupplierDataService.delete(id)\r\n            .then(() => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n           }).catch(error => {\r\n               let msg = Function.getErrorMsg(error);\r\n               this.showError(msg, 5) \r\n           })\r\n    }\r\n\r\n    updateClicked(id) {\r\n        this.props.history.push(`/suppliers/${id}`)\r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/suppliers/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {\r\n        this.updateLink(newSearch);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {this.state.filter && <SupplierFilter {...this.state.filter}\r\n                    key={this.state.filterKey}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 pb-3\">\r\n                            <strong> Suppliers</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={this.addClicked}>Add New</button>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"suppliers-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {}}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"suppliers-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}                               \r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">phone number</th>\r\n                                    <th scope=\"col\">DDC number</th>\r\n                                    <th scope=\"col\">email</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.items.map(\r\n                                        item =>\r\n                                            <tr scope=\"row\" key={item.id}>\r\n                                                <td>{item.name}</td>\r\n                                                <td>{item.phoneNumber}</td>\r\n                                                <td>{item.ddcnumber}</td>\r\n                                                <td>{item.email}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListSuppliersComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserComponent.jsx",["455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport UserDataService from '../service/UserDataService';\r\nimport '../myStyles/Style.css';\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass UserComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id || -1,\r\n            firstName: '',\r\n            lastName: '',\r\n            userName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmpassword: '',\r\n            changingpassword: this.props.match.params.id > 0 ? false : true,\r\n            countries: null,\r\n            cities: null,\r\n            filteredcities: null,\r\n            countryId: null,\r\n            cityId: '',\r\n            register: null,\r\n            waitmsg: null\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"did mount user component\");\r\n        let userRole = this.getUserRole();       \r\n        if ((this.state.id == -1 && userRole === 'ROLE_Mol')) { \r\n            return\r\n        }\r\n        UserDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    firstName: response.data.firstName||'',\r\n                    lastName: response.data.lastName||'',\r\n                    userName: response.data.userName||'',\r\n                    email: response.data.email||'',\r\n                    countries: response.data.countries || null,\r\n                    cities:  response.data.cities || null,\r\n                    filteredcities:  response.data.countryId ? \r\n                        this.filterCities([], response.data.cities, response.data.countryId) : response.data.cities || null,\r\n                    countryId: response.data.countryId || null,\r\n                    cityId:  response.data.cityId+'' || ''\r\n                })\r\n            })\r\n    }\r\n\r\n    getUserRole() {\r\n        return AuthenticationService.getLoggedUerRole();\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n        let user = {\r\n            id: this.state.id,\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            username: values.userName,\r\n            email: values.email,\r\n            password: this.state.changingpassword ? values.password : null,\r\n            cityId:this.state.cities != null && values.newCity == null ? values.cityId : null,\r\n            newCity: this.state.cities != null && values.newCity && values.newCity != 'undefined' ? values.newCity : null,\r\n            countryId: this.state.cities != null && values.newCity && values.newCity != 'undefined' ? this.state.countryId : null,\r\n            targetDate: values.targetDate\r\n        }\r\n        UserDataService.save(user)\r\n            .then((response) => {\r\n                if (response.data.refreshToken) {\r\n                    AuthenticationService.setRegister(response.data);\r\n                } else if (typeof response.data == 'string') {\r\n                    this.setState({\r\n                        register: true,\r\n                        waitmsg : response.data\r\n                    })\r\n                }\r\n                if (!this.state.register) {\r\n                    if ((this.getUserRole() == 'ROLE_Admin' || this.getUserRole() == 'ROLE_Mol') && this.state.id != AuthenticationService.getLoggedUerId)\r\n                        this.props.history.push('/users');\r\n                    else this.props.history.push('/home')\r\n                }\r\n        }).catch(error => {               \r\n                    let msg = Function.getErrorMsg(error);\r\n                    if (msg.indexOf(\"email\") > -1)\r\n                        actions.setErrors({ email: msg })\r\n                    if (msg.indexOf(\"user name\") > -1)\r\n                        actions.setErrors({ userName: msg })\r\n                    if (msg.indexOf(\"Password\") > -1)\r\n                        actions.setErrors({ Password: msg })\r\n                    this.showError(msg);\r\n        })\r\n    }\r\n   \r\n    showError(msg) {\r\n        let time = 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    validate(values) {       \r\n        let errors = {}\r\n        if (!values.userName) {\r\n            errors.userName = 'required field !!!'\r\n        } else if (values.userName.length < 4) {\r\n            errors.userName = 'Enter at least 4 Characters'\r\n        }\r\n        if (!values.email) {\r\n            errors.email = 'required field !!!'\r\n        } else if (values.email.length < 4) {\r\n            errors.email = 'Enter at least 4 Characters'\r\n        }\r\n        if (this.state.id === -1 || this.state.changingpassword) {\r\n            if (!values.password) {\r\n                errors.password = 'required field !!!'\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Enter at least 6 Characters'\r\n            } else if (values.password != values.confirmpassword) {\r\n                errors.confirmpassword='password and confirm password don\\'t match'\r\n            }\r\n        }\r\n        if (this.state.cities != null && this.getUserRole() != '' && (!values.cityId || values.cityId == 'undefined')) {\r\n            errors.cityId = 'required field !!!'           \r\n        }\r\n        if (this.getUserRole() == '' && (!values.cityId || values.cityId == 'undefined') &&\r\n            (!values.newCity || values.newCity == 'undefined')) {\r\n            let error = \"either choose city or write your city name !!!\";\r\n            errors.cityId = \"either choose city or write your city name !!!\";\r\n            errors.newCity = \"either choose city or write your city name !!!\";\r\n        }\r\n\r\n        if (this.state.addnewCity && (!this.state.countryId || this.state.countryId == 'undefined')) {\r\n            errors.country = 'required field !!!'\r\n        }\r\n\r\n        if (values.newCity && values.newCity.length < 1) {\r\n            errors.newCity = 'too short !!!'\r\n        }\r\n        return errors\r\n    }\r\n\r\n   cancelForm() {\r\n       window.history.back();\r\n    }\r\n\r\n    changePassword = () => {\r\n        this.setState({\r\n            changingpassword: this.state.changingpassword ? false : true\r\n        })\r\n    }\r\n\r\n   /* onFocus = event => {\r\n        console.log(\"on focus \");\r\n\r\n        if (event.target.autocomplete) {\r\n            event.target.autocomplete = \"whatever\";\r\n        }\r\n    }*/\r\n\r\n    filterCities(subs, cities, value) {\r\n        if (!cities) return null;\r\n        if (!value || value == 'undefined') return cities;\r\n        subs = []\r\n        for (let i = 0; i < cities.length; i++) {\r\n            if (cities[i].filterBy == value) {\r\n                subs.push(cities[i])\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n        const userRole = this.getUserRole();\r\n        let { id, firstName, lastName, userName, email, password, confirmpassword, country, cityId } = this.state\r\n        let newCity = null;\r\n        return (\r\n            <div className=\"container pt-5\">\r\n                <h3 className=\"mb-3\"> {\r\n                    userRole == '' ? \"register \" :\r\n                    this.state.id > 0 && this.state.id == AuthenticationService.getLoggedUerId() ?  \"update profile\" :\r\n                            this.state.id > 0 ? \"Update User\" : \"Add New User\"}</h3>\r\n                {this.state.register && this.state.waitmsg && \r\n                    <>\r\n                        <p>{this.state.waitmsg}</p>\r\n                    </>}\r\n                {this.state.register == null &&\r\n                    <Formik\r\n                        initialValues={{ id, firstName, lastName, userName, email, password, confirmpassword, newCity, country, cityId }}\r\n                        onSubmit={(values, actions) => this.onSubmit(values, actions)}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                    {({ setFieldValue, values, dirty, errors }) => (\r\n                                <Form className=\"d-flex flex-wrap\">\r\n                                    {this.state.errormsg && <div className=\"alert alert-warning\" style={{ width: \"100%\" }}>{this.state.errormsg}</div>}\r\n                                   \r\n                                    <div className=\"inline w50\">\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n\r\n                                        <fieldset className=\"form-group w90\">\r\n                                            <label>first name</label>\r\n                                            <Field className=\"form-control\" type=\"text\" name=\"firstName\"\r\n                                                autoComplete=\"new-password\" />\r\n                                            <ErrorMessage name=\"firstName\" component=\"div\"\r\n                                                className=\"alert alert-warning\" />\r\n                                        </fieldset>\r\n                                        <fieldset className=\"form-group w90\">\r\n                                            <label className=\"required-field\">user name</label>\r\n                                            <Field className=\"form-control \" type=\"text\" name=\"userName\"\r\n                                                autoComplete=\"new-password\" />\r\n                                            <ErrorMessage name=\"userName\" component=\"div\"\r\n                                                className=\"alert alert-warning \" />\r\n                                        </fieldset>\r\n                                        <fieldset className=\"form-group w90\">\r\n                                            <label className=\"required-field\">email</label>\r\n                                            <Field className=\"form-control\" type=\"email\" name=\"email\"\r\n                                                autoComplete=\"new-password\" />\r\n                                            <ErrorMessage name=\"email\" component=\"div\"\r\n                                                className=\"alert alert-warning \" />\r\n                                        </fieldset>\r\n                                        <div className=\"w100\">\r\n                                            {this.state.countries &&\r\n                                                <fieldset className=\"inline form-group pl-0 w70\">\r\n                                                    <label className={this.state.addnewCity ? \"required-field\" : \"\"}>country&nbsp;</label>\r\n                                                    <CustomSelect\r\n                                                        className={\"\"}\r\n                                                        items={this.state.countries}\r\n                                                        value={this.state.countryId || ''}                                                       \r\n                                                        onChange={(selected) => {\r\n                                                            let subs = this.state.filteredcities;\r\n                                                            subs = this.filterCities(subs, this.state.cities, selected.value);                                                          \r\n                                                            this.setState({\r\n                                                                countryId: selected.value,\r\n                                                                filteredcities: subs\r\n                                                            })\r\n                                                        }}\r\n                                                    />\r\n                                                    <ErrorMessage name=\"country\" component=\"div\"\r\n                                                        className=\"alert alert-warning\" />\r\n                                                </fieldset>\r\n                                            }\r\n                                        </div>\r\n                                        <div className=\"w100\">\r\n                                            {!this.state.addnewCity &&this.state.cities &&\r\n                                                <fieldset className=\"inline form-group w70 pl-0\">\r\n                                                    <label className=\"required-field\">city</label>\r\n                                                    <CustomSelect\r\n                                                        className={\"\"}\r\n                                                        items={this.state.filteredcities || this.state.cities}\r\n                                                        value={values.cityId || ''}\r\n                                                        onChange={(selected) => setFieldValue(\"cityId\", selected.value)}\r\n                                                    />\r\n                                                    <ErrorMessage name=\"cityId\" component=\"div\"\r\n                                                        className=\"alert alert-warning \" />\r\n                                                </fieldset>\r\n                                            }\r\n                                            {this.state.addnewCity &&\r\n                                                <fieldset className=\"inline form-group w70 pl-0\">\r\n                                                <label className=\"required-field\">city name</label>\r\n                                                <p style={{ fontSize: \"60%\" }}>\r\n                                                            if you can't find your city, please write it down,<br />\r\n                                                            you can relate to any major city near you as long as it's in the same time zone<br />\r\n                                                            to make your calculations accurate, Thank you.<br />\r\n                                                        </p>\r\n                                                    <Field className=\"form-control \" type=\"text\" name=\"newCity\"\r\n                                                        autoComplete=\"new-password\" />\r\n                                                    <ErrorMessage name=\"newCity\" component=\"div\"\r\n                                                        className=\"alert alert-warning\" />\r\n                                                </fieldset>\r\n                                            }\r\n                                        </div>\r\n                                        <div className=\"w100\">\r\n                                            {this.state.cities && userRole == '' && !this.state.addnewCity &&\r\n                                                <button className=\"btn btn-mybtn\" type=\"button\" onClick={() => this.setState({ addnewCity: true })}>new city</button>}\r\n                                            {this.state.cities && userRole == '' && this.state.addnewCity &&\r\n                                                <button className=\"btn btn-mybtn\" type=\"button\"\r\n                                                    onClick={() => { this.setState({ addnewCity: false }); setFieldValue(\"newCity\", null) }}>back</button>}\r\n                                        </div>\r\n                                    <fieldset className=\"form-group mt-5\">\r\n                                    <button className=\"btn btn-mybtn p-x-5\" type=\"submit\" disabled={!dirty}>{this.state.id > 0 ? \"Save\" : \"Submit\"}</button>\r\n                                            <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>cancel</button>\r\n                                        </fieldset>\r\n                                    </div>\r\n                                    <div className=\"inline w-50 \">\r\n                                        <fieldset className=\"form-group w90\">\r\n                                            <label>last name</label>\r\n                                            <Field className=\"form-control\" type=\"text\" name=\"lastName\"\r\n                                                autoComplete=\"new-password\" />\r\n                                            <ErrorMessage name=\"lastName\" component=\"div\"\r\n                                                className=\"alert alert-warning\" />\r\n                                        </fieldset>\r\n                                        {(this.state.id > 0 && !this.state.changingpassword) &&\r\n                                            <button className=\"btn btn-mybtn mt-5 mb-3  d-flex\" onClick={this.changePassword}>change password</button>}\r\n                                        {(this.state.id > 0 && this.state.changingpassword) &&\r\n                                            <button className=\"btn btn-mybtn mt-5 mb-3  d-flex\" onClick={this.changePassword}>leave password</button>}\r\n                                        {(this.state.id < 1 || this.state.changingpassword) &&\r\n                                            <div>\r\n                                                <fieldset className=\"form-group w90\">\r\n                                                    <label className=\"required-field\">password</label>\r\n                                                    <Field className=\"form-control \" type=\"password\" name=\"password\"\r\n                                                        autoComplete=\"new-password\" />\r\n                                                    <ErrorMessage name=\"password\" component=\"div\"\r\n                                                        className=\"alert alert-warning \" />\r\n                                                </fieldset>\r\n                                                <fieldset className=\"form-group w90\">\r\n                                                    <label className=\"required-field\">confirm password</label>\r\n                                                    <Field className=\"form-control\" type=\"password\" name=\"confirmpassword\"\r\n                                                        autoComplete=\"new-password\" />\r\n                                                    <ErrorMessage name=\"confirmpassword\" component=\"div\"\r\n                                                        className=\"alert alert-warning\" />\r\n                                                </fieldset>\r\n                                            </div>\r\n                                        }\r\n                                    </div>                                   \r\n                                </Form>\r\n                            )}\r\n                    </Formik>}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryComponent.jsx",["476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport DatePicker from \"react-datepicker\";\r\nimport Function from './Shared/Function'\r\n\r\nclass DeliveryComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n       this.state = {\r\n            id: this.props.match.params.id,\r\n            deliveryView: this.props.match.params.deliveryView || '',\r\n            number: '',\r\n            date: '',\r\n            supplierId: '',\r\n           suppliers: [],\r\n           originaldds : [],\r\n            deliveryDetailEditVMs: [],\r\n            products: [],\r\n            index: '',\r\n            ddEditVMerror: {},           \r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.cancelForm = this.cancelForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        DeliveryDataService.retrieve(this.state.id)\r\n            .then(response => {\r\n                 this.setState({\r\n                    supplierId: response.data.supplierId || '',  \r\n                    number: response.data.number, \r\n                     date: response.data.date || new Date(),\r\n                     suppliers: response.data.suppliers, \r\n                     originaldds: JSON.parse(JSON.stringify(response.data.deliveryDetailEditVMs)) || [],\r\n                     deliveryDetailEditVMs: response.data.deliveryDetailEditVMs || [],\r\n                    products: response.data.products || []                    \r\n                });\r\n            })\r\n    }\r\n\r\n    onSubmit(values, actions) {\r\n\r\n        actions.setFieldValue('EnumErrors', null);\r\n        actions.setFieldValue('deletionErrors', null);\r\n        actions.setFieldValue('ddDeletionErrors', null);\r\n      \r\n        let item = {\r\n            id: this.state.id,\r\n            date: values.date,\r\n            number: values.number,\r\n            supplierId: values.supplierId,\r\n            deliveryDetailEditVMs: values.deliveryDetailEditVMs,\r\n            deletedDetailsIds: values.deleteddds,\r\n            targetDate: values.targetDate\r\n        };      \r\n\r\n        DeliveryDataService.save(item)\r\n            .then((response) => {\r\n               let path = this.state.deliveryView.length > 0 ? '/deliveries?deliveryView=DeliveryDetailView' : '/deliveries';\r\n               this.props.history.push(path)\r\n            }).catch((error) => { \r\n                 let errormsg = Function.getErrorMsg(error);\r\n                actions.setFieldValue('EnumErrors', error.response.data.numErrors);\r\n                actions.setFieldValue('deletionErrors', error.response.data.deletionErrors);\r\n                actions.setFieldValue('ddDeletionErrors', errormsg);\r\n                actions.setFieldValue('originalSupplierId', values.supplierId);\r\n                actions.setFieldValue('originalDate', values.date);\r\n                actions.setFieldValue('originaldds', JSON.parse(JSON.stringify(values.deliveryDetailEditVMs)));\r\n                actions.setFieldValue(\"deliveryDetailEditVMs\", values.deliveryDetailEditVMs);\r\n            })\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}  \r\n        if (!values.date) {\r\n            errors.date = 'date required field !!!'\r\n        }\r\n        if (this.state.id < 0 && (!values.supplierId || values.supplierId == 'undefined')) {\r\n            errors.supplierId = 'required field !!!'\r\n        }       \r\n        if (values.deliveryDetailEditVMs.length < 1) {\r\n            errors.deliveryDetailEditVMs = 'delivery must have products !!!'\r\n        }\r\n        return errors\r\n    }\r\n\r\n    cancelForm() {\r\n        window.history.back();\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ ddEditVMerror: null })\r\n    }\r\n\r\n    onChangeQuantity(e, values, setFieldValue) {\r\n        const productNums = [...values.ddEditVM.productNums];\r\n        const quantity = e.target.value || 0;\r\n        const previousQuantity = parseInt(values.ddEditVM.quantity || '0');\r\n\r\n     if (previousQuantity < quantity) {\r\n        for (let i = previousQuantity; i < quantity; i++) {\r\n            productNums.push({ value: '', name: '' });\r\n        }\r\n     } else {\r\n        for (let i = previousQuantity; i >= quantity; i--) {\r\n            let num = productNums.splice(i, 1);\r\n            if (num[0] !== undefined && values.ddEditVM.id !== '') {\r\n               if ( num[0].value !== '') {\r\n                    let deletedNums = values.ddEditVM.deletedNums || [];\r\n                    deletedNums.push(num[0].value);\r\n                    setFieldValue(\"ddEditVM.deletedNums\", deletedNums);                   \r\n                } else {\r\n                    let updatedNums = values.ddEditVM.updatedProductNums || [];\r\n                    let index = updatedNums.findIndex(x => x.value == '-' + i);\r\n                    if (index > -1) updatedNums.splice(index, 1);\r\n                    setFieldValue(\"ddEditVM.updatedProductNums\", updatedNums);\r\n                }\r\n            }\r\n        }}\r\n        setFieldValue(\"ddEditVM.productNums\", productNums);\r\n        setFieldValue(\"ddEditVM.quantity\", e.target.value);\r\n    }\r\n\r\n    onUpdateProductNums(e, id, values, setFieldValue) {\r\n        let updatedProductNums = values.ddEditVM.updatedProductNums || [];        \r\n        let index = updatedProductNums.findIndex(x => x.value == id);\r\n         if (index < 0)\r\n            updatedProductNums.push({ value: id, name: e.target.value });\r\n        else\r\n            updatedProductNums[index].name = e.target.value;\r\n\r\n        setFieldValue(`ddEditVM.updatedProductNums`, updatedProductNums)\r\n    }\r\n\r\n    resetddEditVMForm(values, setFieldValue) {\r\n        let VM = values.ddEditVM;\r\n        VM = {\r\n            id: '', productId: 'undefined', productName: '', quantity: '', pricePerOne: '', productNums: []\r\n        };\r\n        setFieldValue(\"ddEditVM\", VM);\r\n        setFieldValue(\"index\", '');\r\n        setFieldValue(\"ddEditVMerror\", {});\r\n        setFieldValue(\"productNumErrors\", []);\r\n    }\r\n\r\n    isSame = (values) => {\r\n      \r\n        let same = true;\r\n        if (values.originalSupplierId != values.supplierId) return false;\r\n        if (values.originalDate != values.date) return false;\r\n        if (values.originaldds.length == 0 && values.deliveryDetailEditVMs.length == 0) return true;\r\n        if (!this.listssame(values.originaldds, values.deliveryDetailEditVMs)) {\r\n            if (!this.listssame(this.state.originaldds, values.deliveryDetailEditVMs)) return false;\r\n            }           \r\n        return same;\r\n    }\r\n\r\n    listssame(originaldds, deliveryDetailEditVMs) {\r\n       \r\n        if (deliveryDetailEditVMs.length != originaldds.length) return false;\r\n        for (let z = 0; z < originaldds.length; z++) {\r\n            let dd = originaldds[z];\r\n            let found = deliveryDetailEditVMs.find(x => x.productId == dd.productId);\r\n           \r\n            if (!found) { return false }\r\n            if ( dd.productNums.length != found.productNums.length) { return false }\r\n            if ( (dd.productId != found.productId || dd.pricePerOne != found.pricePerOne)) { return false }\r\n\r\n            for (let q = 0; q < dd.productNums.length; q++) {\r\n                let num = dd.productNums[q];\r\n                let foundNum = found.productNums.find(i => i.name == num.name);\r\n               \r\n                if (!foundNum) { return false }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n       \r\n        let { id, number, date, supplierId, suppliers, deliveryDetailEditVMs, products, index, ddEditVMerror} = this.state ;\r\n        let ddEditVM = { id: '', productId: '', productName: '', quantity: '', pricePerOne: '', productNums: [], updatedProductNums: [], deletedNums: []};  \r\n        let deleteddds = [];    \r\n        let productNumErrors = []; // client side validation\r\n        let EnumErrors = null;// from server\r\n        let deletionErrors = null; // from server\r\n        let originaldds = JSON.parse(JSON.stringify(this.state.originaldds));\r\n        let originalSupplierId = this.state.supplierId;\r\n        let originalDate = this.state.date;\r\n       \r\n        return (\r\n            <div className=\"container pt-5\">\r\n                {this.state.id > 0 ? <h3 className=\"mb-3\"> Update Delivery</h3> : <h3 className=\"mb-3\"> Add New Delivery </h3>}\r\n                <Formik\r\n                    initialValues={{\r\n                        id, number, date, supplierId, suppliers, deliveryDetailEditVMs, products, index, ddEditVMerror, ddEditVM, deleteddds\r\n                        , productNumErrors, EnumErrors, deletionErrors, originaldds, originalSupplierId, originalDate\r\n                    }}\r\n                   \r\n                    onSubmit={async (values, actions) => {\r\n                        this.onSubmit(values,actions)                       \r\n                    }}\r\n                    validateOnChange={true}\r\n                    validateOnBlur={true}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {({ dirty, isSubmitting, touched, setFieldValue, values }) => (\r\n                            <Form>\r\n                                <Field className=\"form-control\" type=\"text\" name=\"id\" hidden />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>number</label>\r\n                                    <Field className=\"form-control inline-2-5\" type=\"text\" name=\"number\" disabled\r\n                                    />                                   \r\n                                </fieldset>\r\n                                <fieldset className=\"d-flex align-items-top\">\r\n                                <fieldset className=\"d-inline-block\">\r\n                                    <label className=\"required-field\">date</label>\r\n                                    {console.log(\"values.date\"+(values.date))}\r\n                                    <div>\r\n                                    <DatePicker\r\n                                            className=\"form-control inline-2-5\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                            locale=\"en-GB\"\r\n                                            selected={(values.date && new Date(values.date)) }\r\n                                            maxDate={new Date()}\r\n                                            onChange={date => {\r\n                                                setFieldValue(\"date\", Function.convertDate(date));\r\n                                            }} />                                   \r\n                                        </div>\r\n                                        <ErrorMessage name=\"date\" component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01\" />\r\n                                </fieldset>                                   \r\n                                    <fieldset className=\"d-inline-block px-5\">\r\n                                    <label className=\"required-field\">supplier</label>\r\n                                    <div>                                     \r\n                                    <CustomSelect\r\n                                                id=\"supplierId\"\r\n                                                name=\"supplierId\"\r\n                                                className={\"d-inline-block inline-4\"}\r\n                                                items={suppliers}\r\n                                                value={values.supplierId}\r\n                                                onChange={(value) => {\r\n                                                    setFieldValue(\"supplierId\", value.value);                                                    \r\n                                                }}/>    \r\n                                        </div>  \r\n                                        <ErrorMessage name=\"supplierId\" component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01\" />\r\n                                    </fieldset>\r\n                                </fieldset>\r\n                            {/* ********************************************************  */}\r\n\r\n                            <div className=\"mt-5\"><h6>add/update products</h6>\r\n                            <fieldset className=\"d-flex align-items-top  mb-3\">                               \r\n                                  <div className=\"d-flex align-items-top\">\r\n                                    <div className=\"d-inline px-3\">\r\n                                            <label>product :&nbsp;</label>                                           \r\n                                        <CustomSelect\r\n                                            className={\"d-inline-block inline-2-5\"}\r\n                                            items={products}\r\n                                            value={values.ddEditVM.productId}\r\n                                            onChange={(selected) => {\r\n                                                setFieldValue(\"ddEditVM.productName\",selected.label);\r\n                                                setFieldValue(\"ddEditVM.productId\",selected.value);\r\n                                            }}/>\r\n                                        {\r\n                                            values.ddEditVMerror.name &&\r\n                                            <div className=\"alert alert-warning d-flex mbt-01\">{values.ddEditVMerror.name}\r\n                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                    onClick={() => setFieldValue(\"ddEditVMerror.name\", null)}></i></div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"d-inline px-3\">\r\n                                        <label className=\"mb-1\">quantity :&nbsp;</label>\r\n                                            <Field className=\"form-control d-inline p-1 inline-100px\" type=\"number\" min=\"0\" name=\"ddEditVM.quantity\"\r\n                                                onChange={e => {                                                                                                 \r\n                                                    this.onChangeQuantity(e, values, setFieldValue)\r\n                                                }}/>\r\n                                        {\r\n                                            values.ddEditVMerror.quantity &&\r\n                                                <div className=\"alert alert-warning d-flex mbt-01\">{values.ddEditVMerror.quantity}\r\n                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                    onClick={() => setFieldValue(\"ddEditVMerror.quantity\", null)}></i></div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"d-inline px-3\">\r\n                                        <label className=\"mb-1\">unit price :&nbsp;</label>\r\n                                        <Field className=\"form-control d-inline p-1 inline-100px\" type=\"number\" min=\"0\" name=\"ddEditVM.pricePerOne\" />\r\n                                        {\r\n                                            values.ddEditVMerror.pricePerOne &&\r\n                                                <div className=\"alert alert-warning d-flex mbt-01\">{values.ddEditVMerror.pricePerOne}\r\n                                                <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                                    onClick={() => setFieldValue(\"ddEditVMerror.pricePerOne\", null)}></i></div>\r\n                                        }\r\n                                    </div>\r\n                                  </div>                                   \r\n                                  <div>\r\n                                    <button className=\"btn btn-mybtn mr-1\" type=\"button\" onClick={() => {                                           \r\n                                        let iserror = false;                                       \r\n                                            if (values.ddEditVM.productId == 'undefined' || values.ddEditVM.productId == '') {\r\n                                                setFieldValue(\"ddEditVMerror.name\", 'required field !!!');\r\n                                                iserror = true\r\n                                            }\r\n                                            else {\r\n                                            values.deliveryDetailEditVMs.map((x, y) => {\r\n                                                if (x.productName == values.ddEditVM.productName &&\r\n                                                    (values.index === '' || (values.index !== '' && values.index !== y))) {\r\n                                                    iserror = true;                                                   \r\n                                                    let ddErrorName = values.ddEditVMerror.name;\r\n                                                    ddErrorName = values.ddEditVM.productName + ' already exist\\'s in the list!!!';\r\n                                                    setFieldValue(\"ddEditVMerror.name\", ddErrorName);\r\n                                                }\r\n                                            });\r\n                                            }\r\n                                            if (values.ddEditVM.pricePerOne == '') {\r\n                                                setFieldValue(\"ddEditVMerror.pricePerOne\", 'required field !!!');\r\n                                                iserror = true\r\n                                            }\r\n                                            if (values.ddEditVM.quantity == '') {\r\n                                                setFieldValue(\"ddEditVMerror.quantity\", 'required field !!!');\r\n                                                iserror = true\r\n                                            }\r\n                                            if (values.ddEditVM.quantity > 0) {\r\n                                                let ddErrorNums = values.productNumErrors;\r\n                                                for (let i = 0; i < values.ddEditVM.quantity; i++) {\r\n                                                    if (values.ddEditVM.productNums[i].name.length < 1) {                                                        \r\n                                                         ddErrorNums[i] = 'required field !!!';                                                      \r\n                                                        iserror = true;                                                       \r\n                                                    }\r\n                                                    else if (values.ddEditVM.productNums[i].name.length < 4) {\r\n                                                        ddErrorNums[i] = 'too short !!!';\r\n                                                        iserror = true;\r\n                                                    }\r\n                                                    else {\r\n                                                        let isSame = false;\r\n                                                        for (let j = 0; j < i; j++) {\r\n                                                            if (values.ddEditVM.productNums[i].name == values.ddEditVM.productNums[j].name) {\r\n                                                                isSame = true;\r\n                                                                iserror = true;\r\n                                                            }\r\n                                                        }\r\n                                                        ddErrorNums[i] = isSame ? 'same number exists !!!' : '';\r\n                                                    }                                                 \r\n                                                }\r\n                                                setFieldValue(\"productNumErrors\", ddErrorNums);\r\n                                            }\r\n                                        if(!iserror) {\r\n                                            if (values.index === '') {\r\n                                                let list = values.deliveryDetailEditVMs;\r\n                                                list.push(values.ddEditVM);\r\n                                                setFieldValue(\"deliveryDetailEditVMs\", list)\r\n                                            }\r\n                                            else {\r\n                                                let list = values.deliveryDetailEditVMs;                                              \r\n                                                list[values.index] = values.ddEditVM; // edited;\r\n                                                setFieldValue(\"deliveryDetailEditVMs\", list);\r\n                                            }\r\n                                            this.resetddEditVMForm(values, setFieldValue)\r\n                                        }\r\n\r\n                                    }}>{values.index !== '' ? \"Update\" : \"Add\"}</button>\r\n                                        <button className=\"btn btn-mybtn btn-delete\" type=\"button\" onClick={() => {\r\n                                            this.resetddEditVMForm(values, setFieldValue)                                            \r\n                                        }}>reset</button>\r\n                                  </div>\r\n                                </fieldset>                               \r\n                                <fieldset className=\"mb-1\">\r\n                                    { values.ddEditVM.productNums &&\r\n                                        values.ddEditVM.productNums.map((num, i) => \r\n                                            <div key={num.value || i} className=\"ml-3\">                                               \r\n                                                <label className=\"required-field\">inventory number {i + 1}&nbsp;</label>\r\n                                                <Field\r\n                                                    name={`ddEditVM.productNums.${i}.name`}\r\n                                                    type=\"text\"\r\n                                                    className={'form-control d-inline-block inline-4 ml-1'}\r\n                                                    onChange={e => {                                                      \r\n                                                        if (values.ddEditVM.id !== '') this.onUpdateProductNums(e, num.value || '-'+i, values, setFieldValue)\r\n                                                        setFieldValue(`ddEditVM.productNums.${i}.name`, e.target.value);                                                       \r\n                                                }} /> \r\n                                            <button className=\"btn btn-mybtn btn-delete mb-1 ml-1\" type=\"button\"\r\n                                                onClick={() => {\r\n                                                    let list = values.ddEditVM.productNums;\r\n                                                    list.splice(i, 1)\r\n                                                    setFieldValue(\"ddEditVM.productNums\", list)\r\n                                                    if (values.ddEditVM.id !== '') {\r\n                                                        let updatedProductNums = values.ddEditVM.updatedProductNums || [];\r\n                                                        let index = updatedProductNums.findIndex(x => x.value === num.value || x.value === `-${i}`);\r\n\r\n                                                        if (index > -1) {\r\n                                                            updatedProductNums.splice(index, 1)\r\n                                                            setFieldValue(\"ddEditVM.updatedProductNums\", updatedProductNums)\r\n                                                        }\r\n                                                        if (+num.value > 0) {\r\n                                                            let deleted = values.ddEditVM.deletedNums || [];\r\n                                                            deleted.push(num)\r\n                                                            setFieldValue(\"ddEditVM.deletedNums\", deleted)\r\n                                                        }\r\n                                                    }\r\n                                                    setFieldValue(\"ddEditVM.quantity\", values.ddEditVM.quantity - 1)\r\n                                                }}>Delete</button>                                                                                            \r\n                                                { values.EnumErrors && values.EnumErrors instanceof Array\r\n                                                    && values.index !== '' && values.EnumErrors[values.index]\r\n                                                    && values.EnumErrors[values.index][i] &&\r\n                                                    <div className=\"alert alert-warning d-inline ml-1\">                                                       \r\n                                                        {values.EnumErrors[values.index][i]}\r\n                                                    </div>\r\n                                            }\r\n                                            {values.productNumErrors[i] &&\r\n                                                <div className=\"alert alert-warning d-inline ml-1\">\r\n                                                    {values.productNumErrors[i]}\r\n                                                    <i class=\"fa fa-close ml-3 pt-1\"\r\n                                                        onClick={() => setFieldValue(`productNumErrors.${i}`, null)}></i>\r\n                                                </div>\r\n                                            }                                              \r\n                                            </div>\r\n                                        )}\r\n\r\n                                    {/************ deleting ***************/}\r\n\r\n                                    {values.ddEditVM.deletedNums && values.ddEditVM.deletedNums.length > 0 &&\r\n                                        <div>\r\n                                            <label> deleting : </label>\r\n                                            {values.ddEditVM.deletedNums.map((num, i) =>\r\n                                                <div key={num.value || i} className=\"ml-3\">\r\n                                                    <Field\r\n                                                        name={`ddEditVM.deletedNums.${i}.name`}\r\n                                                        type=\"text\"\r\n                                                        className={'form-control d-inline-block inline-4'}\r\n                                                        onChange={() => { }} />\r\n                                                    <button className=\"btn btn-mybtn btn-delete mb-1 ml-1\" type=\"button\"\r\n                                                        onClick={() => {\r\n                                                            let list = values.ddEditVM.deletedNums;\r\n                                                            list.splice(i, 1)\r\n                                                            setFieldValue(\"ddEditVM.deletedNums\", list)\r\n\r\n                                                            let productNums = values.ddEditVM.productNums;\r\n                                                            productNums.push(num);\r\n                                                            setFieldValue(\"ddEditVM.productNums\", productNums);\r\n\r\n                                                            if (values.ddEditVM.id !== '') {\r\n                                                                let updatedProductNums = values.ddEditVM.updatedProductNums || [];\r\n                                                                updatedProductNums.push(num);\r\n                                                                setFieldValue(\"ddEditVM.updatedProductNums\", updatedProductNums)\r\n                                                            }\r\n                                                            setFieldValue(\"ddEditVM.quantity\", Number(values.ddEditVM.quantity) + 1)\r\n                                                    }}>un Delete</button>                                              \r\n                                                    {values.deletionErrors && values.deletionErrors instanceof Array\r\n                                                        && values.index !== '' && values.deletionErrors[values.index] &&\r\n                                                        values.deletionErrors[values.index].indexOf(Number(num.value)) != -1 &&\r\n                                                        <div className=\"alert alert-warning d-inline ml-1\">\r\n                                                            item has associated profiles with owings\r\n                                                    </div>\r\n                                                    }\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    }\r\n                                </fieldset>\r\n                            </div>\r\n                                {/*************************************************************************/}\r\n\r\n                                <fieldset>\r\n                                    <ErrorMessage name=\"deliveryDetailEditVMs\" component=\"div\"\r\n                                        className=\"alert alert-warning mbt-01\" />\r\n                            </fieldset>\r\n                            {(values.EnumErrors) &&\r\n                                <div className=\"alert alert-warning d-flex mbt-01\">Errors found, save not successful !!!</div>\r\n                            }\r\n\r\n                            {(values.deletionErrors && values.ddDeletionErrors) &&\r\n                                <div className=\"alert alert-warning  mbt-01\"><div>{values.ddDeletionErrors}</div>\r\n                                <div className=\"hoverable\" onClick={() => {                                   \r\n                                    let ddlist = values.deliveryDetailEditVMs;\r\n                                    let todeleteitems = values.todeleteitems;\r\n                                    todeleteitems.map(i =>\r\n                                        ddlist.push(i));\r\n                                    setFieldValue(\"deliveryDetailEditVMs\", ddlist);\r\n                                    setFieldValue(\"deleteddds\", []);\r\n                                    setFieldValue(\"todeleteitems\", []);\r\n                                    setFieldValue(\"ddDeletionErrors\", null)\r\n                                }}><p className=\"inline\">return deleted items <i class=\"fa fa-undo ml-1\"></i></p></div></div>\r\n                                }\r\n                            <div className=\"mt-3 \"><h6 className=\"required-field\">products</h6>                               \r\n                                    <table className=\"table x-Table\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Product</td>\r\n                                                <td>Quantity</td>\r\n                                                <td>Unit Price</td>\r\n                                            <td style={{ width: '173px' , padding: '.35rem .5rem' }}></td>\r\n                                        </tr>\r\n                                        {deliveryDetailEditVMs.map((dd, index) =>\r\n                                                <>                                                   \r\n                                            <tr key={index} className={values.index === index ? \"table-active\" : \"\"}>\r\n                                                    <td>{dd.productName}</td>\r\n                                                    <td>{dd.quantity}</td>\r\n                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                        style: \"currency\",\r\n                                                        currency: \"BGN\",\r\n                                                        maximumFractionDigits: 2\r\n                                                    }).format(dd.pricePerOne)}</td>\r\n                                                        <td style={{ width: '173px' , padding: '.35rem .5rem' }}>\r\n                                                            <button className=\"btn btn-mybtn mr-1\" type=\"button\" onClick={() => {                                                                                                   \r\n                                                                setFieldValue(\"index\", index);\r\n                                                                setFieldValue(\"ddEditVM\", JSON.parse(JSON.stringify(dd)))\r\n                                                            }}>Update</button>\r\n                                                           <button className=\"btn btn-mybtn btn-delete\" type=\"button\"\r\n                                                        onClick={() => {\r\n                                                            let list = values.deliveryDetailEditVMs;                                                            \r\n                                                            list.splice(index, 1);\r\n                                                            setFieldValue(\"deliveryDetailEditVMs\", list)                                                             \r\n                                                            if (dd.id > 0) {\r\n                                                                let deleted = values.deleteddds;\r\n                                                                deleted.push(dd.id)\r\n                                                                setFieldValue(\"deleteddds\", deleted)\r\n\r\n                                                                let todeleteitems = values.todeleteitems || [];\r\n                                                                todeleteitems.push(dd);\r\n                                                                setFieldValue(\"todeleteitems\", todeleteitems);\r\n                                                            }\r\n                                                            if (values.index == index) {\r\n                                                                this.resetddEditVMForm(values, setFieldValue)\r\n                                                            }                                                           \r\n                                                        }}>Delete</button>\r\n                                                        </td>\r\n                                                        { values.EnumErrors && values.EnumErrors[index] &&\r\n                                                            <td style={{ width: '4%', padding: '.75rem' }}>\r\n                                                            <div className=\"alert alert-warning d-inline p-2\">\r\n                                                                <i class=\"fa fa-warning \"\r\n                                                                    onClick={() => { }}></i>\r\n                                                                </div>\r\n                                                            </td>\r\n                                                        }\r\n                                                        { values.deletionErrors && values.deletionErrors[index] &&\r\n                                                            <td style={{ width: '4%', padding: '.75rem' }}>\r\n                                                                <div className=\"alert alert-warning d-inline p-2\">\r\n                                                            <i class=\"fa fa-warning \"\r\n                                                                        onClick={() => { }}></i>\r\n                                                                </div>\r\n                                                            </td>\r\n                                                        }\r\n                                                </tr>                                                \r\n                                            </>\r\n                                    )}\r\n                                        </tbody>\r\n                                </table>                              \r\n                                <div className=\"mt-5 ml-3\">                                   \r\n                                    <button className=\"btn btn-mybtn p-x-5\" disabled={isSubmitting || this.isSame(values)}\r\n                                        type=\"submit\">Save</button>\r\n                                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" type=\"button\" onClick={this.cancelForm}>Cancel</button>\r\n                                </div>\r\n                            </div>\r\n                            </Form>\r\n                        )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeliveryComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListProductDetails.jsx",["499","500","501","502","503","504","505","506","507","508","509","510","511"],"import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport ProductDetailFilter from './Filters/ProductDetailFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport ProductDetailInnerComponent from './ProductDetailInnerComponent';\r\nimport Function from './Shared/Function';\r\nimport { Link, Route} from 'react-router-dom'\r\n\r\nimport AuthenticationService from '../service/AuthenticationService'\r\n\r\nconst headers = [\r\n    { label: \"inventory number\", key: \"inventoryNumber\" },\r\n    { label: \"discarded\", key: \"isDiscarded\" },\r\n    { label: \"available\", key: \"isAvailable\" }    \r\n];\r\n\r\nclass ListProductDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: {},\r\n            filterkey: 0,\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            showdts: [],\r\n            pdUpdateShow: {\r\n                pd: {}, show: false\r\n            },\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.addClicked = this.addClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n        this.searchLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n            if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                newSearch += 'Filter.filtersSet=true'\r\n            }\r\n            this.refresh(newSearch);           \r\n        }\r\n    }\r\n\r\n    refresh(newSearch) {\r\n        if (!newSearch) newSearch = this.state.search;\r\n        ProductDetailDataService.retrieveAll(newSearch)\r\n            .then(\r\n            response => {\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: this.getfilter(response.data.filter),\r\n                        filterkey: response.data.filter.filtersSet ? this.state.filterkey : this.state.filtersSet + 1\r\n                    })\r\n                }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg, 5);   \r\n        })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.inventoryNumbers = filter.inventoryNumbers;\r\n            return newfilter\r\n        }\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        ProductDetailDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                this.setState({ alldata: response.data.items });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        ProductDetailDataService.delete(id)\r\n            .then(\r\n                () => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n            }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg, 5); \r\n        })\r\n    }\r\n\r\n    updateClicked(item, x) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.show = !show.show;\r\n            if (show.show == true) {\r\n                show.pd = JSON.parse(JSON.stringify(item))\r\n                show.x = x;\r\n            } else {\r\n                show.error = ''\r\n            }\r\n            this.setState({\r\n                pdUpdateShow: show,\r\n                message: null,\r\n                pdmessage: [],\r\n                ddmessage: []\r\n        });        \r\n    }\r\n\r\n    addClicked() {\r\n        this.props.history.push(`/productdetails/-1`)\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {      \r\n        this.updateLink(newSearch);     \r\n    }\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const data = this.state.items;\r\n        const dataAll = '';\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {this.state.pdUpdateShow && this.state.pdUpdateShow.show == true &&\r\n                    <ProductDetailInnerComponent\r\n                        pdUpdateShow={this.state.pdUpdateShow}\r\n                    items={this.state.items}\r\n                    filter={this.state.filter}\r\n                        message={this.state.message}\r\n                        updateClicked={() => this.updateClicked(null)}\r\n                        setItems={(value) => this.setState({ items: value })}\r\n                        setMessage={(value) => this.setState({ message: `update successful` })}\r\n                    />}\r\n                {userRole == 'ROLE_Mol' && this.state.filter && <ProductDetailFilter {...this.state.filter} history={this.props.history}\r\n                    key={this.state.filterkey}\r\n                    onNewSearch={(search) =>\r\n                    this.updateSearch(search)\r\n                } />}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2\">\r\n                            <strong> Inventory</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"product-details-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {\r\n                                        console.log(\"You click the link\");\r\n                                    }}\r\n                                >\r\n                                    Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"product-details-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager} history={this.props.history}\r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}\r\n                        </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormas: null })}></i></div>}\r\n                        <table className=\"table border-bottom my-table\" style={{ width: '100%' }}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\" ></th>\r\n                                    <th scope=\"col\">inventory number</th>                                   \r\n                                    <th scope=\"col\">product name</th>                                   \r\n                                    <th>date created</th> \r\n                                    <th scope=\"col\" >price</th>\r\n                                    <th scope=\"col\" className=\"wxxs\">discarded</th>\r\n                                    <th scope=\"col\" className=\"wxxs\">condition</th>\r\n                                    {userRole == 'ROLE_Mol' && <th className=\"wxxs\">profiles</th>}                                    \r\n                                    <th ></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.items.map(\r\n                                        (item, i) =>\r\n                                            <>\r\n                                                <tr scope=\"row\" key={item.id}>\r\n                                                    <td className=\"hoverable\"\r\n                                                        onClick={() => {\r\n                                                            let showdts = this.state.showdts;\r\n                                                            if (showdts == undefined) showdts = [];\r\n                                                            showdts[i] = showdts[i] ? false : true;\r\n                                                            this.setState({ showdts: showdts })\r\n                                                        }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                            aria-hidden=\"true\"></i></td>\r\n                                                <td>{item.inventoryNumber}</td>                                                \r\n                                                <td>{item.productName}</td>                                               \r\n                                                <td>{new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                    month: \"long\",\r\n                                                    day: \"2-digit\",\r\n                                                    year: \"numeric\", \r\n                                                    }).format(new Date(item.dateCreated))}</td>\r\n                                                    <td>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                        style: \"currency\",\r\n                                                        currency: \"BGN\",\r\n                                                        maximumFractionDigits: 2\r\n                                                    }).format(item.price)}</td>\r\n                                                <td>{item.discarded ? 'yes' : 'no'}</td>\r\n                                                <td>{item.econdition}</td>\r\n                                                {userRole == 'ROLE_Mol' && <td className=\"hoverable\"\r\n                                                    onClick={() => {\r\n                                                        this.props.history.push(`/userprofiles?Filter.productDetailId=${item.id}`);\r\n                                                        }}><i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i></td>}\r\n                                                    {userRole == 'ROLE_Mol' &&\r\n                                                        <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item, i)}>Update</button>\r\n                                                            <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>}\r\n                                                    {userRole != 'ROLE_Mol' && <td></td>}\r\n                                            </tr>\r\n                                                {this.state.showdts && this.state.showdts[i] &&\r\n                                                    <tr >                                                    \r\n                                                    <td colSpan=\"2\" className=\"pt-3 pb-3 bold-border-bottom\"></td>\r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">\r\n                                                        delivery number : &nbsp;\r\n                                                    {item.deliveryNumber}</td>\r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">type :&nbsp;{item.productType}</td> \r\n                                                    <td colSpan=\"1\" className=\"pt-3 pb-3 bold-border-bottom\">                                                   \r\n                                                        amortization : &nbsp;\r\n                                                    {item.amortizationPercent}&nbsp;%</td>                                                   \r\n                                                    <td colSpan=\"4\" className=\"pt-3 pb-3 bold-border-bottom\">                                                                                                                \r\n                                                    total amortization : &nbsp;\r\n                                                    {new Intl.NumberFormat(\"en-GB\", {\r\n                                                    style: \"currency\",\r\n                                                    currency: \"BGN\",\r\n                                                    maximumFractionDigits: 2\r\n                                                    }).format(item.totalAmortization)}                                                       \r\n                                                    &emsp;&emsp;&emsp;                                                               \r\n                                                    </td>                                                    \r\n                                                    </tr>}                                                \r\n                                               </>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListProductDetails","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\ProductDetailFilter.jsx",["512","513","514","515","516","517","518","519","520","521","522","523","524"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css'\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Functions from './Functions';\r\n\r\nclass ProductDetailFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,\r\n            priceMoreThan: props.priceMoreThan,\r\n            priceLessThan: props.priceLessThan,\r\n            isDiscarded: props.isDiscarded,           \r\n            econdition: props.econdition,\r\n            econditions: props.econditions,\r\n            deliveryNumbers: props.deliveryNumbers,\r\n            deliveryId: props.deliveryId,\r\n            productNames: props.productNames,\r\n            productId: props.productId,           \r\n            inventoryNumbers: props.inventoryNumbers,\r\n            filteredInventoryNumbers: props.inventoryNumbers,\r\n            id: props.id,          \r\n            productTypes: props.productTypes,\r\n            productType: props.productType,\r\n            dateCreatedBefore: props.dateCreatedBefore,\r\n            dateCreatedAfter: props.dateCreatedAfter,\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n           \r\n            prefix: props.prefix,            \r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n      \r\n    }\r\n\r\n    resetForm() {\r\n        if (this.props.onNewSearch) {\r\n            this.props.onNewSearch('');\r\n            this.nullifyState();\r\n        } else if (this.props.history) {\r\n            this.props.history.push('/productdetails');\r\n            this.nullifyState();\r\n        } else\r\n            window.location.href = window.location.pathname;\r\n    }\r\n\r\n    nullifyState() {\r\n        this.setState({           \r\n            priceMoreThan: null,\r\n            priceLessThan: null,\r\n            isDiscarded: null,          \r\n            econdition: null,          \r\n            deliveryId: null,\r\n            productId: null,          \r\n            filteredInventoryNumbers: this.state.inventoryNumbers,\r\n            id: null,           \r\n            productType: null,\r\n            dateCreatedBefore: null,\r\n            dateCreatedAfter: null,\r\n            amortizationPercentMoreThan: null,\r\n            amortizationPercentLessThan: null,\r\n        })\r\n    }\r\n\r\n    filterList(list, value) {\r\n        if(!list) return []\r\n        let subs = [];\r\n        if (!value || value == 'undefined')\r\n            subs = [...list]\r\n        else\r\n            for (let i = 0; i < list.length; i++) {\r\n           \r\n                if (list[i].filterBy == value) {\r\n                    subs.push(list[i])\r\n                }\r\n            }\r\n\r\n        return subs;\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        let { deliveryNumbers, econditions, productNames, productTypes\r\n           } = this.state\r\n\r\n        let { all, priceMoreThan, priceLessThan, isDiscarded, deliveryId, econdition, \r\n            productId, id, productType, dateCreatedBefore,//inventoryNumber\r\n            dateCreatedAfter, amortizationPercentMoreThan, amortizationPercentLessThan, inventoryNumbers} = this.props\r\n\r\n        let filteredInventoryNumbers = this.filterList(this.props.inventoryNumbers, this.props.productId);\r\n\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    all, priceMoreThan, priceLessThan, isDiscarded, /*isAvailable,*/ deliveryNumbers, deliveryId, econdition, econditions,\r\n                    productNames, productId, inventoryNumbers, id, productTypes, productType, dateCreatedBefore,\r\n                    dateCreatedAfter, amortizationPercentMoreThan, amortizationPercentLessThan, filteredInventoryNumbers//inventoryNumber,\r\n                }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n               >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">                       \r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>product&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-3 foo\"}\r\n                                    items={productNames}\r\n                                    value={values.productId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"productId\", selected.value);\r\n                                        let subs = values.filteredInventoryNumbers;\r\n                                       subs = this.filterList( values.inventoryNumbers, selected.value )\r\n                                        setFieldValue(\"filteredInventoryNumbers\", subs);\r\n                                    }}/>\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label>inventory number&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4 foo\"}\r\n                                    items={values.filteredInventoryNumbers}\r\n                                    value={values.id}\r\n                                    onChange={(selected) => setFieldValue(\"id\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            {!this.props.short&&\r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">price&nbsp;</label>\r\n                                <div className=\"inline px-2 border \" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-100px\" type=\"number\" min=\"0\" max={values.priceLessThan || \"\"}\r\n                                            name=\"priceMoreThan\" />\r\n                                        <label className=\"pl-1 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-100px\" type=\"number\" min={values.priceMoreThan || 0}\r\n                                            name=\"priceLessThan\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">date created&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                    <label className=\"mb-1 fw-s\">after&nbsp;</label>\r\n                                    <div className=\"inline \">\r\n                                        <DatePicker className=\"form-control in-inline inline-2 foo\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                            locale=\"en-GB\"\r\n                                            maxDate={values.dateCreatedBefore}\r\n                                            selected={values.dateCreatedAfter && new Date(values.dateCreatedAfter)}\r\n                                            isClearable\r\n                                            onChange={date => setFieldValue(\"dateCreatedAfter\", date)}\r\n                                            shouldCloseOnSelect={true}\r\n                                            showYearDropdown\r\n                                            dropdownMode=\"select\"/>\r\n                                    </div>\r\n                                    <label className=\"pl-1 mb-1 fw-s\">before&nbsp;</label>\r\n                                    <DatePicker className=\"form-control in-inline inline-2 foo\"\r\n                                        dateFormat=\"MMMM dd yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        minDate={values.dateCreatedAfter}\r\n                                        selected={values.dateCreatedBefore && new Date(values.dateCreatedBefore)}\r\n                                        isClearable\r\n                                        onChange={date => setFieldValue(\"dateCreatedBefore\", date)}\r\n                                        highlightDates={new Date()}\r\n                                        shouldCloseOnSelect={true}\r\n                                        showYearDropdown\r\n                                        dropdownMode=\"select\"/>\r\n                                </div>\r\n                            </div>\r\n                            {!this.props.short &&\r\n                            <>\r\n                            {values.productTypes &&\r\n                                <div className=\"inline\">\r\n                                    <label>product type :</label>\r\n                                    {\r\n                                        productTypes.map((type) =>\r\n                                            <div className=\"inline\">\r\n                                                <Field\r\n                                                    className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                    value={type.value} checked={type.name === values.productType}\r\n                                                    onChange={(value) => {\r\n                                                        console.log('value of checked = ' + value.target.value);\r\n                                                        setFieldValue(\"productType\", value.target.value == values.productType ? null : value.target.value);\r\n                                                    }}\r\n                                                />\r\n                                                {type.name}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                }\r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-75px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                            name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan} />&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-75px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                            name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan}/>&nbsp;%\r\n                                        </div>\r\n                            </div>\r\n                            {values.deliveryNumbers &&\r\n                                <div className=\"inline\">\r\n                                    <label>delivery&nbsp;</label>\r\n                                    <CustomSelect\r\n                                        className={\"inline inline-2\"}\r\n                                        items={deliveryNumbers}\r\n                                        value={values.deliveryId}\r\n                                        onChange={(selected) => setFieldValue(\"deliveryId\", selected.value)}\r\n                                    />\r\n                                </div>\r\n                                }\r\n                                {values.econditions &&\r\n                                    <div className=\"inline\">\r\n                                        <label>condition :</label>\r\n                                        {econditions.map((type) =>\r\n                                                <div className=\"inline\">\r\n                                                    <Field\r\n                                                        className=\"mx-2\" type=\"checkbox\" name=\"econdition\"\r\n                                                        value={type.value} checked={type.name === values.econdition}\r\n                                                        onChange={(value) => {\r\n                                                            console.log('value of checked = ' + value.target.value);\r\n                                                            setFieldValue(\"econdition\", value.target.value == values.econdition ? null : value.target.value);\r\n                                                        }}\r\n                                                    />\r\n                                                    {type.name}\r\n                                                </div>\r\n                                            )}\r\n                                    </div>\r\n                                }\r\n                            <div className=\"inline pr-2 mr-2\">\r\n                                <Field\r\n                                    className=\"mr-2 pt-3\" type=\"checkbox\" name=\"isDiscarded\"                                    \r\n                                    value={true} checked={values.isDiscarded == true}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isDiscarded\", values.isDiscarded == true ? null : true);\r\n                                    }}\r\n                                />discarded\r\n                                <Field\r\n                                    className=\"mx-2 pt-3\" type=\"checkbox\" name=\"isDiscarded\"\r\n                                    value={false} checked={values.isDiscarded == false}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"isDiscarded\", values.isDiscarded == false ? null : false);\r\n                                    }}\r\n                                />not discarded\r\n                            </div>\r\n                                </>\r\n                        }\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"reset\" onClick={this.resetForm}>reset</button>\r\n                            </div>                            \r\n                            {this.props.ids && <div className=\"\">\r\n                                <h5 className=\"mt-2 ml-2 font-bold\" ><b><u>{window.location.search.indexOf(\"Filter.amortized=true\") > -1 ?\r\n                                    \"Fully amortized inventories\"\r\n                                    : window.location.search.indexOf(\"?Filter.updated=true\") > -1 ?\r\n                                        \"updated amortizations\" : \"\"}</u></b></h5>\r\n                            </div>}\r\n                        </fieldset>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductDetailFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserProfilesComponent.jsx",["525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567"],"import React, { Component } from 'react';\r\nimport UserProfileDataService from '../service/UserProfileDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserProfileFilter from './Filters/UserProfileFilter';\r\nimport '../myStyles/Style.css';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Link, Route, withRouter} from 'react-router-dom'\r\n\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport UserProfileInnerComponent from './UserProfileInnerComponent';\r\nimport TimelineInnerComponent from './TimelineInnerComponent';\r\nimport Function from './Shared/Function';\r\nimport OrderByComponent from './OrderByComponent';\r\nimport DeleteAllInnerComponent from './DeleteAllInnerComponent'\r\nconst headers = [\r\n    { label: \"UserName\", key: \"userName\" },\r\n    { label: \"product\", key: \"productName\" },\r\n    { label: \"Inventory Number\", key: \"inventoryNumber\" },\r\n    { label: \"Given at\", key: \"givenAt\" },\r\n    { label: \"Returned at\", key: \"returnedAt\" },   \r\n];\r\nclass ListUserProfilesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: {},\r\n            search: window.location.search || '',\r\n            searchBackUp:'',\r\n            alldata: [],\r\n            showdts: [],\r\n            i: null,\r\n            selectedUserId: null,\r\n            profileShow: {\r\n                profile: {}, show: false\r\n            },\r\n            timeline: {\r\n                show:false\r\n            },\r\n            filterKey: 0,\r\n            orderBy: { name: '', direction: '' },\r\n            usersToGive: []\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n        this.searchLink = React.createRef();\r\n        this.child = React.createRef();\r\n        this.filter = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh(search) {\r\n        if (search == null) search = this.state.search;\r\n        UserProfileDataService.retrieveAll(search)\r\n            .then(\r\n                response => {                   \r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems || [],\r\n                        pager: response.data.pager,\r\n                    });\r\n                    this.getFilter(response.data.filter)\r\n            }).catch((error) => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5);              \r\n            })\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }      \r\n\r\n    getFilter(newFilter) {\r\n        console.log(\"new flter = \" + JSON.stringify(newFilter));\r\n        if (this.state.filterKey == 0 || !newFilter.filtersSet) {\r\n            if (newFilter.usersToGive && newFilter.usersToGive.length > 0) {\r\n                let usersToGive = this.state.usersToGive;\r\n                usersToGive = JSON.parse(JSON.stringify(newFilter.usersToGive));\r\n                usersToGive.splice(0, 1);\r\n                this.setState({ usersToGive: usersToGive }, console.log(\"this.state.userstogive = \" + this.state.usersToGive))\r\n            }\r\n            this.setState({\r\n                filter: newFilter,\r\n                filterKey: this.state.filterKey + 1,\r\n            })\r\n        }      \r\n            if (newFilter.filtersSet) {\r\n                let filter = this.state.filter;\r\n                newFilter.userNames = filter.userNames;\r\n                newFilter.productNames = filter.productNames;\r\n                newFilter.inventoryNumbers = filter.inventoryNumbers;\r\n                this.setState({ filter: newFilter })\r\n            }           \r\n    } \r\n\r\n    downloadReport = () => {\r\n        let newSearch = this.getSearchAll();\r\n        UserProfileDataService.retrieveAll(newSearch)\r\n            .then(response => {\r\n                let data = response.data.items||response.data.daoitems;\r\n                data = this.getFormattedData(data);                   \r\n                this.setState({ alldata:data });\r\n                this.csvLink.current.link.click()\r\n            })\r\n    }\r\n\r\n    getFormattedData = (data) => {        \r\n        data = data && data.map(row => ({\r\n            ...row, givenAt: new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.givenAt))\r\n            , returnedAt: row.returnedAt ? new Intl.DateTimeFormat(\"en-GB\", {\r\n                month: \"numeric\",\r\n                day: \"2-digit\",\r\n                year: \"numeric\",\r\n            }).format(new Date(row.returnedAt)) : null\r\n        }));\r\n        return data;\r\n    }\r\n\r\n    getSearchAll = () => {\r\n        let search = this.state.search;\r\n        search.replace(/\\s+/g, '');\r\n        let newSearch = '';\r\n        let searchItems = search.split('&');\r\n        for (let i = 0; i < searchItems.length; i++) {\r\n            if (searchItems[i].length < 1 || searchItems[i].startsWith('Pager.itemsPerPage'))\r\n                continue\r\n            else\r\n                newSearch += searchItems[i] + '&'\r\n        }\r\n        newSearch = '?' + newSearch;\r\n        if (newSearch.length > 1) newSearch += '&'\r\n        newSearch += 'Pager.itemsPerPage=2147483647';\r\n        newSearch += '&Filter.LongView=true';\r\n        return newSearch;\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        UserProfileDataService.delete(id)\r\n            .then(() => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error)\r\n            this.showError(msg, 4);           \r\n        })\r\n    }\r\n\r\n    deleteAllbefore(date, id) {\r\n        UserProfileDataService.deleteAllBefore(date, id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: response.data + ` profiles have been Deleted successfully` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error)\r\n            this.showError(msg, 4);          \r\n            })\r\n    }\r\n\r\n    updateTimeline(value) {\r\n        if (this.state.timeline.show == value) return;        \r\n        let timeline = this.state.timeline;\r\n        timeline.show = value;\r\n        this.setState({\r\n            timeline: timeline,\r\n            message: null,\r\n            timeLineFilter: value ? JSON.parse(JSON.stringify(this.state.filter)) : null\r\n        });\r\n        if (value) {\r\n            let backUp = this.state.search;\r\n            this.setState({\r\n                searchBackUp: backUp,               \r\n            })\r\n            this.updateLink('')\r\n        }\r\n        if (!value) {            \r\n            this.setState({\r\n                search: this.state.searchBackUp,\r\n                filterKey: this.state.filterKey + 1,\r\n            }, () => { this.refresh(); this.searchLink.current.click() })          \r\n        }\r\n    }\r\n\r\n    updateClicked(item, x) {\r\n        let show = this.state.profileShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.profile = JSON.parse(JSON.stringify(item))\r\n            show.x = x;\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            profileShow: show,\r\n            message: null,           \r\n        });\r\n    }\r\n\r\n    addClicked (name) {\r\n        let userId = this.state.filter.userId || null;\r\n        let userName = userId == null || userId == 'undefined' ? '...' : name;\r\n        let item = {\r\n            userId: userId,\r\n            userName: userName\r\n        }\r\n        this.updateClicked(item,null)\r\n    }\r\n\r\n    cancelToGive = () => {\r\n        this.setState({\r\n            i: null,\r\n            selectedUserId: null\r\n        })\r\n    }\r\n\r\n    saveToGive = (item) => {      \r\n        let g = Function.getDate();\r\n        let itemToSend = {\r\n            previousId: item.id,\r\n            userId: this.state.selectedUserId || null,\r\n            productDetailId: item.productDetailId,\r\n            givenAt: g,           \r\n        }\r\n\r\n        UserProfileDataService.save(itemToSend).then(\r\n            () => {              \r\n                let name = this.state.selectedUserId;\r\n                this.setState({\r\n                    message: name != null ? 'product given successfully ' : 'product returned successfully ',\r\n                    selectedUserId: null,\r\n                    i: null,                    \r\n                })               \r\n               this.refresh();\r\n            }).catch(error => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5);\r\n                this.setState({\r\n                    selectedUserId: null,\r\n                    i: null,\r\n                })\r\n            })\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    onFilterSearchChange(search) {\r\n        this.setState({ search: search })\r\n        this.refresh()\r\n    }\r\n\r\n    getOrderedList(name) {        \r\n        let search = this.state.search;\r\n        let newSearch = ``;\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newSearch += searchItems[i] + '&'\r\n                else if (searchItems[i].startsWith('Pager')) continue;\r\n                else if (searchItems[i].startsWith('OrderBy')) continue;               \r\n                else \r\n                    newSearch += searchItems[i] + '&'\r\n            }\r\n        }      \r\n        let direction = '';\r\n        if (this.state.orderBy.name == name) {\r\n            direction = this.state.orderBy.direction == 'asc' ? 'desc' : 'asc';\r\n        } else {            \r\n            direction = 'asc';\r\n        }\r\n        newSearch += 'OrderBy.' + name + '=' + direction;//;\r\n        let orderBy = { name: name, direction: direction }\r\n        this.setState({ orderBy: orderBy })\r\n        newSearch = '?' + newSearch;\r\n        this.updateSearch(newSearch);\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {      \r\n        this.updateLink(newSearch);\r\n        if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n            newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n            newSearch += 'Filter.filtersSet=true'\r\n            }\r\n        this.refresh(newSearch);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n      \r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n        const userName = AuthenticationService.getLoggedUerName();\r\n        const data = this.getFormattedData(this.state.items);\r\n\r\n        const filteredUserTitle = userRole == 'ROLE_Employee' || (this.state.filter != null && this.state.filter.myProfile) ? 'my profile'\r\n            : this.state.filter != null && this.state.filter.userId != null ?\r\n                this.state.filter.userNames.find(n => n.value == this.state.filter.userId).name\r\n                : this.state.filter != null && this.state.filter.allUser ? 'users' : null;\r\n\r\n        const deletedUser = this.state.filter != null && this.state.filter.userId != null &&\r\n            this.state.filter.userNames.find(n => n.value == this.state.filter.userId).filterBy != null;\r\n        \r\n      \r\n        return (\r\n            <div className=\"px-3 pt-3\">               \r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {<div className={this.state.i != null ? \"overlay d-block\" : \"d-none\"} style={{ zIndex: \"3\" }}></div>}\r\n                {this.state.profileShow.profile && this.state.profileShow.show == true &&\r\n                    <UserProfileInnerComponent                       \r\n                        profileShow={this.state.profileShow}\r\n                        items={this.state.items}\r\n                        filter={this.state.filter}\r\n                        usersToGive={this.state.usersToGive}\r\n                        message={this.state.message}\r\n                        updateClicked={() => this.updateClicked(null)}\r\n                        refresh={() => this.refresh()}\r\n                        setMessage={(value) => this.setState({ message: value })}\r\n                    />}\r\n                {this.state.filter && <UserProfileFilter {...this.state.filter}\r\n                    key={this.state.filterKey}\r\n                    userRole={userRole}\r\n                    timeline={this.state.timeline}\r\n                    onSearch={(filter) => {\r\n                        if (this.state.timeline.show == true) {\r\n                            this.child.current.getNewFilter(filter);\r\n                        }\r\n                    }}\r\n                    search={this.state.search}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> User Profiles</strong>\r\n                            {filteredUserTitle != null && !this.state.timeline.show && <span> &emsp;(&nbsp;{filteredUserTitle}&nbsp;)</span>}                            \r\n                        </h5>\r\n                        {userRole == 'ROLE_Mol' &&                           \r\n                            <div className=\" pull-right mr-5\" style={{ position: \"relative\" }}>                            \r\n                                <input className=\"mx-1 m-2 mt-3\" type=\"radio\" \r\n                                    checked={this.state.timeline.show == false}\r\n                                    onClick={() => this.state.timeline.show ? this.updateTimeline(false) : {}}\r\n                                />Profiles View\r\n                                    <input id=\"btnTimeLine\" className=\"mx-1 m-2 mt-3 ml-5\" type=\"radio\"\r\n                                        checked={this.state.timeline.show == true}\r\n                                        disabled={false}\r\n                                        onClick={\r\n                                            () => !this.state.timeline.show ? this.updateTimeline(true) : {}} />Update Timeline  \r\n                                <p className=\"timelinenote \" style={{ fontSize: \"65%\" }}> select inventory and timeline to activate this button </p>\r\n                            </div>\r\n                        }                       \r\n                    </div>                   \r\n                    <div className=\"p-1\">\r\n                        {!this.state.timeline.show &&\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap \">                            \r\n                                <><div >\r\n                                {userRole == 'ROLE_Mol' && !deletedUser &&\r\n                                    <button className=\"btn btn-mybtn px-5  \" onClick={() => {                                       \r\n                                    this.addClicked(filteredUserTitle)\r\n                                }}>Add New</button>}\r\n                                <CSVLink\r\n                                    className=\"btn btn-mybtn px-3 ml-2\"\r\n                                    data={data} headers={headers} filename={\"user-profiles-page.csv\"}\r\n                                    asyncOnClick={true}\r\n                                    onClick={() => {}}\r\n                                >Download this page\r\n                                </CSVLink>\r\n                                <button className=\"btn btn-mybtn px-3 ml-2\" onClick={this.downloadReport}>Download All</button>\r\n                                <CSVLink\r\n                                    data={this.state.alldata}\r\n                                    filename={\"user-profiles-all.csv\"}\r\n                                    className=\"hidden\"\r\n                                    headers={headers}\r\n                                    ref={this.csvLink}\r\n                                    target=\"_blank\"\r\n                                />\r\n                            </div>\r\n                                {this.state.pager && <PaginationComponent {...this.state.pager}\r\n                                    search={this.state.search}\r\n                                    onNewSearch={(search)=>\r\n                                        this.updateSearch(search)\r\n                                    } />}</> </div>}\r\n                        {userRole == 'ROLE_Mol' && this.state.timeline.show &&\r\n                            <TimelineInnerComponent\r\n                            ref={this.child}\r\n                            filter={this.state.timeLineFilter}\r\n                            updateLink={(search) => this.updateLink(search)}\r\n                            updateTimeline={(value) => this.updateTimeline(value)}\r\n                            setMessage={(msg) => { console.log(\"msg = \"+msg);this.setState({ message: msg }) }}\r\n                            refresh={() => {\r\n                                this.updateTimeline(false); \r\n                            }}/>}\r\n                        {!this.state.timeline.show &&\r\n                            <>\r\n                            {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                            {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                {this.state.servermsg && <p> server msg = {this.state.servermsg}</p>}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i></div>}\r\n                            <table className=\"table border-bottom my-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        {userRole == 'ROLE_Mol' && <th className=\"\">user\r\n                                        <OrderByComponent name=\"userName\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"userName\")}/> \r\n                                            </th>}\r\n                                        <th>product\r\n                                        <OrderByComponent name=\"productName\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"productName\")}/>\r\n                                           </th>\r\n                                        <th>inventory number\r\n                                        <OrderByComponent name=\"inventoryNumber\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"inventoryNumber\")}/>\r\n                                       </th>\r\n                                        <th className=\"\">given at\r\n                                         <OrderByComponent name=\"givenAt\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"givenAt\")}/>\r\n                                            </th>\r\n                                        <th>returned at\r\n                                         <OrderByComponent name=\"returnedAt\" orderBy={this.state.orderBy} onClick={() => this.getOrderedList(\"returnedAt\")}/>\r\n                                           </th>                                       \r\n                                        {userRole == 'ROLE_Mol' && <th>Update &emsp;&nbsp; Delete\r\n                                            {!this.state.filter.userId && !this.state.filter.allUser && !this.state.filter.myProfile && !this.state.filter.current &&\r\n                                                <>< i class=\"fa fa-caret-down ml-2 hoverable\"\r\n                                                onClick={() => { this.setState({ showDeleteAll: !this.state.showDeleteAll }) }} />\r\n                                                {this.state.showDeleteAll &&\r\n                                                    <DeleteAllInnerComponent\r\n                                                    items={this.state.filter.inventoryNumbers}\r\n                                                    cancel={() => this.setState({ showDeleteAll: null })}\r\n                                                    deleteAll={(date, id) => {\r\n                                                        this.setState({ showDeleteAll: null }); this.deleteAllbefore(date, id)\r\n                                                    }}/>}\r\n                                                </>}</th>}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.items.map(\r\n                                            (item, i) =>\r\n                                                <>\r\n                                                <tr key={item.id} >\r\n                                                    {userRole == 'ROLE_Mol' && <td className={this.state.i == i ? \"above-row border-r\" : \"\"}>{item.userName}</td>}\r\n                                                        <td className={this.state.i == i ? \"above-row \" : \"\"}>{item.productName}</td>\r\n                                                        <td className={this.state.i == i ? \"above-row\" : \"\"}>\r\n                                                            <p className=\"hoverable\"\r\n                                                                onClick={() =>\r\n                                                                    this.props.history.push(`productdetails?Filter.id=${item.productDetailId}`)}>\r\n                                                                {item.inventoryNumber}</p></td>\r\n                                                    <td className={this.state.i == i ? \"above-row\" : \"\"}>{new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                        month: \"long\",\r\n                                                        day: \"2-digit\",\r\n                                                        year: \"numeric\",\r\n                                                    }).format(new Date(item.givenAt))}</td>                                                       \r\n                                                        {item.profileDetail != null &&\r\n                                                            <td className=\"hoverable\"\r\n                                                                onClick={() => {\r\n                                                                    let showdts = this.state.showdts;\r\n                                                                    if (showdts == undefined) showdts = [];\r\n                                                                    showdts[i] = showdts[i] ? false : true;\r\n                                                                    this.setState({ showdts: showdts })\r\n                                                                }}><i class={this.state.showdts && this.state.showdts[i] ? \"fa fa-angle-double-up\" : \"fa fa-angle-double-down\"}\r\n                                                                    aria-hidden=\"true\"></i></td>\r\n                                                        }\r\n                                                        {item.profileDetail == null && item.condition != 'Available' &&\r\n                                                            <td className=\"\">{item.condition}</td>}\r\n                                                            {item.profileDetail == null && item.condition == 'Available' &&\r\n                                                            <td className=\r\n                                                                {userRole == 'ROLE_Mol' && item.returnedAt == null ?\r\n                                                                    this.state.i == i ? \"above-row border-l with-btn\" : \"with-btn\" : \"\"}>\r\n                                                                {item.returnedAt != null &&\r\n                                                                    new Intl.DateTimeFormat(\"en-GB\", {\r\n                                                                        month: \"long\",\r\n                                                                        day: \"2-digit\",\r\n                                                                        year: \"numeric\",\r\n                                                                    }).format(new Date(item.returnedAt))}\r\n                                                                {item.returnedAt == null && userRole == 'ROLE_Mol' && userName != item.userName &&\r\n                                                                    <button className=\"btn btn-mybtn f-r\"\r\n                                                                        onClick={() => this.saveToGive(item, false)}>return</button>}\r\n                                                                {item.returnedAt == null && userRole == 'ROLE_Mol' && userName == item.userName &&\r\n                                                                    (this.state.i == null || this.state.i != i) &&\r\n                                                                    <button className=\"btn btn-mybtn f-r\"\r\n                                                                        onClick={() => { console.log(\"give to clicked\"); this.setState({ i: i }) }}>give to</button>}\r\n                                                                {item.returnedAt == null && userRole == 'ROLE_Mol' && userName == item.userName && this.state.i == i &&\r\n                                                                    <>\r\n                                                                        <div className=\r\n                                                                            {\"inline d-flex above-label\"}>\r\n                                                                            <label>select&nbsp;user&nbsp;</label>\r\n                                                                            <CustomSelect\r\n                                                                                defaultMenuIsOpen={true}\r\n                                                                            className={\"inline inline-3 above-select\"}\r\n                                                                            items={this.state.usersToGive}\r\n                                                                            value={this.state.selectedUserId}\r\n                                                                                onChange={(selected) => { this.setState({ selectedUserId: selected.value }) }}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                        <button className=\"btn btn-mybtn mr-1 above-btn\" onClick={() => this.saveToGive(item, true)}>\r\n                                                                            <i className=\"fa fa-save\"></i></button>\r\n                                                                        <button className=\"btn btn-mybtn btn-delete above-btn\" onClick={() => this.cancelToGive()}>\r\n                                                                            <i className=\"fa fa-close\"></i></button>\r\n                                                                    </>\r\n                                                                }\r\n                                                                {\r\n                                                                    item.returnedAt == null &&\r\n                                                                    userRole != 'ROLE_Mol' && '-'}</td>}                                                   \r\n                                                    {userRole == 'ROLE_Mol' && <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item, i)}>Update</button>\r\n                                                            <button className=\"btn btn-mybtn btn-delete\"\r\n                                                                disabled={item.userName == userName}\r\n                                                                onClick={() => {\r\n                                                                    if (window.confirm\r\n                                                                        ('Are you sure ?\\ndeleting a profile will just reassign it to your profile\\ndo you wish to proceed ? '))\r\n                                                                        this.deleteClicked(item.id)\r\n                                                                }}>Delete</button></td>}\r\n                                                    </tr>\r\n                                                    {item.profileDetail != null && this.state.showdts[i] &&\r\n                                                        <tr className=\"bold-border-bottom\">\r\n                                                        {userRole == 'ROLE_Mol' && <td></td>}                                                       \r\n                                                        <td colSpan=\"4\">\r\n                                                            <div className=\"d-flex align-items-top\">\r\n                                                                <div className=\"inline wxs\"><label>owings : </label></div>\r\n                                                             <div className=\"inline w20\">\r\n                                                                <p>created At : </p>\r\n                                                                <p>{item.profileDetail.createdAt}</p>\r\n                                                            </div>\r\n                                                            <div className=\"inline w20\">\r\n                                                                <p>modified At : </p>\r\n                                                                <p>{item.profileDetail.modifiedAt}</p>\r\n                                                            </div>\r\n                                                            <div className=\"inline w20\">\r\n                                                                <p>owed Amount : </p>\r\n                                                                    <p> {new Intl.NumberFormat(\"en-GB\", {\r\n                                                                        style: \"currency\",\r\n                                                                        currency: \"BGN\",\r\n                                                                        maximumFractionDigits: 2\r\n                                                                    }).format(item.profileDetail.owedAmount)}</p>\r\n                                                            </div>\r\n                                                            <div className=\"inline w20\">\r\n                                                                <p>paid Amount : </p>\r\n                                                                    <p>{new Intl.NumberFormat(\"en-GB\", {\r\n                                                                        style: \"currency\",\r\n                                                                        currency: \"BGN\",\r\n                                                                        maximumFractionDigits: 2\r\n                                                                    }).format(item.profileDetail.paidAmount)}</p>\r\n                                                                </div>\r\n                                                                <div className=\"inline wxs\">\r\n                                                                    <p className=\"p-0\">cleared :</p>\r\n                                                                    {item.profileDetail.cleared ? < i class=\"fa fa-check ml-1\" />\r\n                                                                    : < i class=\"fa fa-false ml-1\" />}</div>\r\n                                                            </div>\r\n \r\n                                                        </td>\r\n                                                        {userRole == 'ROLE_Mol' && <td></td>}\r\n                                                        </tr>}\r\n                                                    </>\r\n                                        )}\r\n                                </tbody>                                \r\n                            </table></>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(ListUserProfilesComponent)","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserProfileDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserProfileFilter.jsx",["568","569","570","571","572","573","574","575"],"import { Field, Form, Formik } from 'formik';\r\nimport React, { Component } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\n\r\nclass UserProfileFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            all: props.all,            \r\n           userId: props.userId,\r\n            myProfile: props.myProfile,\r\n            productNames: props.productNames,\r\n            productId: props.productId,\r\n            inventoryNumbers: props.inventoryNumbers,\r\n            filteredInventoryNumbers: props.inventoryNumbers,\r\n            productDetailId: props.productDetailId,\r\n            givenAfter: props.givenAfter,\r\n            returnedBefore: props.returnedBefore,\r\n            prefix: props.prefix,\r\n            userRole: props.userRole,\r\n            current: props.current,\r\n            allUser: props.allUser,\r\n            withDetail: props.withDetail\r\n             }\r\n     \r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n     \r\n    }\r\n\r\n    convertDate(value) {\r\n       return Functions.convertDate(value);\r\n    }\r\n    onSubmit(values) {\r\n       if (this.props.timeline.show) {\r\n           let filter = { \"productDetailId\": values.productDetailId, \"givenAfter\": '', \"returnedBefore\": '' };\r\n           filter.givenAfter = this.convertDate(values.givenAfter);\r\n           filter.returnedBefore = this.convertDate(values.returnedBefore);\r\n           this.props.onSearch(filter);\r\n           return;\r\n        }\r\n\r\n        let path = window.location.pathname;\r\n        let search = this.props.search || window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)      \r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n                if (names[i].filterBy == value || names[i].value == '') {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    resetForm() {\r\n\r\n       if (this.props.onNewSearch) {\r\n            this.props.onNewSearch('');                  \r\n        }\r\n\r\n        else\r\n            window.location.href = window.location.pathname;      \r\n    }\r\n\r\n   \r\n    render() {\r\n       let userNames = this.props.userNames\r\n        let { all,  userId, myProfile, inventoryNumbers, productDetailId, productNames, withDetail,\r\n            productId, givenAfter, returnedBefore, current, allUser, filteredInventoryNumbers} = this.state;\r\n       return (\r\n            <Formik\r\n              enableReinitialize={true}\r\n                initialValues={{\r\n                    all, userNames, userId, myProfile, inventoryNumbers, productDetailId, productNames, withDetail,\r\n                    productId, givenAfter, returnedBefore, filteredInventoryNumbers, current, allUser\r\n                }}\r\n                onSubmit={this.onSubmit}                \r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                             <Field\r\n                                className=\"ml-2 mr-1\" type=\"checkbox\" name=\"current\"\r\n                                value={values.current} checked={values.current}\r\n                                disabled={this.props.timeline.show}\r\n                                onChange={(value) => {                                   \r\n                                    setFieldValue(\"current\", !values.current);                                   \r\n                                }}\r\n                            />  <span className=\"font-weight-bold\">current</span>                           \r\n                            {this.state.userRole == 'ROLE_Mol' &&\r\n                                <div className=\"inline\">\r\n                                    <div className=\"inline ml-3\">\r\n                                        <Field\r\n                                        className=\"mr-1\" type=\"checkbox\" name=\"myProfile\"\r\n                                        value={values.myProfile} checked={values.myProfile}\r\n                                        disabled={this.props.timeline.show}\r\n                                            onChange={(value) => {                                               \r\n                                                setFieldValue(\"myProfile\", !values.myProfile);\r\n                                                setFieldValue(\"userId\", 'undefined');\r\n                                                setFieldValue(\"allUser\", false)\r\n                                            }}\r\n                                    />  <span className=\"font-weight-bold\">my profile</span>\r\n                                    </div>\r\n                                    <div className=\"inline ml-3\">\r\n                                    <Field\r\n                                        className=\"mr-1\" type=\"checkbox\" name=\"allUser\"\r\n                                        value={values.allUser} checked={values.allUser}\r\n                                        disabled={this.props.timeline.show}\r\n                                        onChange={(value) => {\r\n                                           setFieldValue(\"allUser\", !values.allUser);\r\n                                            setFieldValue(\"userId\", 'undefined');\r\n                                            setFieldValue(\"myProfile\", false)\r\n                                        }}\r\n                                        />  <span className=\"font-weight-bold\">users</span>\r\n                                    </div>\r\n                                    <div className=\"inline ml-3\">\r\n                                        <label className=\"font-weight-bold\">user&nbsp;</label>\r\n                                        <CustomSelect\r\n                                            className={\"inline inline-4\"}\r\n                                            items={userNames}\r\n                                            disabled={this.props.timeline.show}\r\n                                            value={values.userId}\r\n                                            onChange={(selected) => {\r\n                                                setFieldValue(\"myProfile\", false);\r\n                                                setFieldValue(\"userId\", selected.value);\r\n                                                setFieldValue(\"allUser\", false)\r\n                                            }}/>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"inline\">\r\n                                <label >product&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={productNames}\r\n                                    disabled={this.props.timeline.show}\r\n                                    value={this.props.timeline.show ? '' : values.productId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"productId\", selected.value);\r\n                                        let subs = values.filteredNames;\r\n                                        subs = this.filter(subs, values.inventoryNumbers, selected.value);\r\n                                        setFieldValue(\"filteredInventoryNumbers\", subs);\r\n                                    }}/>\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >inventory number&nbsp;</label>\r\n                                <CustomSelect\r\n                                   // ref={(x) => { this.productDetailIdRef = x}}\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredInventoryNumbers}\r\n                                    log={true}\r\n                                    value={values.productDetailId == null || values.productDetailId==undefined ?'undefined' : values.productDetailId }\r\n                                    onChange={(selected) => setFieldValue(\"productDetailId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label className=\"mb-1\">timeline&nbsp;</label>\r\n                                <div className=\"inline px-2 border\" style={{borderRadius:\"3px\"}}>\r\n                                    <label className=\"mb-1 fw-s\">given after&nbsp;</label>\r\n                                    <div className=\"inline \">\r\n                                        <DatePicker className=\"form-control in-inline inline-2\"\r\n                                            dateFormat=\"dd MMMM yyyy\"                                           \r\n                                            locale=\"en-GB\"\r\n                                            maxDate={values.returnedBefore && new Date(values.returnedBefore) || (new Date()).setDate((new Date()).getDate() - 1)}\r\n                                            selected={values.givenAfter && new Date(values.givenAfter)}\r\n                                            isClearable\r\n                                            onChange={date => setFieldValue(\"givenAfter\", date)}\r\n                                            shouldCloseOnSelect={true}\r\n                                            showYearDropdown\r\n                                            dropdownMode=\"select\"/>\r\n                                    </div>\r\n                                    <label className=\"pl-1 mb-1 fw-s\">returned before&nbsp;</label>\r\n                                    <DatePicker className=\"form-control in-inline inline-2\"\r\n                                        dateFormat=\"MMMM dd yyyy\"\r\n                                        \r\n                                        locale=\"en-GB\"\r\n                                        minDate={values.givenAfter &&\r\n                                            new Date(values.givenAfter).setDate((new Date(values.givenAfter)).getDate() + 1)}\r\n                                        maxDate={(new Date()).setDate((new Date()).getDate()+1)}\r\n                                        selected={values.returnedBefore && new Date(values.returnedBefore)}\r\n                                        onChange={date => setFieldValue(\"returnedBefore\", date)}\r\n                                        isClearable\r\n                                        highlightDates={new Date()}\r\n                                        shouldCloseOnSelect={true}\r\n                                        showYearDropdown\r\n                                        dropdownMode=\"select\"/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"inline pr-2 mr-2\">\r\n                                <Field\r\n                                    className=\"mr-2 pt-3\" type=\"checkbox\" name=\"withDetail\"\r\n                                    value={true} checked={values.withDetail == true}\r\n                                    onChange={(value) => {\r\n                                        console.log('value of checked = ' + value.target.value);\r\n                                        setFieldValue(\"withDetail\", values.withDetail == true ? null : true);\r\n                                    }}\r\n                                /><label>with owings</label>\r\n                                </div>                           \r\n                            <div className=\"inline\">\r\n                               <button className=\"button px-5\" type=\"submit\" >Search</button>\r\n                               <button className=\"button btn-delete\" type=\"button\" disabled={this.props.timeline.show}\r\n                                   onClick={() => {\r\n                                       this.resetForm();\r\n                                       setFieldValue(\"all\", null);\r\n                                       setFieldValue(\"userId\", null);\r\n                                       setFieldValue(\"myProfile\", null);\r\n                                       setFieldValue(\"productId\", null);\r\n                                       setFieldValue(\"productDetailId\", null);\r\n                                       setFieldValue(\"givenAfter\", null);\r\n                                       setFieldValue(\"returnedBefore\", null);\r\n                                       setFieldValue(\"current\", null);\r\n                                       setFieldValue(\"allUser\", null);\r\n                                       setFieldValue(\"withDetail\", null);                                     \r\n                                   }}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfileFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\InventoryNumberInnerComponent.jsx",["576","577","578","579","580","581","582"],"import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport '../myStyles/Style.css';\r\nimport Function from './Shared/Function'\r\n\r\nclass InventoryNumberInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n            pdUpdateShow: props.pdUpdateShow,\r\n            pdShow: props.pdShow,\r\n            pdmessage: props.pdmessage\r\n            }\r\n    }\r\n\r\n    saveUpdatedPd = () => {\r\n\r\n        let x = this.state.pdUpdateShow.x;\r\n        let y = this.state.pdUpdateShow.y;\r\n        let i = this.state.pdUpdateShow.i;\r\n        \r\n        if (i == undefined) i = this.state.pdShow[x][y].data.length;\r\n        let name = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.name.trim() : null;\r\n        if (this.state.pdUpdateShow.pd == null) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number is required\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (this.state.pdUpdateShow.pd.value &&\r\n            name == this.state.pdShow[x][y].data[i].name) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number hasn't changed\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (name.length == 0) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number can't be empty\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (this.numberExists(name, x, y, i)){\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number already exist's in this delivery\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else {\r\n\r\n            let item = {\r\n                selectItem: {\r\n                    name: this.state.pdUpdateShow.pd.name.trim(), value: this.state.pdUpdateShow.pd.value\r\n                },\r\n                deliveryDetailId: this.state.pdUpdateShow.ddid != null ? this.state.pdUpdateShow.ddid:null\r\n            }\r\n            ProductDetailDataService.updateNumber(item)\r\n                .then(response => {\r\n                    this.props.updatePdChildClicked(null);\r\n                    let pdshow = this.state.pdShow;\r\n\r\n                    if (this.state.pdUpdateShow.i == undefined) {\r\n                        let list = pdshow[x][y].data;\r\n                        list.push({ value: response.data, name: item.selectItem.name });\r\n                        pdshow[x][y].data = list\r\n                    }else\r\n                        pdshow[x][y].data[i].name = item.selectItem.name;\r\n\r\n                    let pdmessages = this.state.pdmessage;\r\n                    if (pdmessages[x] == null) pdmessages[x] = [];\r\n                    pdmessages[x][y] = `Update successful`;\r\n\r\n                    this.props.setpdShow(pdshow);\r\n                    this.props.setpdMessage(pdmessages);\r\n                    if (this.state.pdUpdateShow.i == undefined) this.props.refresh()\r\n                    \r\n                }).catch(error => {                   \r\n                    let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.pdUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ pdUpdateShow: show })                   \r\n                })\r\n        }\r\n    }\r\n\r\n    numberExists = (name, x, y, i) => {\r\n        let pdshow = this.state.pdShow;\r\n        let productNums = pdshow[x][y].data;\r\n        for (let j = 0; j < productNums.length; j++) {\r\n            if (j == i) continue\r\n            if (name == productNums[j].name)               \r\n                return true           \r\n        }  \r\n        return false\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.pdUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.pdUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"50%\", height: \"48%\" }}>\r\n                <span class=\"close\" onClick={() => this.props.updatePdChildClicked(null)}>&times;</span>\r\n                <h2>update inventory number </h2>\r\n                    {this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.pdUpdateShow.error}\r\n                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                        onClick={() => {\r\n                            let show = this.state.pdUpdateShow;\r\n                            show.error = '';\r\n                            this.setState({ pdUpdateShow: show })\r\n                        }}>\r\n                    </i>\r\n                    </div>}\r\n                    <h6 className={this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>number : </h6>\r\n                    <input type=\"text\" className = \"form-control\" value={this.state.pdUpdateShow.pd && this.state.pdUpdateShow.pd.name} onChange={(value) => {\r\n                        let show = this.state.pdUpdateShow;\r\n                        if (show.pd == null) show.pd = {};\r\n                    show.pd.name = value.target.value;\r\n                    this.setState({ pdUpdateShow: show })\r\n                }} />\r\n                <button className=\"btn btn-mybtn p-x-5 \" onClick={this.saveUpdatedPd}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5 \" onClick={() => this.props.updatePdChildClicked(null)}>Cancel</button> \r\n                </div>\r\n                </>\r\n            )\r\n    }\r\n\r\n}\r\nexport default InventoryNumberInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeliveryInnerComponent.jsx",["583","584"],"import React, { Component } from 'react';\r\nimport DeliveryDataService from '../service/DeliveryDataService';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\nclass DeliveryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n                deliveryUpdateShow: props.deliveryUpdateShow,\r\n                items: props.items,\r\n                message: props.message,\r\n                suppliers: props.suppliers\r\n            }\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        let x = this.state.deliveryUpdateShow.x;\r\n        let items = this.state.items;\r\n        let item = items[x];\r\n\r\n        let show = this.state.deliveryUpdateShow;\r\n        let supplierId = show.delivery.supplierId;\r\n        let date = show.delivery.date;      \r\n\r\n        if (!date || !supplierId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else if (supplierId == item.supplierId && this.isDateEqual(date, item.date)) {\r\n            show.error = \"delivery hasn't changed\";\r\n            this.setState({ deliveryUpdateShow: show })\r\n        } else {\r\n           \r\n            let item = show.delivery;\r\n            DeliveryDataService.save(item)\r\n                .then((response) => {\r\n                    items[x] = item;\r\n                    this.props.setItems(items);\r\n                    this.props.updateClickedInner(null);\r\n                    let msg = this.state.message;\r\n                    msg = \"update successful\";\r\n                    this.props.setMessage(msg);\r\n                 }).catch((error) => {\r\n                    let msg = Function.getErrorMsg(error);\r\n                     show.error = msg;\r\n                    this.setState({ deliveryUpdateShow: show })\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    isDateEqual = (date1, date2) => {\r\n       \r\n        if (typeof date1 === 'string' && date1 == date2) return true\r\n        else {\r\n            date1 = new Date(date1);\r\n            date2 = new Date(date2);\r\n            if (date1.getFullYear() === date2.getFullYear() &&\r\n                date1.getMonth() === date2.getMonth() &&\r\n                date1.getDate() === date2.getDate())\r\n                return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    onDateChanged = (date) => {\r\n        let deliveryUpdateShow = this.state.deliveryUpdateShow;\r\n        deliveryUpdateShow.delivery.date = date;\r\n        this.setState({\r\n            deliveryUpdateShow: deliveryUpdateShow\r\n        })\r\n    }\r\n\r\n    onSupplierChange = (selected) => {\r\n        let deliveryUpdateShow = this.state.deliveryUpdateShow;\r\n        deliveryUpdateShow.delivery.supplierId = selected.value;\r\n        deliveryUpdateShow.delivery.supplierName = selected.label;\r\n        this.setState({\r\n            deliveryUpdateShow: deliveryUpdateShow\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.deliveryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.deliveryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"50%\", height:\"73%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>update delivery </h2>\r\n                    {this.state.deliveryUpdateShow.error && this.state.deliveryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.deliveryUpdateShow.error}\r\n                        <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                            onClick={() => {\r\n                                let show = this.state.deliveryUpdateShow;\r\n                                show.error = '';\r\n                                this.setState({ deliveryUpdateShow: show })\r\n                            }}>\r\n                        </i>\r\n                    </div>}\r\n                    <h6 className={this.state.deliveryUpdateShow.error &&\r\n                        this.state.deliveryUpdateShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>number :</h6>\r\n                    <input value={this.state.deliveryUpdateShow.delivery.number} disabled />\r\n                    <h6 className=\"ml-5\">date :</h6>\r\n                    <div>\r\n                    <DatePicker\r\n                        className=\"form-control\"                            \r\n                        dateFormat=\"dd MMMM yyyy\"\r\n                        locale=\"en-GB\"\r\n                        selected={(this.state.deliveryUpdateShow.delivery.date && new Date(this.state.deliveryUpdateShow.delivery.date)) }\r\n                        onChange={date => { this.onDateChanged(date);}} />\r\n                    </div>\r\n                    <h6 className=\"ml-5\">supplier :</h6>                    \r\n                    <CustomSelect\r\n                        items={this.state.suppliers}\r\n                        value={this.state.deliveryUpdateShow.delivery.supplierId}\r\n                        onChange={(selected) => this.onSupplierChange(selected)}\r\n                        />\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeliveryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DDInnerComponent.jsx",["585","586","587","588","589","590","591"],"import React, { Component } from 'react';\r\nimport DeliveryDetailDataService from '../service/DeliveryDetailDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\nclass DDInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n            ddUpdateShow: props.ddUpdateShow ,\r\n                items: props.items,\r\n                products: props.products,\r\n            ddmessage: props.ddmessage,\r\n            producterror: null,\r\n            productNums: [],\r\n            numErrors:null,\r\n            quantity:0\r\n            }\r\n    }\r\n\r\n   \r\n    saveUpdateddd = () => {\r\n        let show = this.state.ddUpdateShow;\r\n        if (this.state.producterror != null) {            \r\n            return\r\n        }\r\n        let x = this.state.ddUpdateShow.x;\r\n        let y = this.state.ddUpdateShow.y;\r\n        let items = this.state.items;\r\n        let item = items[x].deliveryDetails[y];\r\n        let productNums = this.state.productNums;\r\n        \r\n        let productId = (show.dd && show.dd.productId)||null;\r\n        let price = (show.dd && show.dd.pricePerOne)||null;\r\n\r\n        let isError = false;\r\n        if (!price || !productId) {\r\n            show.error = \"required fields can't be empty !!!\";\r\n            this.setState({ ddUpdateShow: show });\r\n            isError=true\r\n        } else if (item && productId == item.productId && price == item.pricePerOne) {\r\n            show.error = \"delivery detail hasn't changed\";\r\n            this.setState({ ddUpdateShow: show });\r\n            isError = true\r\n        } else if (productNums.length < 0) {\r\n            show.error = \"delivery detail must have inventories !!!\";\r\n            this.setState({ ddUpdateShow: show });\r\n            isError = true\r\n        } else if (productNums.length > 0) {\r\n            let numErrors = this.state.numErrors;\r\n            numErrors = [];\r\n            for (let i = 0; i < productNums.length; i++) {\r\n                if (productNums[i].name.length < 1) {\r\n                    numErrors[i] = 'required field !!!'; \r\n                    isError = true\r\n                }\r\n                else if (productNums[i].name.length < 4) {\r\n                    numErrors[i] = 'too short !!!';\r\n                    isError = true\r\n                }\r\n                else {                    \r\n                    for (let j = 0; j < i; j++) {\r\n                        if (productNums[i].name == productNums[j].name) {\r\n                            numErrors[i] = 'same number exists !!!';\r\n                            isError = true\r\n                        }\r\n                    }                    \r\n                }\r\n            }\r\n            this.setState({ numErrors: numErrors })\r\n        }\r\n        if (!isError){\r\n            let item = show.dd;\r\n            item.deliveryId = items[x].id;\r\n            item.productNums = productNums;\r\n            DeliveryDetailDataService.save(item)\r\n                .then((response) => {\r\n                     item.id = item.id || response.data;\r\n                    item.quantity = this.state.quantity;\r\n                    y = (y || items[x].deliveryDetails.length );\r\n                    \r\n                    items[x].deliveryDetails[y] = item;\r\n                    let total = 0;\r\n                    items[x].deliveryDetails.map(i => total = total + (i.pricePerOne * i.quantity));\r\n                    items[x].total = items[x].deliveryDetails.map(i => i.pricePerOne * i.quantity)\r\n                   \r\n                    this.props.setItems(items);\r\n                    this.props.updateChildClicked(null);\r\n                    let msg = this.state.ddmessage;\r\n                    msg[x] = \"update successful\";\r\n                    this.props.setddMessage(msg);\r\n                   \r\n                }).catch((error) => {\r\n                    show.error = \"errors occured : \" + error + \" !!!\";\r\n                    this.setState({\r\n                        ddUpdateShow: show,\r\n                        numErrors: error.response.data\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    isProductPresent = (value) => {\r\n        let isPresent = false;\r\n\r\n        let x = this.state.ddUpdateShow.x;\r\n        let y = this.state.ddUpdateShow.y;\r\n        let items = this.state.items;        \r\n        let dds = items[x].deliveryDetails;\r\n\r\n        dds.map((dd, i) => {\r\n            if ((y != null && y != i && dd.productId == value) || (y == null && dd.productId == value) )\r\n                isPresent = true\r\n        });\r\n\r\n        return isPresent\r\n    }\r\n\r\n    onProductChange = (selected) => {               \r\n        let ddUpdateShow = this.state.ddUpdateShow;\r\n        if (ddUpdateShow.dd == null) ddUpdateShow.dd = {}\r\n        ddUpdateShow.dd.productId = selected.value;\r\n        ddUpdateShow.dd.productName = selected.label;\r\n        this.setState({\r\n            ddUpdateShow: ddUpdateShow,\r\n            producterror: this.isProductPresent(selected.value) ? 'product already exist in this delivery !!!' : null\r\n        })\r\n    }\r\n\r\n    onAddQuantity() {\r\n        const productNums = this.state.productNums;\r\n        let quantity = this.state.quantity +1;        \r\n        productNums.push({ value: '', name: '' });\r\n        this.setState({\r\n            productNums: productNums,\r\n            quantity: quantity\r\n        })    \r\n    }\r\n\r\n    onChangeProductNums(e, i) {\r\n        let productNums = this.state.productNums || [];        \r\n        productNums[i].name = e.target.value;\r\n        this.setState({ productNums: productNums })\r\n    }\r\n\r\n    deleteNums(i) {\r\n        let list = this.state.productNums;\r\n        list.splice(i, 1);\r\n        let quantity = this.state.quantity - 1; \r\n        this.setState({\r\n            productNums: list,\r\n            quantity: quantity\r\n        })  \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>               \r\n                <div className={this.state.ddUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.ddUpdateShow.show ? \"modal d-block\" : \"d-none\"}\r\n                    style={{ width: !this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id ? \"85%\" : \"50%\" , height: \"60%\" }}>\r\n                    <span class=\"close pt-3\" onClick={() => this.props.updateChildClicked(null)}>&times;</span>\r\n                    <h2>{this.state.ddUpdateShow.dd ? \"update\" : \"add\"} delivery detail </h2>                    \r\n                    <div className=\"d-flex align-items-top  mb-3\">\r\n                    <div className={\r\n                            (!this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id) ? \"inline w40\" : \"\"}>\r\n                            {this.state.ddUpdateShow.error && this.state.ddUpdateShow.error.length > 1 &&\r\n                                <div className=\"alert alert-warning d-flex\">{this.state.ddUpdateShow.error}\r\n                                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                        onClick={() => {\r\n                                            let show = this.state.ddUpdateShow;\r\n                                            show.error = '';\r\n                                            this.setState({ ddUpdateShow: show })\r\n                                        }}>\r\n                                    </i>\r\n                                </div>}\r\n                    <h6 className={this.state.ddUpdateShow.error && this.state.ddUpdateShow.error.length > 1 ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>product : </h6>\r\n                    <CustomSelect\r\n                        className={(!this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id) ?\r\n                                 \"w90\" : this.state.producterror ? \"mb-0\" : \"\"}\r\n                        items={this.state.products}\r\n                        value={(this.state.ddUpdateShow.dd && this.state.ddUpdateShow.dd.productId)}                        \r\n                        onChange={(selected) => this.onProductChange(selected)}\r\n                    />\r\n                    {this.state.producterror &&\r\n                        <div className=\"alert alert-warning d-flex in-error\">{this.state.producterror}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                            onClick={() => {\r\n                                let err = this.state.producterror;\r\n                                err = null;\r\n                                this.setState({ producterror: err })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className=\"ml-5\">price per one :</h6>\r\n                            <input type=\"number\" className=\"form-control\"\r\n                                value={this.state.ddUpdateShow.dd ? this.state.ddUpdateShow.dd.pricePerOne : ''} min=\"0\" onChange={(value) => {\r\n                        let show = this.state.ddUpdateShow;\r\n                        if (show.dd == null) show.dd = {}\r\n                        show.dd.pricePerOne = value.target.value;\r\n                        this.setState({ ddUpdateShow: show })\r\n                        }} />\r\n                        <button className=\"btn btn-mybtn p-x-5 ml-5\" onClick={this.saveUpdateddd}>Save</button>\r\n                        <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" onClick={() => this.props.updateChildClicked(null)}>Cancel</button>\r\n                    </div>\r\n                    {(!this.state.ddUpdateShow.dd || !this.state.ddUpdateShow.dd.id) &&\r\n                            <div className=\"w60 scrollable500\">                            \r\n                            <button className=\"btn btn-mybtn px-5 ml-5 mt-1 mb-1\"\r\n                                onClick={() => { this.onAddQuantity() }}>Add inventory&nbsp;\r\n                                <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i></button>\r\n                            {this.state.productNums.map((num, i) =>\r\n                                        <div key={i} className=\"ml-1\" >\r\n                                        <label>number {i + 1} :&nbsp;</label>\r\n                                        <input\r\n                                            value={this.state.productNums[i].name}\r\n                                            type=\"text\"\r\n                                            className={'form-control inline w60 m-0 p-1'}\r\n                                            onChange={e => { this.onChangeProductNums(e, i) }} />\r\n                                        {<button className=\"btn btn-mybtn btn-delete m-0 ml-1\" type=\"button\"\r\n                                            onClick={() => {\r\n                                                this.deleteNums(i)\r\n                                            }}>Delete</button>\r\n                                        }\r\n                                        {\r\n                                            this.state.numErrors && this.state.numErrors instanceof Array\r\n                                            && this.state.numErrors[i] &&\r\n                                            <div className=\"alert alert-warning d-inline ml-1\">\r\n                                                {this.state.numErrors[i]}\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                )}\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default DDInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\DeliveryDetailDataService.js",[],["592","593"],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ProductDetailInnerComponent.jsx",["594","595","596","597","598","599","600","601","602"],"import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport '../myStyles/Style.css';\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport Function from './Shared/Function'\r\n\r\nclass ProductDetailInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n                pdUpdateShow: props.pdUpdateShow,               \r\n                message: props.message,\r\n                filter: props.filter,                \r\n            }\r\n         }\r\n\r\n    saveUpdatedPd = () => {\r\n\r\n        let x = this.state.pdUpdateShow.x; \r\n        let number = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.inventoryNumber.trim() : null;\r\n        let econdition = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.econdition : null;\r\n        let discarded = this.state.pdUpdateShow.pd ? this.state.pdUpdateShow.pd.discarded : null;\r\n\r\n        let previousItem = this.props.items[x];\r\n\r\n        if (number == null || econdition == null || discarded == null) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (number.length == 0) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"number can't be empty\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (number == previousItem.inventoryNumber && econdition == previousItem.econdition && discarded == previousItem.discarded) {\r\n            let show = this.state.pdUpdateShow;\r\n            show.error = \"item hasn't changed\";\r\n            this.setState({ pdUpdateShow: show })\r\n        }   else {\r\n            let item = {\r\n                inventoryNumber: number, econdition: econdition, discarded: discarded,\r\n                id: this.state.pdUpdateShow.pd.id, deliveryDetailId: this.state.pdUpdateShow.pd.deliveryDetailId                             \r\n            }\r\n          \r\n            ProductDetailDataService.save(item)\r\n                .then(response => {                   \r\n                    let items = this.props.items;\r\n                    items[x].inventoryNumber = number;\r\n                    items[x].econdition = econdition;\r\n                    items[x].discarded = discarded;\r\n\r\n                   this.props.updateClicked(null);\r\n                    let message = this.state.message;                   \r\n                    message = `Update successful`;\r\n                    this.props.setItems(items);\r\n                    this.props.setMessage(message);                   \r\n\r\n                }).catch(error => { \r\n                    let errormsg = Function.getErrorMsg(error);\r\n                    let show = this.state.pdUpdateShow;\r\n                    show.error = errormsg;\r\n                    this.setState({ pdUpdateShow: show })                    \r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    onNumberChange = (value) => {\r\n        let show = this.state.pdUpdateShow;\r\n        if (show.pd == null) show.pd = {};\r\n        show.pd.inventoryNumber = value.target.value;\r\n        show.error = null;\r\n        this.setState({ pdUpdateShow: show })\r\n    }\r\n\r\n    onConditionChange = (value) => {\r\n        let show = this.state.pdUpdateShow;\r\n        if (show.pd == null) show.pd = {};\r\n        show.pd.econdition = value.target.value;\r\n        show.error = null;\r\n        this.setState({\r\n            pdUpdateShow: show,\r\n            })\r\n         }\r\n\r\n    onDiscardedChange = (value) => {       \r\n        let show = this.state.pdUpdateShow;\r\n        if (show.pd == null) show.pd = {};\r\n        show.pd.discarded = (value.target.value == 'true');\r\n        show.error = null;\r\n        this.setState({ pdUpdateShow: show })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.pdUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.pdUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"60%\", height: \"65%\", overflow:\"auto\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClicked(null)}>&times;</span>\r\n                    <h2>update inventory</h2>\r\n                    {this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.pdUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.pdUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ pdUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className={this.state.pdUpdateShow.error && this.state.pdUpdateShow.error.length > 1 ? \"ml-5\" : \"mt-5 ml-5\"}>number : </h6>\r\n                    <input type=\"text\" className=\"form-control\" value={this.state.pdUpdateShow.pd && this.state.pdUpdateShow.pd.inventoryNumber}\r\n                        onChange={(value) => {\r\n                            this.onNumberChange(value)                       \r\n                    }} />                   \r\n                    <div className=\"  mt-3 inline w50\">\r\n                        <h6 className=\"pl-5\">condition :</h6>\r\n                        <div className=\"pl-4\">\r\n                        {this.state.filter && this.state.filter.econditions && this.state.filter.econditions.map( (condition) => \r\n                            <>\r\n                            <input\r\n                                className=\"\" type=\"checkbox\"\r\n                                    value={condition.value} checked={this.state.pdUpdateShow.pd.econdition == condition.value}\r\n                                    onChange={(value) => {\r\n                                        this.onConditionChange(value)\r\n                                    }}\r\n                                /> <span className=\"pl-1\" >{condition.name}</span></>\r\n                            )}\r\n                        </div>                       \r\n                    </div>\r\n                    {  <div className=\"pr-2 mr-2 mt-3 inline w40\">\r\n                        <h6 className=\" px-5\">discarded :</h6>\r\n                        <input\r\n                            className=\"\" type=\"checkbox\"\r\n                            value={true} checked={this.state.pdUpdateShow.pd.discarded == true}\r\n                            onChange={(value) => {\r\n                                this.onDiscardedChange(value)\r\n                                 }}\r\n                        /><span className=\"pl-1\" >Discarded</span>\r\n                        <input\r\n                            className=\"\" type=\"checkbox\" \r\n                            value={false} checked={this.state.pdUpdateShow.pd.discarded == false}\r\n                            onChange={(value) => {\r\n                                this.onDiscardedChange(value)\r\n                                }}\r\n                        /><span className=\"pl-1\" >Alive</span>\r\n                    </div>}                   \r\n                    <div>\r\n                        <button className=\"btn btn-mybtn p-x-5 \" onClick={this.saveUpdatedPd}>Save</button>\r\n                        <button className=\"btn btn-mybtn btn-delete px-5 \" onClick={() => this.props.updateClicked(null)}>Cancel</button></div>\r\n                    <p style={{ fontSize: \"80%\" }}>ps : to update price or date you must visit the origin of the <Link\r\n                        to={`/deliveries?Filter.number=${this.state.pdUpdateShow.pd.deliveryNumber}&deliveryView=DeliveryDetailView`}>delivery</Link> </p>\r\n                </div>                \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default ProductDetailInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserProfileInnerComponent.jsx",["603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621"],"import React, { Component } from 'react';\r\nimport ProductDetailDataService from '../service/ProductDetailDataService';\r\nimport UserProfileDataService from '../service/UserProfileDataService'\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass UserProfileInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                profileShow: props.profileShow,\r\n                items: props.items,\r\n                message: props.message,\r\n                 filter: props.filter,               \r\n                filteredNumbers: [],\r\n                lastSearch: '?freeInventory=true&isDiscarded=false&econdition=Available',            \r\n                selectedDate: null,\r\n                filteredcount: '',\r\n                selectedPds: [],\r\n                changedPd: null,\r\n                ChangedUser: null,\r\n                freeInventory: true,\r\n                notDiscarded: true,\r\n                available: true,\r\n                withUser: !(props.filter.userId == null || props.filter.userId == undefined || props.filter.userId == 'undefined'),\r\n            }\r\n        this.refresh = this.refresh.bind(this)\r\n    }\r\n\r\n    componentDidMount() {     \r\n        if (this.state.profileShow.x) return;\r\n        ProductDetailDataService.retrieveAllNumbers(this.state.lastSearch)\r\n            .then(response => {              \r\n                this.setState({\r\n                    filteredNumbers: response.data,\r\n                    filteredcount: response.data.length\r\n                })\r\n\r\n                if (this.state.profileShow.x == null && this.state.filter.productDetailId) {\r\n                    let selected = this.getFilteredInventoty();                   \r\n                    if (selected == null || selected == 'undefined') return;\r\n                    let show = this.state.profileShow;\r\n                    show.profile.inventoryNumber = selected ? selected.name : '';\r\n                    show.profile.productDetailId = selected ? selected.value : null;\r\n                    this.setState({ profileShow: show })                   \r\n                }\r\n            }).catch(() => { })\r\n    }\r\n\r\n    getFilteredInventoty() {//original\r\n        let filteredInventory = (this.state.filter.productDetailId && this.state.filteredNumbers.length>0) ?           \r\n            this.state.filteredNumbers.find(f => f.value == this.state.filter.productDetailId)\r\n            : null;\r\n        return filteredInventory\r\n    }\r\n\r\n    getFilteredUser() {//original\r\n        let x = this.state.profileShow.x;\r\n        let filteredUser = x != null ?\r\n            { \"value\": this.state.items[x].userId, \"label\": this.state.items[x].userName }\r\n            : (this.state.filter.userId) ? this.state.filter.userNames.find(n => n.value == this.state.filter.userId)\r\n            : null;\r\n        return filteredUser\r\n    }\r\n\r\n    refresh(search) {\r\n        ProductDetailDataService.retrieveAllNumbers(search)\r\n            .then(response => {\r\n                this.setState({\r\n                    filteredNumbers: response.data,\r\n                    filteredcount: response.data.length\r\n                })\r\n            }).catch(() => { })\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        let pdlist = this.state.selectedPds;\r\n        let show = this.state.profileShow;\r\n        let withUser = this.state.withUser;\r\n        let item = show.profile;\r\n        let x = this.state.profileShow.x;\r\n        let original = x != null ? this.state.items[x] : null;\r\n       \r\n        if (x==null && withUser && pdlist.length < 1) {\r\n            show.error = 'must at least select 1 inventory !!!'\r\n            this.setState({ profileShow: show })\r\n        }\r\n        else if (!item.userId || item.userId == 'undefined') {\r\n            show.error = 'user not selected !!!'\r\n            this.setState({ profileShow: show })\r\n        }\r\n        else if (x == null && !withUser  && (!item.inventoryNumber || item.inventoryNumber == \"undefined\" || item.inventoryNumber.trim().length < 1)) {\r\n            show.error = \"inventory not selected !!!\";\r\n            this.setState({ profileShow: show })\r\n        }\r\n        else if (!withUser && x != null && original == null) {\r\n            show.error = \"original item not found !!!\";\r\n            this.setState({ profileShow: show })\r\n        } else if ( x != null && original.userId == item.userId && original.productDetailId == item.productDetailId &&\r\n            ( (!item.profileDetail && !original.profileDetail) || (item.profileDetail && (item.paidPlus == 0 || item.paidPlus == undefined)))) {\r\n            show.error = \"item hasn't changed !!!\";\r\n            this.setState({ profileShow: show })\r\n        }      \r\n        else {         \r\n            let date = (item.givenAt && new Date(item.givenAt)) || new Date();\r\n           date.setHours(date.getHours() - date.getTimezoneOffset() / 60);          \r\n            item.givenAt = date;\r\n            if (x == null && withUser) {\r\n                let ids = [];                \r\n                pdlist.map(pd => ids.push(pd.value));                \r\n                item.productDetailIds = ids;\r\n               }\r\n          UserProfileDataService.save(item).then(\r\n                response => {\r\n                    let msg = \r\n                        pdlist && pdlist.length > 0 ? '' + pdlist.length + ' items have been given to ' + this.state.profileShow.profile.userName + \"'s \" :\r\n                            this.state.profileShow.profile.userName + \"'s profile has been updated successfully \";\r\n                    this.props.updateClicked();\r\n                    this.props.refresh();\r\n                    this.props.setMessage(msg);                  \r\n                }).catch(error => {\r\n                    let msg = Function.getErrorMsg(error);                  \r\n                    show.error = 'error : ' + msg;\r\n                    this.setState({ profileShow: show })\r\n                   this.showError();                    \r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    showError(msg) {\r\n        let time = 8;      \r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                let show = this.state.profileShow;\r\n                show.error = null;\r\n                this.setState({\r\n                    profileShow: show\r\n                })\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    onProductChange = (selected) => {\r\n        this.setState({ selectedProductId: selected.value })\r\n        this.getNewSearch('productId', selected.value);\r\n    }\r\n\r\n    onFilterfreeInventoryChange(value) {\r\n        let freeInventory = this.state.freeInventory;\r\n        freeInventory = !freeInventory;\r\n        this.setState({ freeInventory: freeInventory })\r\n        this.getNewSearch('freeInventory', value.target.value);\r\n    }\r\n\r\n    onFilteravailableChange(value) {\r\n        let available = this.state.available;\r\n        this.setState({ available: !available })\r\n        this.getNewSearch('isAvailable', value.target.value);\r\n    }\r\n    onFilternotDiscardedChange(value) {\r\n        let discarded = this.state.notDiscarded;\r\n        this.setState({ notDiscarded: !discarded })\r\n        this.getNewSearch('isDiscarded', value.target.value);\r\n    }\r\n\r\n    getNewSearch = (name, value) => {\r\n        let search = this.state.lastSearch;\r\n        let newPath = ``;\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n                if (!searchItems[i].startsWith(name))\r\n                    newPath += searchItems[i] + '&'               \r\n            }\r\n        }\r\n        if (value && value != 'undefined')\r\n            newPath += name + '=' + value;\r\n        else {\r\n            if (name == 'notIn') {\r\n                let ids = ''\r\n                this.state.selectedPds.map(pd => ids += pd.value + ',')\r\n                ids = ids.substring(0, ids.length - 1);\r\n                newPath+= name+'='+ids\r\n            }\r\n            else\r\n                newPath = newPath.substring(0, newPath.length - 1);\r\n        }\r\n         newPath = '?' + newPath\r\n        this.setState({ lastSearch: newPath })\r\n        this.refresh(newPath)\r\n\r\n    }\r\n    oninventoryAdd = (selected) => {\r\n        if (selected == null) return;\r\n        if (selected.name == '') return;\r\n        if (this.state.profileShow.x == null && this.state.withUser) {\r\n            let selectedPds = this.state.selectedPds;\r\n            selectedPds.push({ name: selected.label, value: selected.value });\r\n            this.setState({ selectedPds: selectedPds })\r\n            this.getNewSearch('notIn')\r\n        } else {\r\n            let up = this.state.profileShow;\r\n            up.profile.inventoryNumber = selected.label;\r\n            up.profile.productDetailId = selected.value;\r\n            this.setState({\r\n                profileShow: up,\r\n                changedPd:true\r\n            })\r\n        }\r\n    }\r\n\r\n    onUserChange(selected) {\r\n        let up = this.state.profileShow;\r\n        let x = up.x;\r\n        if (x == null || x < 0) {\r\n            let found = this.state.filter.userNames.find(n => n.value == selected.value);\r\n            if (found && found.filterBy) {\r\n                up.error = \"user is deleted, can't assign him new inventories !!! \";\r\n                this.setState({ profileShow: up })\r\n                this.showError();\r\n                return;\r\n            }\r\n        }\r\n        up.profile.userName = selected.label;\r\n        up.profile.userId = selected.value;\r\n        this.setState({\r\n            profileShow: up,\r\n            changedUser: true\r\n        })\r\n    }\r\n\r\n    returnOriginalPd() {\r\n        let up = this.state.profileShow;\r\n        let original = this.getFilteredInventoty()\r\n        up.profile.inventoryNumber = original == null ? '' : original.name;\r\n        up.profile.productDetailId = original == null ? null : original.value;\r\n        this.setState({\r\n            profileShow: up,\r\n            changedPd:null\r\n        })\r\n    }\r\n\r\n    returnOriginalUser() {\r\n        let up = this.state.profileShow;\r\n        let original = this.getFilteredUser()\r\n        up.profile.userId = (original == null) ? null : original.value;\r\n        up.profile.userName = (original == null) ? '...' : original.label;\r\n        this.setState({\r\n            profileShow: up,\r\n            changedUser: null\r\n        })\r\n    }\r\n\r\n    oninventoryRemove (i) {\r\n        let selectedPds = this.state.selectedPds;\r\n        selectedPds.splice(i, 1);\r\n        this.setState({ selectedPds: selectedPds })\r\n        this.getNewSearch('notIn')\r\n    }\r\n\r\n    onFilterDateChange = (date) => {\r\n       if (this.isDateEqual(this.state.selectedDate, date)) return; \r\n       if(date) {\r\n            date = date.toISOString();\r\n            date = date.substring(0, date.indexOf('T'))\r\n        }        \r\n        this.setState({ selectedDate: date });\r\n        this.getNewSearch('dateCreatedAfter', date);      \r\n        \r\n    }\r\n\r\n    onDateGivenChange = (date) => {\r\n        let profileShow = this.state.profileShow;\r\n        profileShow.profile.givenAt = date;\r\n        this.setState({\r\n            profileShow: profileShow\r\n        })\r\n    }\r\n    onDateReturnedChange = (date) => {\r\n        let profileShow = this.state.profileShow;\r\n        profileShow.profile.returnedAt = date;\r\n        this.setState({\r\n            profileShow: profileShow\r\n        })\r\n    }\r\n\r\n    isDateEqual = (date1, date2) => {\r\n        if (date1 == date2) return true       \r\n        else {\r\n            date1 = new Date(date1);\r\n            date2 = new Date(date2);           \r\n            if (date1.getFullYear() === date2.getFullYear() &&\r\n                date1.getMonth() === date2.getMonth() &&\r\n                date1.getDate() === date2.getDate())\r\n                return true\r\n        }\r\n        return false\r\n    }\r\n    \r\n\r\n    render() {\r\n     let height = (this.state.profileShow.x == null) ? \"70%\" : this.state.profileShow.profile.profileDetail ? \"65%\" : \"52%\";\r\n        return (\r\n            <>               \r\n                <div className={this.state.profileShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.profileShow.show ? \"modal d-block \" : \"d-none\"} style={{ width: \"80%\", height: height , overflow: \"visible\" }} >\r\n\r\n                    <div className=\"\">\r\n                        <span class=\"close pt-2\" onClick={() => this.props.updateClicked(null)}>&times;</span>\r\n                        <h3 className=\"inline pt-3 pl-3 pb-1\">{this.state.profileShow.x != null ? 'Update ' : 'Add '}\r\n                            profile &emsp;({this.state.profileShow.profile.userName})</h3>\r\n                        {this.state.profileShow.x == null && \r\n                            <div className=\"inline pull-right mt-5 mr-5 move-top top-c\">\r\n                                <div className=\"mr-5\">\r\n                            <label className=\"\">\r\n                                    <input className=\"m-0\" type=\"radio\" value={!this.state.freeInventory}\r\n                                        checked={this.state.freeInventory}                                    \r\n                                    />\r\n                                    <span style={{ fontSize: \"80%\", paddingLeft: \"3px\", marginRight: \"10px\" }}>free inventory</span></label>\r\n                            <label className=\"\">\r\n                                <input className=\"m-0\" type=\"radio\" value={!this.state.available}\r\n                                    checked={this.state.available}                                   \r\n                                    />\r\n                                    <span style={{ fontSize: \"80%\", paddingLeft: \"3px\", marginRight: \"10px\" }}>available</span></label>                \r\n                            <label className=\"mr-5\">\r\n                                <input className=\"m-0\" type=\"radio\" value={!this.state.notDiscarded}\r\n                                    checked={this.state.notDiscarded}\r\n                                   />\r\n                                    <span style={{ fontSize: \"80%\", paddingLeft: \"3px\", marginRight: \"10px\" }}>not discarded</span></label>\r\n                            </div>\r\n                        </div>\r\n                        }                        \r\n                    </div>\r\n                    {this.state.profileShow.x == null &&\r\n                        <div className=\"mt-0 inline w100\">\r\n                            <div className=\"border pt-1 b-r r-c foo\"> {/*********************** small filter **************************/}\r\n                                <label className=\"move-top top-l\" style={{ fontSize: \"80%\" }}>filter for inventory select</label>\r\n                            <div className=\"inline w40 pr-1\">\r\n                                <h6 className=\"ml-1 pl-1\">product </h6>\r\n                                    <CustomSelect\r\n                                        className={\"inline w100 ml-0\"}\r\n                                    items={this.state.filter.productNames}\r\n                                    value={this.state.selectedProductId}\r\n                                        onChange={(selected) => this.onProductChange(selected)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"inline w20\">\r\n                                <h6 className=\"ml-1 pl-1\">created after</h6>\r\n                                    <div className=\"inline w100\">\r\n                                        <DatePicker\r\n                                            className=\"form-control w100 p-2 ml-0\"\r\n                                            dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        maxDate={new Date()}\r\n                                            isClearable\r\n                                            placeholderText=\"...\"\r\n                                            selected={this.state.selectedDate && new Date(this.state.selectedDate) || null}\r\n                                            onChange={selected => {\r\n                                                this.onFilterDateChange(selected)\r\n                                            }} />\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"move-top top-r\" style={{ fontSize: \"80%\" }}> {this.state.filteredcount} items found</span>\r\n                                <div className=\"inline w40\">\r\n                                    <h6 className=\"inline ml-1 pl-1\">select inventory&nbsp;</h6>\r\n                                    <CustomSelect\r\n                                        className={\"inline w100 ml-0\"}\r\n                                        items={this.state.filteredNumbers}\r\n                                        onChange={(selected) => this.oninventoryAdd(selected)}\r\n                                    />\r\n                                </div>\r\n                        </div>\r\n                    </div>\r\n                        }                  \r\n                    {/*******************    filter over  ******************/}\r\n\r\n                    {this.state.profileShow.error && this.state.profileShow.error.length > 1 && // error div\r\n                        <div className=\"alert alert-warning d-flex mx-1\">{this.state.profileShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.profileShow;\r\n                                    show.error = '';\r\n                                    this.setState({ profileShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>\r\n                    }\r\n                    {/***************  form  ********************/}\r\n                    <div className={this.state.profileShow.error && this.state.profileShow.error.length > 1 ?\r\n                        \"d-flex align-items-top flex-wrap\" : \"mt-5 d-flex align-items-top flex-wrap\"}>\r\n\r\n                        <div className=\"inline w40 m-0 \">{/*************** form right **************/}\r\n\r\n                            <div className=\"inline m-0 pl-5\">\r\n                    <h6 >date given </h6> \r\n                                <div>\r\n                                    <DatePicker\r\n                                        className=\"form-control inline-2-5 p-2\"\r\n                                        dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        maxDate={(this.state.profileShow.x != null && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                            new Date()}\r\n                                        minDate={(this.state.profileShow.x != null && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                            new Date()}\r\n                                        selected={(this.state.profileShow.x != null && new Date(this.state.profileShow.profile.givenAt)) ||\r\n                                            new Date()}\r\n                                        onChange={date => {\r\n                                            this.onDateGivenChange(date);\r\n                                        }}\r\n                                    />\r\n                                     \r\n                    </div>\r\n                    </div>\r\n                            <div className=\"inline m-0 px-5\">\r\n                        <h6 >date returned </h6>\r\n                                <div>\r\n                                    <DatePicker\r\n                                        className=\"form-control inline-2-5 p-2\"\r\n                                        dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        disabled\r\n                                        selected={(this.state.profileShow.x != null && new Date(this.state.profileShow.profile.returnedAt)) || null}\r\n                                    />\r\n                            \r\n                        </div>\r\n                            </div>\r\n                            {\r\n                                this.state.profileShow.x == null &&\r\n                                    <>\r\n                                <div className=\"mt-5 d-flex align-items-center\" >\r\n                                <button className=\"btn btn-mybtn p-x-5 mt-0\" onClick={this.saveUpdated}>Save</button>\r\n                                <button className=\"btn btn-mybtn btn-delete px-5 mt-0\" onClick={() => this.props.updateClicked(null)}>Cancel</button>\r\n                            </div>                        \r\n                                    <p style={{ fontSize: \"80%\" }}> ps : changing date will change previous records as well and may cause lose of data </p>\r\n                                    </>\r\n                                    }\r\n                        \r\n                        </div> {/*************** form right over  **************/}\r\n\r\n                        <div className=\"inline w60\">{/*************** form left **************/}\r\n                           \r\n                            <h6 className=\"required-field ml-0\">selected inventory </h6>\r\n                            {this.state.profileShow.x == null && this.state.withUser && this.state.selectedPds &&\r\n                               this.state.selectedPds.map((pd, i) =>\r\n                                <div>\r\n                                    <label className=\"required-field\">{i + 1}&nbsp;</label>\r\n                                    <input value={pd.name} className='form-control inline w80 m-0 ml-1 p-2 pl-3' />\r\n\r\n                                        <button className=\"btn btn-mybtn btn-delete m-0 ml-1\" type=\"button\"\r\n                                            onClick={() => {\r\n                                                this.oninventoryRemove(i);\r\n                                            }}><i class=\"fa fa-close ml-auto\">\r\n                                            </i></button>\r\n                                    </div>\r\n                                    )}                              \r\n                                {(!this.state.withUser || this.state.profileShow.x != null) &&\r\n                                <>\r\n                                <input value={this.state.profileShow.profile.inventoryNumber || ''} className='form-control inline w90 m-0 p-2 pl-3'                                   \r\n                                />{this.state.changedPd && <i class=\"fa fa-undo ml-1\" onClick={() => { this.returnOriginalPd()}}>\r\n                                </i>}\r\n                                {this.state.profileShow.x==null &&\r\n                                    <p style={{ fontSize: \"70%\" }}> ps : selecting inventory from filter will change current inventory </p>}                                \r\n                                <h6 className=\"mt-1 ml-0 required-field\">select user </h6>\r\n                                <CustomSelect\r\n                                    className={\"b-r inline w80 m-0 p-0\"}\r\n                                    items={this.props.usersToGive}\r\n                                    value={this.state.profileShow.profile.userId}\r\n                                    onChange={(selected) => this.onUserChange(selected)}\r\n                                />{this.state.changedUser && <i class=\"fa fa-undo ml-1\" onClick={() => { this.returnOriginalUser() }}>\r\n                                </i>}\r\n                                </>\r\n                            }\r\n                            \r\n                        </div>{/**********  form left over **********************/}\r\n                    </div>{/*************** form over ********************/}\r\n\r\n                    {this.state.profileShow.x != null &&\r\n                        <>\r\n                        {this.state.profileShow.profile.profileDetail != null &&\r\n                            <div className=\"mt-3 px-5\">\r\n                                <h6>owings :</h6>\r\n                                <div className=\"d-flex alighn-items-top\">\r\n                                    <div className=\"w20\">\r\n                                        <p>created at : </p><p>{this.state.profileShow.profile.profileDetail.createdAt}</p>\r\n                                    </div>\r\n                                    <div className=\"w20\">\r\n                                        <p>modified at : </p><p>{this.state.profileShow.profile.profileDetail.modifiedAt}</p>\r\n                                    </div>\r\n                                    <div className=\"w20\">\r\n                                        <p>owed amount : </p><p>{new Intl.NumberFormat(\"en-GB\", {\r\n                                            style: \"currency\",\r\n                                            currency: \"BGN\",\r\n                                            maximumFractionDigits: 2\r\n                                        }).format(this.state.profileShow.profile.profileDetail.owedAmount)}</p>\r\n                                    </div>\r\n                                    <div className=\"w20\">\r\n                                        <p>paid amount : </p><p>{new Intl.NumberFormat(\"en-GB\", {\r\n                                            style: \"currency\",\r\n                                            currency: \"BGN\",\r\n                                            maximumFractionDigits: 2\r\n                                        }).format(this.state.profileShow.profile.profileDetail.paidAmount)}</p>\r\n                                </div>\r\n                                {!this.state.profileShow.profile.profileDetail.cleared &&\r\n                                    <div className=\"w20 d-flex alighn-items-top\">\r\n                                    <p>paid plus : </p>\r\n                                    <input className=\"inline m-0 ml-2 p-1 form-control px100\"\r\n                                        min=\"0\"\r\n                                        max={this.state.profileShow.profile.profileDetail.owedAmount - this.state.profileShow.profile.profileDetail.paidAmount}\r\n                                        value={this.state.profileShow.profile.paidPlus}\r\n                                        onChange={(value) => {\r\n                                            let amount = value.target.value;\r\n                                            let owed = (this.state.profileShow.profile.profileDetail.owedAmount - this.state.profileShow.profile.profileDetail.paidAmount).toFixed(2);\r\n                                           //debugger\r\n                                            if (Number(amount) > Number(owed))\r\n                                                amount = owed\r\n                                            else if (amount <= 0) amount = \"\";\r\n                                                \r\n                                            let profileShow = this.state.profileShow;\r\n                                            profileShow.profile.paidPlus = amount;\r\n                                            this.setState({ profileShow: profileShow })\r\n                                            }}\r\n                                            type=\"number\" />\r\n                                    </div>\r\n                                }\r\n                                {this.state.profileShow.profile.profileDetail.cleared &&\r\n\r\n                                    <div className=\"wxs\">\r\n                                        <p className=\"p-0\">cleared :</p>\r\n                                        <i class=\"fa fa-check ml-1\" />\r\n                                    </div>}\r\n                                {this.state.profileShow.profile.profileDetail.cleared &&\r\n                                       <button className=\"button btn-delete m-1 ml-3\" onClick={() => {\r\n                                        let show = this.state.profileShow;\r\n                                        show.profile.paidPlus = null;\r\n                                        show.profile.profileDetail = null;\r\n                                        this.setState({\r\n                                            profileShow: show,\r\n                                            rememberToSave:true})\r\n                                          }}>delete owings\r\n                                        </button>\r\n                                }                                \r\n                                </div>\r\n                            </div>}\r\n                      \r\n                            <div className=\"mt-3\" >\r\n                                <button className=\"btn btn-mybtn p-x-5 m-0 ml-5\" onClick={this.saveUpdated}>Save</button>\r\n                            <button className=\"btn btn-mybtn btn-delete px-5 m-0 ml-5 mr-5\" onClick={() => this.props.updateClicked(null)}>Cancel</button>\r\n                            {this.state.rememberToSave && <p className=\"inline ml-5\" style={{ fontSize: \"70%\" }}>\r\n                                ps : don't forget to save otherwise your changes won't be affected </p>}\r\n                        </div>\r\n                        <p style={{ fontSize: \"80%\" }}> ps : changing date will change previous records as well and may cause lose of data </p>                           \r\n                        </>}                   \r\n                    </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfileInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\TimelineInnerComponent.jsx",["622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639"],"import React, { Component } from 'react';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport UserProfileDataService from '../service/UserProfileDataService';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass TimelineInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state =\r\n            {\r\n                items: [],      \r\n                filter: props.filter,\r\n                users: [],           \r\n                firstId: '',\r\n                lastId: '',\r\n                count: 0,\r\n                totalCount: 0,\r\n                errormsg: null,\r\n                givenAtErrors:null,\r\n                returnAtErrors: null,\r\n                timeErrors: null,\r\n                deletedIds: null,\r\n                filteredInventory: '...'            \r\n            }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n   \r\n    componentDidMount() {      \r\n        let search = this.getSearch();\r\n        if(search != null)\r\n            this.refresh(search)       \r\n    } \r\n\r\n    getSearch() { \r\n        this.nullifyErrors();\r\n        if (!this.state.filter) { this.showError(\"loading error !!!\"); return }        \r\n        if (!this.state.filter.productDetailId || \r\n            this.state.filter.productDetailId == 'undefined'\r\n        ) {\r\n            let msg = \"select inventory to activate this search, and preferably limit timeline \";\r\n            this.showError(msg);\r\n            return null;\r\n        }\r\n\r\n        let givenAfter = this.state.filter.givenAfter && this.state.filter.givenAfter != 'undefined' ? this.state.filter.givenAfter : null;\r\n        let returnedBefore = this.state.filter.returnedBefore && this.state.filter.returnedBefore != 'undefined' ? this.state.filter.returnedBefore : null;\r\n       let search = `?productDetailId=` + this.state.filter.productDetailId;//\r\n        search += givenAfter ? `&givenAfter=` + givenAfter : '';\r\n        search += returnedBefore ? `&returnedBefore=` + returnedBefore : ``;\r\n        return search;        \r\n    }\r\n\r\n    nullifyErrors = () => {      \r\n            this.setState({\r\n                errormsg: null,\r\n                givenAtErrors: null,\r\n                returnAtErrors: null,\r\n                timeErrors: null\r\n            })\r\n        if (this.myInterval)\r\n            clearInterval(this.myInterval)\r\n    }\r\n\r\n    nulifyErrors(setFieldValue) {\r\n        setFieldValue(\"givenAtErrors\", null);\r\n        setFieldValue(\"returnAtErrors\", null);\r\n        setFieldValue(\"timeErrors\", null);\r\n        this.nullifyErrors();\r\n    }   \r\n\r\n    showError(msg , time) {\r\n       time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }      \r\n\r\n    refresh(search) {\r\n        UserProfileDataService.retrieveTimeline(search)\r\n            .then(\r\n            response => {\r\n                let users = this.state.users;\r\n               if (users.length < 1) {   \r\n                  users = this.state.filter.userNames;\r\n                   users.push(response.data.select);\r\n                    this.setState({ users: users})\r\n                }   \r\n                this.setStateFromResponse(response);\r\n                this.props.updateLink(search)\r\n                }\r\n        ).catch((error) => {\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg)             \r\n            })\r\n    }\r\n\r\n    setStateFromResponse(response) {\r\n        this.setState({\r\n            items: response.data.items || [],\r\n            firstId: response.data.firstId,\r\n            lastId: response.data.lastId,\r\n            count: response.data.count,\r\n            totalCount: response.data.totalCount,\r\n            msg: response.data.message,\r\n            filteredInventory: this.getFilteredInventoty()\r\n        });\r\n    }\r\n\r\n    getFilteredInventoty() {  //original\r\n        let filteredInventory =\r\n            this.state.filter.inventoryNumbers.find(n => n.value == this.state.filter.productDetailId).name ;\r\n        return filteredInventory\r\n    }\r\n\r\n    getNewFilter(filter) {\r\n        let originFilter = this.state.filter;\r\n        originFilter.productDetailId = filter.productDetailId;\r\n        originFilter.givenAfter = filter.givenAfter;\r\n        originFilter.returnedBefore = filter.returnedBefore;       \r\n        this.setState({ filter: originFilter },\r\n            () => {\r\n                let search = this.getSearch();\r\n                if (search != null) {\r\n                    this.refresh(search)\r\n                }    \r\n            });         \r\n    }\r\n\r\n    convertDate(g) {\r\n        if (g == null) return\r\n        g = new Date(g);\r\n        g.setHours(g.getHours() - g.getTimezoneOffset() / 60);\r\n        return g;\r\n    }\r\n    onSubmit(values) { \r\n        values.submitProductDetailId = this.state.filter.productDetailId;\r\n        values.submitGivenAfter = this.convertDate(this.state.filter.givenAfter);\r\n        values.submitReturnedBefore = this.convertDate(this.state.filter.returnedBefore);\r\n\r\n        UserProfileDataService.saveTimeline(values)\r\n            .then( response => {               \r\n                let msg = response.data.items.length + 'items saved';\r\n                msg += values.deletedIds && values.deletedIds.length > 0 ? ', ' + values.deletedIds.length + ' deleted' : '';\r\n                msg += ' successfully';\r\n                this.setState({ message: msg }) \r\n                this.setStateFromResponse(response)                              \r\n            }).catch((error) => {               \r\n                let msg = Function.getErrorMsg(error);             \r\n                this.showError(msg);               \r\n                if (error.response && typeof error.response.data == 'object' && error.response.data.items != null) {                  \r\n                    this.setState({                      \r\n                        items: error.response.data.items,\r\n                        givenAtErrors: error.response.data.givenAtErrors,\r\n                        returnAtErrors: error.response.data.returnAtErrors,\r\n                        timeErrors: error.response.data.timeErrors\r\n                    })\r\n                }\r\n         })\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        values.items.map((item, i) => {                    \r\n            if (item.givenAt == null) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].givenAt = 'field is required !!!'\r\n            }\r\n            if ((values.items.length - 1) != i && item.returnedAt == null) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = 'field is required !!!'\r\n            }\r\n            if (item.returnedAt != null && new Date(item.returnedAt) < new Date(item.givenAt)) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = \"can't be before given at !!!\"\r\n            }\r\n            if (item.returnedAt != null && new Date(item.returnedAt) > new Date()) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].returnedAt = \"can't be after today !!!\"\r\n            }\r\n            if (new Date(item.givenAt) > new Date()) {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].givenAt = \"can't be after today !!!\"\r\n            }\r\n            if (!item.userId || item.userId == 'undefined') {\r\n                if (errors.items == null) errors.items = [];\r\n                if (errors.items[i] == null) errors.items[i] = {};\r\n                errors.items[i].userId = \"user not selected !!!\"\r\n            }\r\n        })\r\n        return errors\r\n    }\r\n\r\n    onprofileRemove(i, values, setFieldValue) {\r\n        let items = values.items;\r\n        let deletedIds = values.deletedIds;\r\n        if (items[i].id != null) {\r\n            if (deletedIds == null) deletedIds = [];\r\n            deletedIds.push(items[i].id)\r\n        }\r\n        items.splice(i, 1);      \r\n        setFieldValue(\"items\", items);\r\n        setFieldValue(\"deletedIds\", deletedIds);\r\n    }\r\n\r\n    onprofileAdd(i, values, setFieldValue) {          \r\n        let items = values.items;\r\n        if (items.length == 25) {\r\n            this.showError(\"maximum number reached !!!\");\r\n            return;\r\n        }\r\n        let item = { id: null, productDetailId: this.state.filter.productDetailId, userId: null, givenAt: null, returnedAt: null };\r\n        items.splice(i + 1, 0, item); //arr.splice(index, 0, item); will insert item into arr at the specified index (deleting 0 items first,\r\n        setFieldValue(\"items\", items);\r\n    }\r\n\r\n    getStringDate(date) {\r\n        date = this.convertDate(date);\r\n        date = date.toISOString();\r\n        date = date.substring(0, date.indexOf('T'));\r\n        return date;\r\n    }\r\n\r\n    checkDeleted(selected) {\r\n        let found = this.state.users.find(n => n.value == selected.value);\r\n        if (found && found.filterBy) {\r\n            this.showError(\"user is deleted, can't assign him new profiles !!! \", 5);\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    checkIsValidDate(date, id) {\r\n        let found = this.state.users.find(n => n.value == id);\r\n        if (found) {\r\n            if (date > new Date(found.filterBy)) {\r\n                this.showError(\"can't assign date greater than deletion date of the user !!! \", 5);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        let { items, firstId, lastId, count, givenAtErrors, returnAtErrors, timeErrors, deletedIds } = this.state;       \r\n        let minDate = this.state.items[0] && new Date(this.state.items[0].givenAt);\r\n        let length = this.state.items.length;\r\n        let maxDate = (length > 0 && this.state.items[length - 1].returnedAt && new Date(this.state.items[length - 1].returnedAt))|| new Date();\r\n       \r\n        return (\r\n            <Formik\r\n                initialValues={{ items, firstId, lastId, count, givenAtErrors, returnAtErrors, timeErrors , deletedIds}}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n            >\r\n                {({ setFieldValue, values, dirty }) => (                       \r\n                    <Form>\r\n                         <div className=\"pt-2 px-2 mx-3 d-flex flex-wrap \">\r\n                                <div >\r\n                                <button className=\"button btn-mybtn\" style={{ padding: \".3rem 1.8rem .4rem 1.8rem\" }}\r\n                                    disabled={!dirty} type=\"submit\">Save changes</button>\r\n                                <button className=\"button btn-delete\" style={{ padding: \".3rem 1.8rem .4rem 1.8rem\" }}\r\n                                    type=\"reset\" onClick={() => { this.props.updateTimeline(false) }}>Cancel</button>\r\n                                </div>\r\n                                 <div className=\"ml-auto mr-5\">\r\n                                <div >\r\n                                    <label className=\"pager-label mr-3\">showing&nbsp;\r\n                                    {this.state.items.length > 0 ? 1 : 0}-{this.state.count}&nbsp; of &nbsp; {this.state.totalCount}</label>\r\n                                    <label className=\"pager-label mr-3\">for &nbsp;{this.state.filteredInventory}</label>\r\n                                     </div>\r\n                                      {this.state.msg && <p style={{ fontSize: \"70%\", marginLeft:\"30%\" }}>  {this.state.msg}  </p>}\r\n                                 </div>\r\n                             </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}</div>}\r\n                                <table className=\"table border-bottom my-table mt-2\">\r\n                                 <thead>\r\n                                 <tr className=\"\">\r\n                                    <th style={{ width: \"30px\" }}></th>\r\n                                    <th className=\"wl\">user</th>\r\n                                    <th className=\"w20\">given at</th>\r\n                                    <th className=\"w20\">returned at</th>\r\n                                    <th ></th>\r\n                                        </tr>\r\n                            </thead></table>\r\n                        {values.items && values.items.map((item, i) =>\r\n                                <fieldset key={item.id || i} className=\"d-flex align-items-top pb-1 pt-1 w100\">                                   \r\n                                  <div className=\"inline\" style={{ width: \"30px\" }}>{i + 1}-</div>\r\n                                    <div className=\"inline wl\">                                           \r\n                                            <CustomSelect\r\n                                        className={\"inline inline-3\"}\r\n                                        items={this.state.users}\r\n                                        value={values.items[i].userId}\r\n                                        onChange={(selected) => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            if (this.checkDeleted(selected)) return;                                          \r\n                                            setFieldValue(`items.${i}.userId`, selected.value)\r\n                                        }} />\r\n                                    <ErrorMessage name={`items.${i}.userId`} component=\"div\"\r\n                                        className=\"alert alert-warning mbt-01 p-2 inline-3\" /> \r\n                                    </div>\r\n                                    <div className=\"inline w20\">                                          \r\n                                    <DatePicker className=\"form-control inline-2\"\r\n                                        dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        disabled={item.id == firstId}\r\n                                        minDate={minDate}\r\n                                        maxDate={maxDate}\r\n                                        selected={(values.items[i].givenAt && new Date(values.items[i].givenAt)) || null}\r\n                                        onChange={date => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            setFieldValue(`items.${i}.givenAt`, this.getStringDate(date))\r\n                                        }} />\r\n                                    <ErrorMessage name={`items.${i}.givenAt`} component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01 p-2 inline-2\" /> \r\n                                        {values.givenAtErrors instanceof Array\r\n                                            && values.givenAtErrors[i]\r\n                                            &&<div className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\">\r\n                                            {values.givenAtErrors[i]}</div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"inline w20\">                                            \r\n                                    <DatePicker className=\"form-control inline-2\"\r\n                                        dateFormat=\"dd MMMM yyyy\"\r\n                                        locale=\"en-GB\"\r\n                                        disabled={item.id == lastId}\r\n                                        maxDate={maxDate}\r\n                                        selected={(values.items[i].returnedAt && new Date(values.items[i].returnedAt)) || null}\r\n                                        onChange={date => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            if (!this.checkIsValidDate(date, values.items[i].userId)) return;\r\n                                            setFieldValue(`items.${i}.returnedAt`, this.getStringDate(date))\r\n                                        }} />\r\n                                        <ErrorMessage name={`items.${i}.returnedAt`} component=\"div\"\r\n                                            className=\"alert alert-warning mbt-01 p-2 inline-2\"/>\r\n                                        {values.returnAtErrors instanceof Array\r\n                                            && values.returnAtErrors[i]\r\n                                            &&<div className=\"alert alert-warning mbt-01 mr-3 p-1 pl-2\">\r\n                                                {values.returnAtErrors[i]}</div>\r\n                                        }\r\n                                        {values.timeErrors instanceof Array\r\n                                        && values.timeErrors[i]\r\n                                        &&<div className=\"alert alert-warning mr-3 mbt-01 p-1 pl-2\">\r\n                                            {values.timeErrors[i]}</div>\r\n                                    }\r\n                                    </div>\r\n                                    <div className=\"inline\">                                       \r\n                                        <button className=\"btn btn-mybtn btn-delete m-0 ml-1\" type=\"button\"\r\n                                            disabled={item.id == this.state.firstId || item.id == this.state.lastId}\r\n                                        onClick={() => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            this.onprofileRemove(i, values, setFieldValue);\r\n                                            }}><i class=\"fa fa-close ml-auto\"></i></button>                                       \r\n                                        {values.items.length - 1 != i &&\r\n                                            <button className=\"btn btn-mybtn m-0 ml-1\" type=\"button\"\r\n                                        onClick={() => {\r\n                                            this.nullifyErrors(setFieldValue);\r\n                                            this.onprofileAdd(i, values, setFieldValue);\r\n                                                }}><i class=\"fa fa-plus ml-auto\"></i></button>\r\n                                        }\r\n                                    </div>\r\n                                    </fieldset>\r\n                                    )} \r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimelineInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CountryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CityFilter.jsx",["640","641","642","643","644"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nclass CityFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            countries: props.countries,\r\n            countryId: props.countryId,\r\n            cities: props.cities,\r\n            filteredcities: this.filter([], props.cities, props.countryId),\r\n            cityId: props.cityId,\r\n            zones: props.zones,\r\n            timeZone: props.timeZone,\r\n            currencies: props.currencies,\r\n            currency: props.currency,\r\n            prefix: props.prefix,\r\n        }      \r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n      \r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n        }\r\n\r\n    resetForm() {\r\n\r\n        this.props.onNewSearch ?\r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;\r\n      \r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null || value == 'undefined') subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value || !names[i].value || names[i].value == 'undefined') {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n       \r\n        let { countries, countryId, cities, cityId, zones, timeZone, currencies, currency, filteredcities} = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ countries, countryId, cities, cityId, zones, timeZone, currencies, currency, filteredcities }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                           \r\n                            <div className=\"inline\">\r\n                                <label >country&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={countries}\r\n                                    value={values.countryId}\r\n                                    onChange={(selected) => {\r\n                                        setFieldValue(\"countryId\", selected.value);\r\n                                        let subs = this.filter([], values.cities, selected.value);                                      \r\n                                        setFieldValue(\"filteredcities\", subs);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >cities&nbsp;</label>\r\n                                <CustomSelect                                  \r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredcities || filteredcities || cities}\r\n                                    value={values.cityId || ''}\r\n                                    onChange={(selected) => setFieldValue(\"cityId\", selected.value)}                                \r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >time zone&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.zones}\r\n                                    value={values.timeZone || ''}\r\n                                    onChange={(selected) => setFieldValue(\"timeZone\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >currency&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.currencies}\r\n                                    value={values.currency || ''}\r\n                                    onChange={(selected) => setFieldValue(\"currency\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCountriesComponent.jsx",["645","646","647","648","649","650","651","652"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport CityFilter from './Filters/CityFilter';\r\nimport '../myStyles/Style.css';\r\nimport CountryInnerComponent from './CountryInnerComponent';\r\nimport CityInnerComponent from './CityInnerComponent';\r\nimport { Link, Route, withRouter } from 'react-router-dom';\r\nimport Function from './Shared/Function';\r\n\r\n\r\nclass ListCountriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: {},\r\n            filterKey: 0,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            countryUpdateShow: {\r\n                country: {}, show: false\r\n            },\r\n            cityUpdateShow: {\r\n                city: {}, show: false\r\n            },\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.csvLink = React.createRef();\r\n        this.searchLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n                if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                    newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                    newSearch += 'Filter.filtersSet=true'\r\n                }\r\n            this.refresh(newSearch);\r\n        }\r\n    }\r\n\r\n    refresh(newSearch) {\r\n        if (!newSearch) newSearch = this.state.search;\r\n        CountryDataService.retrieveAll(newSearch)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: this.getfilter(response.data.filter),\r\n                        filterKey: this.state.filterKey + 1\r\n                    });\r\n                }).catch((error) => {                  \r\n                    let msg = Function.getErrorMsg(error);\r\n                    this.showError(msg, 5);\r\n                })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.countries = filter.countries;\r\n            newfilter.cities = filter.cities;\r\n            newfilter.zones = filter.zones;\r\n            newfilter.currencies = filter.currencies;\r\n            return newfilter\r\n        }\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n   \r\n    updateClickedInner = (item) => {\r\n      \r\n        item = item || {};\r\n        let show = this.state.countryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {           \r\n            show.country = JSON.parse(JSON.stringify(item))           \r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            countryUpdateShow: show,\r\n            message: null,\r\n            pdmessage: [],\r\n            ddmessage: []\r\n        });\r\n    }\r\n\r\n    updateClickedInnerChild = (item) => {       \r\n        item = item || {};\r\n        let show = this.state.cityUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.city = JSON.parse(JSON.stringify(item))\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            cityUpdateShow: show,\r\n            message: null,            \r\n        });\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        CountryDataService.delete(id)\r\n            .then(() => {                    \r\n                    this.setState({\r\n                        message: `Delete successful`,                       \r\n                    })\r\n                    this.refresh()\r\n            }).catch(error => {               \r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5);\r\n            })\r\n    }\r\n\r\n    deleteChildClicked(id) {\r\n        CountryDataService.deleteChild(id)\r\n            .then(() => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5);\r\n            })\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {\r\n        this.updateLink(newSearch);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {this.state.countryUpdateShow && this.state.countryUpdateShow.show == true &&\r\n                    <CountryInnerComponent\r\n                    countryUpdateShow={this.state.countryUpdateShow}\r\n                    updateClickedInner={() => this.updateClickedInner(null)}\r\n                    setMessage={(value) => this.setState({ message: value })}\r\n                    refresh={()=>this.refresh()}                    \r\n                    />}\r\n                {this.state.cityUpdateShow && this.state.cityUpdateShow.show == true &&\r\n                    <CityInnerComponent\r\n                       cityUpdateShow={this.state.cityUpdateShow}\r\n                        updateClickedInnerChild={() => this.updateClickedInnerChild(null)}\r\n                        setMessage={(value) => this.setState({ message: value })}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                {this.state.filter && <CityFilter {...this.state.filter}\r\n                    key={this.state.filterKey}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Countries</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={()=>this.updateClickedInner({})}>Add New</button>\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}                              \r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}\r\n                        </div>\r\n                        {this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n                        {this.state.items.map(\r\n                                         (item) =>\r\n                                            <div className=\"panel-body\">\r\n                            <table className=\"table border table-s\">\r\n                                <tbody>\r\n                                                         <tr >\r\n                                                             <th>code : {item.code}</th>\r\n                                        <th className=\"wl pl-5\"\r\n                                            > Name : {item.name} </th>\r\n                                        <th className=\"wl pl-3\"                                           \r\n                                                             > Currency : {item.currency}</th>\r\n                                                             <th>phone code : {item.phoneCode}</th>\r\n                                        <th className=\"d-flex justify-content-end mr-1\">\r\n                                                                 <button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                            <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                        </th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colspan=\"3\">\r\n                                                                 <table className=\"ml-5 mb-3 x-Table\" style={{ width: '60%' }}>\r\n                                                <tr><td>city</td>\r\n                                                    <td className=\"pl-5\">time zone</td>\r\n                                                                         <td style={{ width: '173px', padding: '.2rem .5rem' }}>\r\n                                                        <button className=\"btn btn-mybtn pull-right\" style={{ padding: '.15rem .6rem' }}\r\n                                                                                 onClick={() => this.updateClickedInnerChild({ \"countryId\": `${item.id}`})}>add one</button>\r\n                                                    </td></tr>\r\n                                                {item.cities&&item.cities.map((c, i) =>\r\n                                                    <tr>\r\n                                                        <td >{c.name}</td>\r\n                                                        <td className=\"pl-5 pb-3\"\r\n                                                            > {c.timeZone}\r\n                                                        </td>\r\n                                                        <td><button className=\"btn btn-mybtn mr-1\" onClick={() => {\r\n                                                            this.updateClickedInnerChild(c)\r\n                                                        }}>Update</button>\r\n                                                            <button className=\"btn btn-mybtn btn-delete\"\r\n                                                                onClick={() => this.deleteChildClicked(c)}>\r\n                                                                Delete</button></td>\r\n                                                    </tr>\r\n                                                )}\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                                                 </table>\r\n                                             </div>\r\n                                                 )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCountriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CountryInnerComponent.jsx",["653","654","655","656","657","658"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass CountryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n            countryUpdateShow: props.countryUpdateShow,\r\n            original: JSON.parse(JSON.stringify(props.countryUpdateShow.country)),\r\n                allCountries: [],               \r\n                currencies: [],\r\n                allPhoneCodes: []\r\n            }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    refresh(search) {\r\n       CountryDataService.retrieve(this.state.countryUpdateShow.country.id||-1)\r\n            .then(response => {\r\n               this.setState({\r\n                    allCountries: response.data.allCountries||[],\r\n                    currencies: response.data.currencies||[],\r\n                    allPhoneCodes: response.data.allPhoneCodes||[]\r\n                })\r\n           }).catch(error => {\r\n               let msg = Function.getErrorMsg(error);\r\n               let show = this.state.categoryUpdateShow;\r\n               show.error = msg;\r\n               this.setState({ categoryUpdateShow: show })\r\n           })\r\n    }\r\n\r\n    saveUpdated = () => {\r\n\r\n        let item = this.state.countryUpdateShow.country;\r\n        let original = this.state.original;\r\n\r\n        if (!item.name || item.name == \"undefined\" || !item.currency ||\r\n            item.currency == \"undefined\" || !item.phoneCode || item.phoneCode == 'undefined') {\r\n            let show = this.state.countryUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else if (original.name == item.name && original.currency == item.currency &&\r\n            original.phoneCode == item.phoneCode) {\r\n\r\n            let show = this.state.countryUpdateShow;\r\n            show.error = \"item hasn't changed !!!\";\r\n            this.setState({ pdUpdateShow: show })\r\n        } else {\r\n            CountryDataService.save(item)\r\n                .then(response => {\r\n                    let msg = this.state.countryUpdateShow.country.id && this.state.countryUpdateShow.country.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInner(null);\r\n                    this.props.setMessage(msg);\r\n                    this.props.refresh();\r\n                }).catch(error => {\r\n                   let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.countryUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ countryUpdateShow: show })\r\n                })\r\n        }       \r\n    }\r\n\r\n    onNameChange(selected) {\r\n        let c = this.state.countryUpdateShow;\r\n        c.country.name = selected.label; \r\n        c.country.code = selected.value;\r\n        this.setState({\r\n            countryUpdateShow:c          \r\n        })\r\n    }\r\n    onCurrencyChange(selected) {\r\n        let c = this.state.countryUpdateShow;\r\n        c.country.currency = selected.value;\r\n        this.setState({\r\n            countryUpdateShow: c\r\n        })\r\n    }\r\n    onPhoneCodeChange(selected) {\r\n        let c = this.state.countryUpdateShow;\r\n        c.country.phoneCode = selected.value;\r\n        this.setState({\r\n            countryUpdateShow: c\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.countryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.countryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"72%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>{this.state.countryUpdateShow.country.id && this.state.countryUpdateShow.country.id > 0 ? \"update\" : \"add\"} country</h2>\r\n                    {this.state.countryUpdateShow.error && this.state.countryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.countryUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.countryUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ countryUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className={this.state.countryUpdateShow.error && this.state.countryUpdateShow.error.length > 1 ?\r\n                        \"required-field\" : \"mt-5 required-field\"}>name</h6>\r\n                    <CustomSelect\r\n                        items={this.state.allCountries}\r\n                        value={this.state.countryUpdateShow.country.code}\r\n                        onChange={(selected) => this.onNameChange(selected)}\r\n                    />\r\n                    <div className=\"w-25 inline pl-3\">\r\n                        <h6 className=\"pl-3 required-field\">code</h6>\r\n                        <p className=\"ml-4 border-bottom\">{this.state.countryUpdateShow.country.code}</p>\r\n                    </div>\r\n                    {<div className=\"w20 inline\"></div>\r\n                    }\r\n                    <div className=\"w-50 inline\">\r\n                        <h6 className=\"required-field\">phone code</h6>\r\n                    <CustomSelect\r\n                            items={this.state.allPhoneCodes}\r\n                            value={this.state.countryUpdateShow.country.phoneCode}\r\n                        onChange={(selected) => this.onPhoneCodeChange(selected)}\r\n                        />\r\n                    </div>\r\n                    <h6 className=\"required-field\">currency</h6>\r\n                    <CustomSelect\r\n                        items={this.state.currencies}\r\n                        value={this.state.countryUpdateShow.country.currency}\r\n                        onChange={(selected) => this.onCurrencyChange(selected)}\r\n                    />\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CityInnerComponent.jsx",["659","660","661","662","663","664","665","666","667"],"import React, { Component } from 'react';\r\nimport CountryDataService from '../service/CountryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\n\r\nclass CityInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n            cityUpdateShow: props.cityUpdateShow,\r\n            original: JSON.parse(JSON.stringify(props.cityUpdateShow.city)),\r\n                countries: [],\r\n                zones: []\r\n            }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    refresh(search) {\r\n         CountryDataService.retrieveChild(this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.id || -1,\r\n            this.state.cityUpdateShow.city.countryId && this.state.cityUpdateShow.city.countryId || -1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    countries: response.data.countries,\r\n                    zones: response.data.zones\r\n                })\r\n             }).catch(error => {\r\n                 let msg = Function.getErrorMsg(error);\r\n                 let show = this.state.categoryUpdateShow;\r\n                 show.error = msg;\r\n                 this.setState({ categoryUpdateShow: show })\r\n             })\r\n    }\r\n\r\n\r\n    saveUpdated = () => {\r\n\r\n        let item = this.state.cityUpdateShow.city;\r\n        item.name = item.name ? item.name.trim() : item.name;\r\n\r\n        let original = this.state.original;\r\n\r\n        if (!item.name || item.name.length < 1 || !item.timeZone || item.timeZone == \"undefined\" || !item.countryId || item.countryId == \"undefined\") {\r\n            let show = this.state.cityUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ cityUpdateShow: show })\r\n        } else if (original.name == item.name && original.countryId == item.countryId && original.timeZone == item.timeZone) {\r\n            let show = this.state.cityUpdateShow;\r\n            show.error = \"item hasn't changed !!!\";\r\n            this.setState({ cityUpdateShow: show })\r\n        }\r\n        else {\r\n            CountryDataService.saveChild(item)\r\n                .then(response => {\r\n                    let msg = this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInnerChild(null);\r\n                    this.props.setMessage(msg);\r\n                    if(this.props.refresh) this.props.refresh();\r\n                    if(this.props.updatedCity) this.props.updatedCity(response.data, item);\r\n                }).catch(error => {                   \r\n                    let msg = Function.getErrorMsg(error);\r\n                    console.log(\"error = \" + msg);\r\n                    let show = this.state.cityUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ cityUpdateShow: show })\r\n                })\r\n        }\r\n    }\r\n\r\n    onNameChange(value) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.name = value.target.value;//.replace(/\\s/g, '');\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n    onZoneChange(selected) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.timeZone = selected.value;\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n    onCountryChange(selected) {\r\n        let c = this.state.cityUpdateShow;\r\n        c.city.countryId = selected.value;\r\n        this.setState({\r\n            cityUpdateShow: c\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.cityUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.cityUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"72%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInnerChild(null)}>&times;</span>\r\n                    <h2>{this.state.cityUpdateShow.city.id && this.state.cityUpdateShow.city.id > 0 ? \"update\" : \"add\"} city</h2>\r\n                    {this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.cityUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.cityUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ cityUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    <h6 className={this.state.cityUpdateShow.error && this.state.cityUpdateShow.error.length > 1 ?\r\n                        \"required-field\" : \"mt-5 required-field\"}>country</h6>\r\n                    <CustomSelect\r\n                        items={this.state.countries}\r\n                        value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.countryId}\r\n                        onChange={(selected) => this.onCountryChange(selected)}\r\n                    />\r\n                    <h6 className=\"required-field\">city name</h6>\r\n                    <input type=\"text\" className=\"form-control pt-2 pb-2\" value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.name}\r\n                        onChange={(value) => { this.onNameChange(value) }} />\r\n                    <h6 className=\"required-field\">time zone</h6>\r\n                    <CustomSelect\r\n                        items={this.state.zones}\r\n                        value={this.state.cityUpdateShow.city && this.state.cityUpdateShow.city.timeZone}\r\n                        onChange={(selected) => this.onZoneChange(selected)}\r\n                    />\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInnerChild(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListCategoriesComponent.jsx",["668","669","670","671","672","673"],"import React, { Component } from 'react';\r\nimport CategoryDataService from '../service/CategoryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport CategoryFilter from './Filters/CategoryFilter';\r\nimport '../myStyles/Style.css';\r\nimport CategoryInnerComponent from './CategoryInnerComponent';\r\nimport { Link, Route, withRouter } from 'react-router-dom';\r\nimport Function from './Shared/Function';\r\n\r\nclass ListCategoriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: {},\r\n            filterKey: 0,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            categoryUpdateShow: {\r\n                category: {}, show: false\r\n            },\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)  \r\n        this.searchLink = React.createRef();\r\n        \r\n    }\r\n\r\n    componentDidMount() {       \r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n                if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                    newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                    newSearch += 'Filter.filtersSet=true'\r\n                }\r\n            this.refresh(newSearch);\r\n        }\r\n    }\r\n\r\n    refresh(newSearch) {  \r\n        if (!newSearch) newSearch = this.state.search;\r\n        CategoryDataService.retrieveAll(newSearch)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: this.getfilter(response.data.filter),\r\n                        filterKey: this.state.filterKey + 1\r\n                    });\r\n            }).catch((error) => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5);\r\n                    })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.names = filter.names;\r\n            newfilter.productTypes = filter.productTypes;            \r\n            return newfilter\r\n        }\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }      \r\n\r\n   \r\n    updateClickedInner = (item) => {\r\n      \r\n        item = item || {};\r\n        let show = this.state.categoryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.category = JSON.parse(JSON.stringify(item))\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            categoryUpdateShow: show,\r\n            message: null,           \r\n        });\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        CategoryDataService.delete(id)\r\n            .then(() => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5);\r\n            })\r\n\r\n    }\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {\r\n        this.updateLink(newSearch);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {this.state.categoryUpdateShow && this.state.categoryUpdateShow.show == true &&\r\n                    <CategoryInnerComponent\r\n                        categoryUpdateShow={this.state.categoryUpdateShow}\r\n                        updateClickedInner={() => this.updateClickedInner(null)}\r\n                        setMessage={(value) => this.setState({ message: value})}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n                {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                {this.state.filter && <CategoryFilter {...this.state.filter}\r\n                    key={this.state.filterKey}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Categories</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={() => this.updateClickedInner({})}>Add New</button>\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}\r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}\r\n                        </div>\r\n                        {this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>                                   \r\n                                    <th scope=\"col\" >type</th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.items.map(\r\n                                        item =>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    {item.productType}\r\n                                                </td>\r\n                                                <td>{item.name}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCategoriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\CategoryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\CategoryFilter.jsx",["674","675","676"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nclass CategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {  \r\n      \r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n\r\n       }\r\n\r\n    resetForm() {      \r\n        this.props.onNewSearch ?\r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n         else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value || !names[i].value || names[i].value == 'undefined' ) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n       \r\n        let { name, names, productType, productTypes, filteredNames } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ name, names, productType, productTypes, filteredNames }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {\r\n                                    productTypes&&productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                   if (value.target.value == values.productType) value = null;                                                   \r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value ? value.target.value : null);                                                   \r\n                                                    setFieldValue(\"productType\", value ? value.target.value : null);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.name || ''}\r\n                                    onChange={(selected) => setFieldValue(\"name\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )\r\n                }\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\CategoryInnerComponent.jsx",["677","678","679","680","681","682"],"import React, { Component } from 'react';\r\nimport CategoryDataService from '../service/CategoryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\nclass CategoryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n            categoryUpdateShow: props.categoryUpdateShow,\r\n            original: JSON.parse(JSON.stringify(props.categoryUpdateShow.category)),           \r\n            }\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        let item = this.state.categoryUpdateShow.category;\r\n        item.name = item.name ? item.name.trim() : item.name;\r\n        let original = this.state.original;\r\n        if (!item.name || item.name == \"undefined\" || !item.productType) {\r\n            let show = this.state.categoryUpdateShow;\r\n            show.error = \"All fields are required\";\r\n            this.setState({ categoryUpdateShow: show })\r\n        } else if (original.name == item.name && item.productType == original.productType) {\r\n            let show = this.state.categoryUpdateShow;\r\n            show.error = \"item hasn't changed !!!\";\r\n            this.setState({ categoryUpdateShow: show })\r\n        }\r\n        else {\r\n            CategoryDataService.save(item)\r\n                .then(response => {\r\n                    let msg = this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInner(null);\r\n                    this.props.setMessage(msg);\r\n                    this.props.refresh();\r\n                }).catch(error => {\r\n                   let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.categoryUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ categoryUpdateShow: show })\r\n                })\r\n        }\r\n    }\r\n\r\n    onProductTypeChange(value) {\r\n        let c = this.state.categoryUpdateShow;\r\n        if (c.category.productType === value.target.value) return;\r\n        c.category.productType = value.target.value;\r\n        this.setState({\r\n            categoryUpdateShow: c\r\n        })\r\n    }\r\n    onNameChange(value) {\r\n        let c = this.state.categoryUpdateShow;\r\n        c.category.name = value.target.value;\r\n        this.setState({\r\n            categoryUpdateShow: c\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.categoryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.categoryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"60%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>{this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? \"update\" : \"add\"} category</h2>\r\n                    {this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.categoryUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.categoryUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ categoryUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}                   \r\n                    <h6 className={this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 ?\r\n                        \"required-field\" : \"mt-5 required-field\"}>name</h6>\r\n                    <input type=\"text\" className=\"form-control\" value={this.state.categoryUpdateShow.category.name }\r\n                        onChange={(value) => {\r\n                            this.onNameChange(value)\r\n                        }} />                   \r\n                    <div className=\"pr-2 mr-2 mt-3\">\r\n                        <h6 className=\"required-field \">product type</h6>\r\n                        <input\r\n                            className=\"\" type=\"radio\"\r\n                            value='LTA' checked={this.state.categoryUpdateShow.category.productType == 'LTA'}\r\n                            onChange={(value) => {\r\n                                this.onProductTypeChange(value)\r\n                            }}\r\n                        /><span className=\" pl-1\" >LTA</span>\r\n                        <input\r\n                            className=\"\" type=\"radio\"\r\n                            value='STA' checked={this.state.categoryUpdateShow.category.productType == 'STA'}\r\n                            onChange={(value) => {\r\n                                this.onProductTypeChange(value)\r\n                            }}\r\n                        /><span className=\"pl-1\" >STA</span>\r\n                    </div>\r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CategoryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListUserCategoriesComponent.jsx",["683","684","685","686","687","688"],"import React, { Component } from 'react';\r\nimport UserCategoryDataService from '../service/UserCategoryDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport UserCategoryFilter from './Filters/UserCategoryFilter';\r\nimport '../myStyles/Style.css';\r\nimport UserCategoryInnerComponent from './UserCategoryInnerComponent';\r\nimport Function from './Shared/Function';\r\nimport { Link, Route} from 'react-router-dom';\r\n\r\nclass ListUserCategoriesComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            pager: null,\r\n            filter: {},\r\n            filterKey: 0,\r\n            search: window.location.search || '',\r\n            message: null,\r\n            categoryUpdateShow: {\r\n                category: {}, show: false\r\n            },\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.searchLink = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.search != prevProps.location.search) {\r\n            let newSearch = this.props.location.search;\r\n            if (this.state.filter)\r\n                if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n                    newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n                    newSearch += 'Filter.filtersSet=true'\r\n                }\r\n            this.refresh(newSearch);\r\n        }\r\n    }\r\n\r\n    refresh(newSearch) {\r\n        if (!newSearch) newSearch = this.state.search;\r\n        UserCategoryDataService.retrieveAll(newSearch)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: this.getfilter(response.data.filter),\r\n                        filterKey: this.state.filterKey + 1\r\n                    });\r\n            }).catch((error) => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg)   \r\n                })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        let filter = this.state.filter;\r\n        if (!filter)\r\n            return newfilter\r\n        else if (!newfilter.filtersSet) {\r\n            return newfilter\r\n        }\r\n        else {\r\n            newfilter.names = filter.names;\r\n            newfilter.productTypes = filter.productTypes;\r\n            return newfilter\r\n        }\r\n    }\r\n\r\n    showError(msg) {\r\n        let time = 8;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    updateClickedInner = (item) => {       \r\n        item = item || {};\r\n        let show = this.state.categoryUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.category = JSON.parse(JSON.stringify(item))\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            categoryUpdateShow: show,\r\n            message: null,\r\n        });\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        UserCategoryDataService.delete(id)\r\n            .then(() => {\r\n                this.setState({\r\n                    message: `Delete successful`,\r\n                })\r\n                this.refresh()\r\n            }).catch(error => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg) \r\n            })\r\n\r\n    }\r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {\r\n        this.updateLink(newSearch);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n\r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {this.state.categoryUpdateShow && this.state.categoryUpdateShow.show == true &&\r\n                    <UserCategoryInnerComponent\r\n                        categoryUpdateShow={this.state.categoryUpdateShow}\r\n                        updateClickedInner={() => this.updateClickedInner(null)}\r\n                        setMessage={(value) => this.setState({ message: value })}\r\n                        refresh={() => this.refresh()}\r\n                    />}\r\n                {this.state.filter && <UserCategoryFilter {...this.state.filter}\r\n                    key={this.state.filterKey}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 d-inline-flex\">\r\n                            <strong> Categories</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap\">\r\n                            <div>\r\n                                <button className=\"btn btn-mybtn px-5  \" onClick={() => this.updateClickedInner({})}>Add New</button>\r\n                            </div>\r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}                               \r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}\r\n                        </div>\r\n                        {this.state.errormsg && <div className=\"alert alert-warning d-flex\">{this.state.errormsg}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={() => this.setState({ errormsg: null })}></i></div>}\r\n                        {this.state.message &&\r\n                            <div className=\"alert alert-success d-flex\">{this.state.message}\r\n                                <i class=\"fa fa-close ml-auto pr-3 pt-1\" onClick={this.togglemsgbox}></i>\r\n                            </div>\r\n                        }\r\n                        <table className=\"table border-bottom my-table\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\" >type</th>\r\n                                    <th scope=\"col\">name</th>\r\n                                    <th scope=\"col\">amortization</th>\r\n                                    <th scope=\"col\">Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.items.map(\r\n                                        item =>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    {item.category.productType}\r\n                                                </td>\r\n                                                <td>{item.category.name}</td>\r\n                                                <td>{item.category.productType == 'LTA' ? item.amortizationPercent + '%' : '-'}</td>\r\n                                                <td><button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClickedInner(item)}>Update</button>\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListUserCategoriesComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\UserCategoryDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\UserCategoryFilter.jsx",["689","690","691","692","693","694","695"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nclass UserCategoryFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            categoryId: props.categoryId,\r\n            names: props.names,\r\n            filteredNames: this.filter([], props.names, props.productType),\r\n            productType: props.productType,\r\n            productTypes: props.productTypes,\r\n            amortizationPercentMoreThan: props.amortizationPercentMoreThan,\r\n            amortizationPercentLessThan: props.amortizationPercentLessThan,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n      }\r\n\r\n    resetForm() {\r\n        this.props.onNewSearch ?\r\n            this.props.onNewSearch('') :\r\n            window.location.href = window.location.pathname;\r\n    }\r\n\r\n    filter(subs, names, value) {\r\n        subs = [];\r\n        if (value == null) subs = names;\r\n        else {\r\n            for (let i = 0; i < names.length; i++) {\r\n\r\n                if (names[i].filterBy == value) {\r\n                    subs.push(names[i])\r\n                }\r\n            }\r\n        }\r\n        return subs\r\n    }\r\n\r\n    render() {\r\n       \r\n        let { categoryId, names, productType, productTypes, filteredNames, amortizationPercentMoreThan, amortizationPercentLessThan } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ categoryId, names, productType, productTypes, filteredNames, amortizationPercentMoreThan, amortizationPercentLessThan }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n\r\n                            <div className=\"inline px-2 mx-2\">\r\n                                <label>product type :</label>\r\n                                {productTypes && productTypes.map((type) =>\r\n                                        <div className=\"inline\">\r\n                                            <Field\r\n                                                className=\"mx-2\" type=\"checkbox\" name=\"productType\"\r\n                                                value={type.value} checked={type.name === values.productType}\r\n                                                onChange={(value) => {\r\n                                                    // console.log('value of checked = ' + value.target.value);\r\n                                                    value = value.target.value;\r\n                                                    value = values.productType == value ? null : value;\r\n                                                    let subs = values.filteredNames;\r\n                                                    subs = this.filter(subs, values.names, value);\r\n\r\n                                                    setFieldValue(\"productType\", value);\r\n                                                    setFieldValue(\"filteredNames\", subs);\r\n                                                }}\r\n                                            />\r\n                                            {type.name}\r\n                                        </div>\r\n                                    )}\r\n                            </div>\r\n                            <div className=\"inline\">\r\n                                <label >category&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-4\"}\r\n                                    items={values.filteredNames || filteredNames || names}\r\n                                    value={values.categoryId || ''}\r\n                                    onChange={(selected) => setFieldValue(\"categoryId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                                <div className=\"inline\">\r\n                                    <label className=\"mb-1\">amortization&nbsp;</label>\r\n                                    <div className=\"inline px-2 border\" style={{ borderRadius: \"3px\" }}>\r\n                                        <label className=\"mb-1 fw-s\">more than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-50px\" type=\"number\" min=\"0\" max={values.amortizationPercentLessThan || 100}\r\n                                            name=\"amortizationPercentMoreThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentMoreThan} />&nbsp;%\r\n                                    <label className=\"pl-2 mb-1 fw-s\">less than&nbsp;</label>\r\n                                        <Field className=\"form-control in-inline inline-50px\" type=\"number\" min={values.amortizationPercentMoreThan || 0} max=\"100\"\r\n                                            name=\"amortizationPercentLessThan\" disabled={values.productType == 'STA'}\r\n                                            value={values.productType == 'STA' ? '' : values.amortizationPercentLessThan} />&nbsp;%\r\n                                        </div>\r\n                                </div>\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserCategoryFilter","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\UserCategoryInnerComponent.jsx",["696","697","698","699","700","701","702","703"],"import React, { Component } from 'react';\r\nimport UserCategoryDataService from '../service/UserCategoryDataService';\r\nimport '../myStyles/Style.css';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport Function from './Shared/Function'\r\n\r\nclass UserCategoryInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n                categoryUpdateShow: props.categoryUpdateShow,\r\n                names: [],\r\n                id:null,\r\n                categoryId: null,\r\n                amortizationPercent: null,\r\n                productType:null\r\n            }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    refresh(search) {\r\n        UserCategoryDataService.retrieve(this.state.categoryUpdateShow.category.id || -1)\r\n            .then(response => {\r\n                console.log(\"got response = \" + JSON.stringify(response));\r\n                this.setState({\r\n                    names: response.data.names,\r\n                    id: response.data.id,\r\n                    categoryId: response.data.categoryId,\r\n                    amortizationPercent: response.data.amortizationPercent,\r\n                    productType: this.state.categoryUpdateShow.category.category && this.state.categoryUpdateShow.category.category.productType\r\n                })\r\n            }).catch(error => {\r\n                let msg = Function.getErrorMsg(error);\r\n                let show = this.state.categoryUpdateShow;\r\n                show.error = msg;\r\n                this.setState({ categoryUpdateShow: show })\r\n            })\r\n    }\r\n\r\n    saveUpdated = () => {\r\n        let item = { id:this.state.id, categoryId: this.state.categoryId, amortizationPercent: this.state.amortizationPercent }\r\n        let productType = this.state.productType;\r\n        let original = this.state.categoryUpdateShow.category;\r\n        if (!item.categoryId || item.categoryId == \"undefined\" ||\r\n            (productType === 'LTA' && (!item.amortizationPercent || item.amortizationPercent == \"undefined\"))) {\r\n            let show = this.state.categoryUpdateShow;\r\n            show.error = \"All fields are required !!!\";\r\n            this.setState({ categoryUpdateShow: show })\r\n        } else if (original.id && original.category.id == item.categoryId && original.amortizationPercent == item.amortizationPercent) {\r\n            let show = this.state.categoryUpdateShow;\r\n            show.error = \"item hasn't changed !!!\";\r\n            this.setState({ categoryUpdateShow: show })\r\n        } else {\r\n            UserCategoryDataService.save(item)\r\n                .then(response => {\r\n                    let msg = this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? `Update successful` : `Save successful`;\r\n                    this.props.updateClickedInner(null);\r\n                    this.props.setMessage(msg);\r\n                    this.props.refresh();\r\n                }).catch(error => {                  \r\n                    let msg = Function.getErrorMsg(error);\r\n                    let show = this.state.categoryUpdateShow;\r\n                    show.error = msg;\r\n                    this.setState({ categoryUpdateShow: show })\r\n                })\r\n        }       \r\n\r\n    }\r\n\r\n    onamortizationChange(value) {\r\n        value = value.target.value;\r\n        if (value > 100) return;\r\n        if (value < 0) return;\r\n        let c = this.state.amortizationPercent;\r\n        c = value;\r\n        this.setState({\r\n            amortizationPercent: c\r\n        })\r\n    }\r\n    onCategoryChange(selected) {\r\n        let c = this.state.categoryId;\r\n        c = selected.value;\r\n        let type = this.state.productType;\r\n        type = (this.state.names.filter(x => x.value == selected.value))[0].filterBy;\r\n        console.log(\"type = \"+type)\r\n        this.setState({\r\n            categoryId: c,\r\n            productType:type\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={this.state.categoryUpdateShow.show ? \"overlay d-block\" : \"d-none\"}></div>\r\n                <div className={this.state.categoryUpdateShow.show ? \"modal d-block\" : \"d-none\"} style={{ width: \"40%\", height: \"63%\" }}>\r\n                    <span class=\"close\" onClick={() => this.props.updateClickedInner(null)}>&times;</span>\r\n                    <h2>{this.state.categoryUpdateShow.category.id && this.state.categoryUpdateShow.category.id > 0 ? \"update\" : \"add\"} category</h2>\r\n                    {this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 &&\r\n                        <div className=\"alert alert-warning d-flex\">{this.state.categoryUpdateShow.error}\r\n                            <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                onClick={() => {\r\n                                    let show = this.state.categoryUpdateShow;\r\n                                    show.error = '';\r\n                                    this.setState({ categoryUpdateShow: show })\r\n                                }}>\r\n                            </i>\r\n                        </div>}\r\n                    {console.log(\"state product type = \" + this.state.productType)}\r\n                    <h6 className={this.state.categoryUpdateShow.error && this.state.categoryUpdateShow.error.length > 1 ?\r\n                        \"required-field\" : \"mt-5 required-field\"}>name</h6>\r\n                    <CustomSelect\r\n                        items={this.state.names}\r\n                        value={this.state.categoryId}\r\n                        onChange={(selected) => this.onCategoryChange(selected)}\r\n                    />\r\n                    <h6 className=\"inline pl-0 pb-3 pt-3\">product type</h6>{this.state.productType||'...'} \r\n                    <div>\r\n                        <h6 className={`${this.state.productType == 'LTA' ? \"required-field\" : \"\"}`}>amortization</h6>\r\n                        <input type=\"number\" className=\"form-control inline p-2\"\r\n                            disabled={this.state.productType != 'LTA'}\r\n                            value={this.state.productType!='LTA'?'':this.state.amortizationPercent\r\n                            }\r\n                            length=\"5\"\r\n                        min=\"0\"\r\n                            max=\"100\"                            \r\n                            onChange={(value) => {                               \r\n                                this.onamortizationChange(value)\r\n                            }} />&nbsp;%\r\n                        </div>                    \r\n                    <button className=\"btn btn-mybtn p-x-5\" onClick={this.saveUpdated}>Save</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5\" onClick={() => this.props.updateClickedInner(null)}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserCategoryInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Shared\\Function.js",["704","705"],"\r\nclass Function {\r\n\r\n\r\n    getErrorMsg(error) {\r\n\r\n        let msg = '' + error == 'Error: Request failed with status code 401' ? 'Error : Unauthorized, need to login again !!!' :\r\n            error.response && error.response.data && typeof error.response.data == 'string' ?\r\n            error.response.data : error.response && error.response.data && typeof error.response.data == 'object' ?\r\n                error.response.data.errors ?\r\n                    error.response.data.errors[0].defaultMessage : error.response.data.message != null ?\r\n                        error.response.data.message :\r\n                        'errors found !!!' : error + '';\r\n\r\n        if (typeof msg == 'string' && msg.startsWith('Failed to convert value'))\r\n            msg = 'try again with correct values !!!'\r\n        msg = typeof msg == 'string' && msg.indexOf(\"ConstraintViolationException\") > -1 ? \"error !!!\" : msg\r\n        msg = typeof msg == 'string' && msg.indexOf(\"Forbidden\") > -1 ? \"Error: Unauthorized !!!\" : msg\r\n\r\n        return msg;\r\n    }\r\n\r\n    getDate() { \r\n\r\n        let date = new Date();       \r\n        date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n        return date;\r\n    }\r\n\r\n    convertDate(date) { // to string \r\n        if (date && date != 'undefined') {\r\n            // let date = \r\n            date = (new Date(date));\r\n            date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n            date = date.toISOString();\r\n            date = date.substring(0, date.indexOf('T'))\r\n            return date;\r\n        } else return '';\r\n    }\r\n   \r\n}\r\n\r\nexport default new Function()","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\Functions.js",["706","707","708","709","710","711","712","713","714","715","716","717"],"\r\nclass Functions {\r\n\r\n    convertDate(date) { // to string \r\n\r\n        if (!date || date == 'undefined') return null;\r\n\r\n            date = (new Date(date));\r\n            date.setHours(date.getHours() - date.getTimezoneOffset() / 60);\r\n            date = date.toISOString();\r\n            date = date.substring(0, date.indexOf('T'))\r\n\r\n            return date;       \r\n    }\r\n\r\n    getRandom() {       \r\n           let uuid = ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n        );\r\n\r\n        return uuid;\r\n    }\r\n\r\n    getSubmitPath(path, search, prefix, values, onNewSearch, history) {\r\n       \r\n        let newPath = ``;\r\n\r\n        if (search.length > 1) {\r\n            while (search.charAt(0) === '?') {\r\n                search = search.substring(1);\r\n            }\r\n            let searchItems = search.split('&');\r\n            for (let i = 0; i < searchItems.length; i++) {\r\n\r\n                if (searchItems[i].startsWith('Pager.itemsPerPage='))\r\n                    newPath += searchItems[i] + '&'\r\n            }\r\n        }\r\n       \r\n        Object.entries(values).map(([key, value]) => {\r\n            if (!key.endsWith(\"s\") && value && value != 'undefined') {\r\n                if ((values.productType === 'STA' && key === 'amortizationPercentMoreThan') ||\r\n                    (values.productType === 'STA' && key === 'amortizationPercentLessThan') ||\r\n                    (key === 'maxmore') ||\r\n                    (key === 'minless') ||\r\n                    (key === 'maxtotal') ||\r\n                    (key === 'mintotal')) { }\r\n                else if (key.startsWith('date')) {\r\n                    value = (new Date(value)).toISOString();\r\n                    value = value.substring(0, value.indexOf('T'))                   \r\n                    newPath += prefix + '.' + key + '=' + value + '&'\r\n                }\r\n                else if (key.startsWith('phoneNumber')) {\r\n                    if (value.startsWith('+')) value = value.replace('+', '%2B');\r\n                    newPath += prefix + '.' + key + '=' + value + '&'\r\n                }\r\n                else if (key == 'ddcnumber') {\r\n                    newPath += prefix + '.' + 'dDCnumber' + '=' + value + '&'\r\n                }\r\n                else if (key == 'givenAfter' || key == 'returnedBefore') {\r\n                        value = this.convertDate(value);//(new Date(value)).toISOString();\r\n                        newPath += prefix + '.' + key + '=' + value + '&'\r\n                    }\r\n                else { newPath += prefix + '.' + key + '=' + value + '&' }\r\n            }\r\n        })\r\n        newPath = newPath.substring(0, newPath.length - 1);\r\n        newPath = '?' + newPath;\r\n        newPath = onNewSearch ? newPath : path + newPath;\r\n       onNewSearch ? onNewSearch(newPath) : history ? history.push(newPath) : window.location.href = newPath;\r\n    }\r\n                   \r\n\r\n}\r\n\r\nexport default new Functions()","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\HomeComponent.jsx",["718"],"import React, { Component } from 'react';\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport AuthenticationService from '../service/AuthenticationService';\r\nimport '../myStyles/Menu.css'\r\n\r\nclass HomeComponent extends Component {\r\n\r\n    render() {\r\n\r\n        const userRole = AuthenticationService.getLoggedUerRole();\r\n\r\n        return (\r\n            <div>\r\n                <div class=\"jumbotron\">\r\n                <h1>Inventory UI</h1>\r\n                </div>\r\n                <div className=\"ml-5\">\r\n                    <div className=\"row\"> \r\n                {\r\n                    (userRole === 'ROLE_Admin' || userRole === 'ROLE_Mol' ) &&\r\n                \r\n                    <div class=\"col-md-3\">\r\n                        <h2>Users</h2>\r\n                        <p>Manage users .</p>\r\n                        <p><Link to='/users' className=\"btn btn-default\">Users &raquo;</Link></p>\r\n                        <p><Link to='/users/-1' className=\"btn btn-default\">Add New User &raquo;</Link></p>\r\n                            </div >\r\n                            }\r\n                    {(userRole === 'ROLE_Admin') &&\r\n                        <>\r\n                            <div class=\"col-md-3\">\r\n                                <h2>Categories</h2>\r\n                                <p>Manage categories .</p>\r\n                                <p><Link to='/categories' className=\"btn btn-default\">Categories &raquo;</Link></p>\r\n                                <p><Link to='/categories/-1' className=\"btn btn-default\">Add New Category &raquo;</Link></p>\r\n                            </div >\r\n                            <div class=\"col-md-3\">\r\n                                <h2>Countries & Cities</h2>\r\n                                <p>Manage countries & cities .</p>\r\n                                <p><Link to='/countries' className=\"btn btn-default\">Countries & Cities &raquo;</Link></p>\r\n                                <p><Link to='/countries/-1' className=\"btn btn-default\">Add New Countries or Cities &raquo;</Link></p>\r\n                            </div >\r\n                            </>               \r\n                        }\r\n                        {(userRole === 'ROLE_Mol' || userRole == 'ROLE_Employee') &&\r\n                            <>\r\n                                <div class=\"col-md-3\">\r\n                                    <h2>Profiles</h2>\r\n                                    <p>{userRole === 'ROLE_Mol' ? 'Manage profiles .' : 'My Profiles .'}</p>\r\n                                    <p><Link to='/userprofiles' className=\"btn btn-default\">Profiles &raquo;</Link></p>\r\n                                </div >\r\n                            </>\r\n                        }\r\n                    {(userRole === 'ROLE_Mol') &&\r\n                            <>\r\n                            <div class=\"col-md-3\">\r\n                                <h2>Products</h2>\r\n                                <p>Manage products .</p>\r\n                                <p><Link to='/products' className=\"btn btn-default\">Products &raquo;</Link></p>\r\n                                <p><Link to='/products/-1' className=\"btn btn-default\">Add New Product &raquo;</Link></p>\r\n                            </div >\r\n                            <div class=\"col-md-3\">\r\n                                <h2>Inventories</h2>\r\n                                <p>Manage inventories .</p>\r\n                                <p><Link to='/productDetails' className=\"btn btn-default\">Inventories &raquo;</Link></p>\r\n                                <p><Link to='/productDetails/-1' className=\"btn btn-default\">Add New Inventory &raquo;</Link></p>\r\n                            </div >                           \r\n                        </>\r\n                    }\r\n                </div>\r\n                <div className=\"row mt-5\"> \r\n                {userRole === 'ROLE_Mol' &&\r\n                            <>\r\n                            <div class=\"col-md-3\">\r\n                                <h2>Categories</h2>\r\n                                <p>Manage categories .</p>\r\n                                <p><Link to='/usercategories' className=\"btn btn-default\">Categories &raquo;</Link></p>\r\n                                <p><Link to='/usercategories/-1' className=\"btn btn-default\">Add New Category &raquo;</Link></p>\r\n                            </div >\r\n                        <div class=\"col-md-3\">\r\n                            <h2>Suppliers</h2>\r\n                            <p>Manage suppliers .</p>\r\n                            <p><Link to='/suppliers' className=\"btn btn-default\">Suppliers &raquo;</Link></p>\r\n                            <p><Link to='/suppliers/-1' className=\"btn btn-default\">Add New Supplier &raquo;</Link></p>\r\n                        </div >\r\n                        <div class=\"col-md-3\">\r\n                            <h2>Deliveries</h2>\r\n                            <p>Manage deliveries .</p>\r\n                            <p><Link to='/deliveries' className=\"btn btn-default\">Deliveries &raquo;</Link></p>\r\n                            <p><Link to='/deliveries/-1' className=\"btn btn-default\">Add New Delivery &raquo;</Link></p>\r\n                        </div >\r\n                    </>\r\n                    }\r\n                    </div>\r\n                </div>\r\n                        </div>    \r\n         )\r\n    }\r\n\r\n}\r\n\r\nexport default HomeComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\OrderByComponent.jsx",["719","720"],"import React, { Component } from 'react';\r\nimport '../myStyles/Style.css';\r\n\r\nclass OrderByComponent extends Component {\r\n\r\n    render() {\r\n        let sameName = this.props.orderBy.name == this.props.name;\r\n    return(\r\n        <>\r\n        {sameName && this.props.orderBy.direction == \"asc\" ?\r\n                (< i class=\"fa fa-caret-up ml-2 hoverable\" style={{ color: sameName ? \"#224047\" : \"\" }}\r\n                    onClick={this.props.onClick} />) :\r\n                (< i class=\"fa fa-caret-down ml-2 hoverable\" style={{ color: sameName ? \"#224047\" : \"\" }}\r\n                    onClick={this.props.onClick} />)\r\n            }\r\n       </>\r\n   )}\r\n}\r\n\r\nexport default OrderByComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\DeleteAllInnerComponent.jsx",["721","722"],"import React, { Component } from 'react';\r\nimport '../myStyles/Style.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CustomSelect from './Filters/CustomSelect';\r\n\r\n\r\nclass DeleteAllInnerComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n            {\r\n                items: props.items\r\n            }\r\n    }\r\n\r\n    convertDate(g) {\r\n        if (g == null) return\r\n        g = new Date(g);\r\n        g.setHours(g.getHours() - g.getTimezoneOffset() / 60);\r\n        return g;\r\n    }\r\n\r\n    getStringDate(date) {\r\n        date = this.convertDate(date);\r\n        date = date.toISOString();\r\n        date = date.substring(0, date.indexOf('T'));\r\n        return date;\r\n    }\r\n\r\n    checkValidInputs() {\r\n        if (this.state.selectedDate != null)\r\n            return true\r\n        this.setState({ error: 'must choose date  !!!' })\r\n        return false\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"overlay d-block\"></div>\r\n                <div className=\"modal d-block\" style={{\r\n                    fontWeight: \"normal\", height: \"55%\"\r\n                }}>\r\n                   <span class=\"close pt-3\" onClick={() => this.props.cancel()}>&times;</span>\r\n                    <h2>Delete All before </h2>                        \r\n                            {this.state.error &&\r\n                                <div className=\"alert alert-warning d-flex\">{this.state.error}\r\n                                    <i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                                        onClick={() => {\r\n                                            \r\n                                            this.setState({ error: null })\r\n                                        }}>\r\n                                    </i>\r\n                        </div>}\r\n\r\n                    <div className={this.state.error ?\r\n                        \"ml-5\" : \"mt-5 ml-5\"}>\r\n                        <h6 className=\"ml-1\">inventory </h6>\r\n                    <CustomSelect\r\n                            className={\"inline w90 ml-0 p-0\"}\r\n                            items={this.state.items}\r\n                            value={(this.state.itemId)}\r\n                            onChange={(selected) => this.setState({itemId : selected.value})}\r\n                        />\r\n                    </div>\r\n                    <div className=\"ml-5\">\r\n                        <h6 className=\"ml-1 required-field\">date</h6>\r\n                        <div className=\"inline w70 pl-0\">\r\n                            <DatePicker\r\n                                className=\"form-control w100 m-0 \"\r\n                                dateFormat=\"dd MMMM yyyy\"\r\n                                locale=\"en-GB\"\r\n                                isClearable\r\n                                placeholderText=\"...\"\r\n                                maxDate={new Date()}\r\n                                showYearDropdown\r\n                                dropdownMode=\"select\"\r\n                                selected={this.state.selectedDate && new Date(this.state.selectedDate) || null}\r\n                            onChange={date => {\r\n                                this.setState({                                   \r\n                                    selectedDate: this.getStringDate(date)\r\n                                })\r\n                                if (date && this.state.error)\r\n                                    this.setState({error: null})\r\n                                }} />\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"btn btn-mybtn p-x-5 ml-5\" onClick={() => {\r\n                        if (this.checkValidInputs())\r\n                            if (window.confirm('Are you sure ?\\nAre you sure you want to delete all items before '+this.state.selectedDate+' ? '))\r\n                                this.props.deleteAll(this.state.selectedDate, this.state.itemId)\r\n                    }}>Delete All</button>\r\n                    <button className=\"btn btn-mybtn btn-delete px-5 ml-5\" onClick={() => this.props.cancel()}>Cancel</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nexport default DeleteAllInnerComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\EventListner.jsx",["723","724","725"],"import { EventSourcePolyfill } from 'event-source-polyfill';\r\nimport authHeader from '../service/AuthHeader';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Link, withRouter } from 'react-router-dom'\r\n\r\nfunction EventListner() {\r\n   \r\n    const [listening, setListening] = useState(false);   \r\n    let eventSource = undefined;\r\n\r\n    const ToastWithLink = (title, msg, link) => (\r\n          <div>\r\n              <h5>{title}</h5>\r\n           <Link to={link}>{msg}</Link>\r\n        </div>\r\n    );\r\n\r\n    const getListString = (list) => {\r\n        let str = list.toString();\r\n        str = str.substring(1, str.length - 1)\r\n        return str\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!listening) {\r\n            var EventSource = EventSourcePolyfill; \r\n            eventSource = new EventSource(\"http://localhost:8080/api/inventory/manager/subscribeWebClient\", { headers: authHeader() });\r\n\r\n            eventSource.onopen = (event) => {                \r\n            }\r\n\r\n            eventSource.onmessage = (event) => {              \r\n                toast(event.data, { position: \"bottom-right\", hideProgressBar: true, autoClose: false});              \r\n            }\r\n\r\n            //keep alive pings\r\n            eventSource.addEventListener(\"keepalive\", (event) => {  \r\n                console.log(\"keepalive event recieved\")\r\n            })\r\n\r\n            //Amortized\r\n            eventSource.addEventListener(\"amortized\", (event) => {\r\n                toast(ToastWithLink(\"Inventories\", \"fully amortized inventories\",\r\n                    \"/productdetails?Filter.amortized=true&Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            // UpdatedAmortizations\r\n            eventSource.addEventListener(\"updatedamortizations\", (event) => {\r\n                toast(ToastWithLink(\"Inventories\", \"total amortization updated for inventories\",\r\n                    \"/productdetails?Filter.updated=true&Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            //AllDiscarded\r\n            eventSource.addEventListener(\"alldiscarded\", (event) => {\r\n                toast(ToastWithLink(\"Deliveries\", \"all discarded deliveries\",\r\n                    \"/deliveries?Filter.discarded=true&Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            //EmptyDeliveries\r\n            eventSource.addEventListener(\"emptydeliveries\", (event) => {\r\n                toast(ToastWithLink(\"Deliveries\", \"empty deliveries\",\r\n                    \"/deliveries?Filter.empty=true&Filter.ids=\" + getListString(event.data)),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            //cityRequest\r\n            eventSource.addEventListener(\"cityrequest\", (event) => {\r\n                toast(ToastWithLink(\"City Request\",\r\n                    \"new Register with city Request\", \"/pendingrequests?refresh\"),\r\n                    { position: \"bottom-right\", autoClose: false });\r\n            })\r\n\r\n            eventSource.onerror = (event) => {\r\n                if (event.target.readyState === EventSource.CLOSED) {\r\n                }\r\n            }\r\n\r\n            setListening(true);\r\n        }\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            console.log(\"eventsource closed\")\r\n        }\r\n\r\n    }, [])\r\n  \r\n\r\n    return (\r\n        <></>\r\n    );\r\n  \r\n}\r\n\r\nexport default EventListner;\r\n","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\ListPendingUsersComponent.jsx",["726","727","728","729","730","731","732","733","734","735","736"],"import React, { Component } from 'react';\r\nimport PendingUserDataService from '../service/PendingUserDataService';\r\nimport PaginationComponent from './PaginationComponent';\r\nimport PendingUserFilter from './Filters/PendingUserFilter';\r\nimport '../myStyles/Style.css';\r\n\r\nimport Function from './Shared/Function';\r\nimport CityInnerComponent from './CityInnerComponent';\r\nimport CustomSelect from './Filters/CustomSelect';\r\nimport { Link, Route, withRouter } from 'react-router-dom'\r\n\r\n\r\n\r\nclass ListPendingUsersComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            message: null,\r\n            pager: null,\r\n            filter: {},\r\n            search: window.location.search || '',\r\n            alldata: [],\r\n            cityUpdateShow: {\r\n                city: {}, show: false\r\n            },\r\n            updatingItemId: null,\r\n            filterkey: 0\r\n        }\r\n        this.refresh = this.refresh.bind(this)\r\n        this.deleteClicked = this.deleteClicked.bind(this)\r\n        this.updateClicked = this.updateClicked.bind(this)\r\n        this.saveClicked = this.saveClicked.bind(this)\r\n        this.searchLink = React.createRef();       \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    componentDidUpdate() {       \r\n        if (this.props.location.search.indexOf(\"refresh\") > -1) {           \r\n            this.searchLink.current.click();\r\n            this.refresh();\r\n        }     \r\n    }\r\n\r\n    refresh(newsearch) {\r\n        if (!newsearch) newsearch = this.state.search;\r\n        PendingUserDataService.retrieveAll(newsearch)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        items: response.data.items || response.data.daoitems,\r\n                        pager: response.data.pager,\r\n                        filter: this.getfilter(response.data.filter),\r\n                        filterkey : this.state.filterkey + 1\r\n                    });\r\n                }\r\n            ).catch((error) => {\r\n                let msg = Function.getErrorMsg(error);\r\n                this.showError(msg, 5);               \r\n            })\r\n    }\r\n\r\n    getfilter(newfilter) {\r\n        if (!newfilter.filtersSet)\r\n            return newfilter;\r\n        else {\r\n            newfilter.countries = this.state.filter.countries;\r\n            return newfilter;\r\n        }\r\n    }\r\n\r\n    showError(msg, time) {\r\n        time = time ? time : 10;\r\n        this.setState({\r\n            errormsg: msg,\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            time = time - 1;\r\n            if (time == 0) {\r\n                this.setState(() => ({\r\n                    errormsg: null\r\n                }))\r\n                clearInterval(this.myInterval)\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n    deleteClicked(id) {\r\n        PendingUserDataService.delete(id)\r\n            .then(\r\n                () => {\r\n                    this.setState({ message: `Delete successful` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg, 5);\r\n        })\r\n    }\r\n\r\n    updateClicked(id, countryId, newCity) {\r\n        this.setState({ updatingItemId: id });\r\n        this.updateClickedInnerChild({ \"countryId\": `${countryId}`, \"name\": `${newCity}` })\r\n    }\r\n\r\n    updateItemCityId(cityId, city) {\r\n        let filter = this.state.filter;\r\n        let cities = filter.cities;\r\n        cities.push({ \"value\": cityId, \"name\": city.name, \"filterBy\": city.countryId })\r\n        this.setState({filter: filter})\r\n    }\r\n\r\n    setItemCity(selected, itemx) {\r\n        let id = itemx.id;\r\n        let list = this.state.items;\r\n        let item = list.find(x => x.id == id);\r\n        if (item == null) return;\r\n        item.cityId = selected.value;\r\n        item.newCity = selected.label;\r\n        this.setState({ items: list })\r\n    }\r\n\r\n    updateClickedInnerChild = (item) => {\r\n        item = item || {};\r\n        let show = this.state.cityUpdateShow;\r\n        show.show = !show.show;\r\n        if (show.show == true) {\r\n            show.city = JSON.parse(JSON.stringify(item))\r\n\r\n        } else {\r\n            show.error = ''\r\n        }\r\n        this.setState({\r\n            cityUpdateShow: show,\r\n            message: null,\r\n        });\r\n    }\r\n\r\n    saveClicked(item) {\r\n        PendingUserDataService.save(item)\r\n            .then(\r\n                () => {\r\n                    this.setState({ message: `Save successful` })\r\n                    this.refresh()\r\n                }\r\n        ).catch(error => {\r\n            let msg = Function.getErrorMsg(error);\r\n            this.showError(msg, 5);   \r\n        })\r\n    }    \r\n\r\n    togglemsgbox = () => {\r\n        this.setState({ message: null })\r\n    }\r\n\r\n    togglecitybox(i){\r\n        this.setState({\r\n            showcitybox: !this.state.showcitybox,\r\n            showcityboxi: i\r\n        })\r\n    }\r\n\r\n    getFilteredList(value) {\r\n        let subs = [];\r\n        let names = this.state.filter.cities;       \r\n        for (let i = 0; i < names.length; i++) {\r\n            if (names[i].filterBy == value || names[i].value == '') {\r\n                subs.push(names[i])\r\n            }\r\n        }\r\n\r\n        return subs\r\n    }\r\n\r\n    updateLink(newSearch) {\r\n        this.setState({ search: newSearch },\r\n            () => this.searchLink.current.click())\r\n    }\r\n\r\n    updateSearch(newSearch) {\r\n       \r\n        this.updateLink(newSearch);\r\n        if (newSearch.indexOf('Filter.filtersSet') < 0) {\r\n            newSearch += newSearch.length > 1 ? '&' : newSearch.length == 0 ? '?' : '';\r\n            newSearch += 'Filter.filtersSet=true'\r\n        }\r\n        this.refresh(newSearch);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { match } = this.props;\r\n        const url = match.url;\r\n       \r\n        return (\r\n            <div className=\"px-3 pt-3\">\r\n\r\n                <Link ref={this.searchLink} to={`${url}${this.state.search}`}></Link>\r\n                <Route path={`${url}/:search`}>\r\n                    <p></p>\r\n                </Route>\r\n                {this.state.cityUpdateShow && this.state.cityUpdateShow.show == true &&\r\n                    <CityInnerComponent\r\n                    cityUpdateShow={this.state.cityUpdateShow}\r\n                    updateClickedInnerChild={() => this.updateClickedInnerChild(null)}\r\n                    setMessage={(value) => this.setState({ message: value })}\r\n                    updatedCity={(id, updated) => this.updateItemCityId(id, updated)}\r\n                    />}\r\n                {this.state.filter && <PendingUserFilter {...this.state.filter}\r\n                    key={this.state.filterkey}\r\n                    onNewSearch={(search) =>\r\n                        this.updateSearch(search)\r\n                    }/>}\r\n                <div className=\"border\">\r\n                    <div className=\"panel-heading\">\r\n                        <h5 className=\"panel-title p-2 pb-3\">\r\n                            <strong> Pending Requests</strong>\r\n                        </h5>\r\n                    </div>\r\n                    <div className=\"p-1\">\r\n                        <div className=\" pt-3 px-2 mx-3 d-flex flex-wrap \">                           \r\n                            {this.state.pager && <PaginationComponent {...this.state.pager}\r\n                                search={this.state.search}\r\n                                onNewSearch={(search) =>\r\n                                    this.updateSearch(search)\r\n                                }/>}\r\n                        </div>\r\n                        {this.state.message && <div className=\"alert alert-success d-flex\">{this.state.message}<i class=\"fa fa-close ml-auto pr-3 pt-1\"\r\n                            onClick={this.togglemsgbox}></i></div>}\r\n                        {this.state.errormsg && <div className=\"alert alert-warning\">{this.state.errormsg}</div>}\r\n                        <table className=\"table border-bottom my-table\">\r\n                            <thead>\r\n                                <tr>                                  \r\n                                    <th>user name</th>\r\n                                    <th>email</th>\r\n                                    <th>country</th>\r\n                                    <th>city</th>                                   \r\n                                    <th>Update &emsp;&nbsp; Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.items.map(\r\n                                        (item, i) =>\r\n                                            <tr key={item.id}>                                                \r\n                                                <td>{item.username}</td>\r\n                                                <td>{item.email}</td>\r\n                                                <td>{this.state.filter.countries.find(x => x.value == item.countryId).name}</td>\r\n                                                <td className=\"w20\">\r\n                                                    <>\r\n                                                        <div className=\"\">\r\n                                                    {item.newCity}\r\n                                                            <i class=\"fa fa-caret-down ml-3 pr-3 pt-1\" onClick={() => this.togglecitybox(i)}></i>\r\n                                                        </div>\r\n                                                        {this.state.showcitybox && this.state.showcityboxi == i &&\r\n                                                            <div className=\"above-row hidden-select-control\">\r\n                                                            <div className=\"above-select\">\r\n                                                                <CustomSelect\r\n                                                                    className=\"inline-3\"\r\n                                                                    items={this.state.filter.cities && this.getFilteredList(item.countryId)}\r\n                                                                    value={item.cityId}\r\n                                                                    defaultMenuIsOpen={true}\r\n                                                                    onChange={(selected) => {\r\n                                                                        if (selected.value != 'undefined' && selected.value)\r\n                                                                            this.setItemCity(selected, item);                                                                            \r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                            </div>}\r\n                                                        </>\r\n                                                </td>                                               \r\n                                                <td>\r\n                                                    {item.cityId == null &&\r\n                                                        <button className=\"btn btn-mybtn mr-1\" onClick={() => this.updateClicked(item.id, item.countryId, item.newCity)}>Add</button>}\r\n                                                    {item.cityId != null &&\r\n                                                        <button className=\"btn btn-mybtn mr-1\" onClick={() => this.saveClicked(item)}>Save</button>}\r\n                                                    <button className=\"btn btn-mybtn btn-delete\" onClick={() => this.deleteClicked(item.id)}>Delete</button></td>\r\n                                            </tr>\r\n                                    )}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListPendingUsersComponent","D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\service\\PendingUserDataService.js",[],"D:\\Uni-2020\\Java\\imy-project\\inventory-management-system\\test-react-app\\src\\component\\Filters\\PendingUserFilter.jsx",["737"],"import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport CustomSelect from './CustomSelect';\r\nimport './Filter.css';\r\nimport Functions from './Functions';\r\n\r\nclass PendingUserFilter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            newCity: props.newCity,\r\n            countries: props.countries,\r\n            countryId: props.countryId,\r\n            prefix: props.prefix,\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.resetForm = this.resetForm.bind(this)\r\n    }\r\n\r\n    onSubmit(values) {\r\n\r\n        let path = window.location.pathname;\r\n        let search = window.location.search;\r\n        Functions.getSubmitPath(path, search, this.state.prefix, values, this.props.onNewSearch)\r\n       \r\n    }\r\n\r\n    resetForm() {      \r\n        this.setState({\r\n            newCity:null,           \r\n            countryId: null,            \r\n        })\r\n        this.props.onNewSearch ? this.props.onNewSearch('') : window.location.href = window.location.pathname;\r\n    }\r\n\r\n    render() {\r\n\r\n        let { newCity, countryId } = this.state\r\n        return (\r\n\r\n            <Formik\r\n                initialValues={{ newCity, countryId }}\r\n                onSubmit={this.onSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {({ props, setFieldValue, values }) => (\r\n                    <Form className=\"filter-form\">\r\n                        <fieldset >\r\n                            <div className=\"inline\">\r\n                                <label>country&nbsp;</label>\r\n                                <CustomSelect\r\n                                    className={\"inline inline-2-5\"}\r\n                                    items={this.state.countries}\r\n                                    value={values.countryId}\r\n                                    onChange={(selected) => setFieldValue(\"countryId\", selected.value)}\r\n                                />\r\n                            </div>\r\n                            <label className=\"mb-1 fw-s\">city name&nbsp;</label>\r\n                            <Field className=\"form-control inline inline-2 pt-1 pb-1\" type=\"text\" \r\n                                name=\"newCity\" />\r\n                            <div className=\"inline\">\r\n                                <button className=\"button px-5\" type=\"submit\">Search</button>\r\n                                <button className=\"button btn-delete\" type=\"button\" onClick={this.resetForm}>reset</button>\r\n                            </div>\r\n                        </fieldset>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PendingUserFilter",{"ruleId":"738","replacedBy":"739"},{"ruleId":"740","replacedBy":"741"},{"ruleId":"742","severity":1,"message":"743","line":1,"column":8,"nodeType":"744","messageId":"745","endLine":1,"endColumn":12},{"ruleId":"742","severity":1,"message":"746","line":9,"column":8,"nodeType":"744","messageId":"745","endLine":9,"endColumn":29},{"ruleId":"747","severity":1,"message":"748","line":15,"column":25,"nodeType":"749","endLine":15,"endColumn":63},{"ruleId":"738","replacedBy":"750"},{"ruleId":"740","replacedBy":"751"},{"ruleId":"742","severity":1,"message":"743","line":1,"column":8,"nodeType":"744","messageId":"745","endLine":1,"endColumn":12},{"ruleId":"742","severity":1,"message":"752","line":4,"column":17,"nodeType":"744","messageId":"745","endLine":4,"endColumn":26},{"ruleId":"742","severity":1,"message":"753","line":26,"column":26,"nodeType":"744","messageId":"745","endLine":26,"endColumn":31},{"ruleId":"754","severity":1,"message":"755","line":43,"column":47,"nodeType":"756","messageId":"757","endLine":43,"endColumn":49},{"ruleId":"754","severity":1,"message":"755","line":44,"column":22,"nodeType":"756","messageId":"757","endLine":44,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":67,"column":30,"nodeType":"756","messageId":"757","endLine":67,"endColumn":32},{"ruleId":"754","severity":1,"message":"755","line":16,"column":34,"nodeType":"756","messageId":"757","endLine":16,"endColumn":36},{"ruleId":"754","severity":1,"message":"755","line":44,"column":24,"nodeType":"756","messageId":"757","endLine":44,"endColumn":26},{"ruleId":"754","severity":1,"message":"755","line":85,"column":65,"nodeType":"756","messageId":"757","endLine":85,"endColumn":67},{"ruleId":"747","severity":1,"message":"748","line":85,"column":107,"nodeType":"749","endLine":86,"endColumn":63},{"ruleId":"754","severity":1,"message":"755","line":90,"column":65,"nodeType":"756","messageId":"757","endLine":90,"endColumn":67},{"ruleId":"747","severity":1,"message":"748","line":90,"column":106,"nodeType":"749","endLine":91,"endColumn":63},{"ruleId":"747","severity":1,"message":"748","line":94,"column":82,"nodeType":"749","endLine":95,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":98,"column":65,"nodeType":"756","messageId":"757","endLine":98,"endColumn":67},{"ruleId":"747","severity":1,"message":"748","line":98,"column":106,"nodeType":"749","endLine":99,"endColumn":63},{"ruleId":"747","severity":1,"message":"748","line":120,"column":51,"nodeType":"749","endLine":120,"endColumn":160},{"ruleId":"747","severity":1,"message":"748","line":129,"column":51,"nodeType":"749","endLine":129,"endColumn":155},{"ruleId":"742","severity":1,"message":"758","line":2,"column":24,"nodeType":"744","messageId":"745","endLine":2,"endColumn":29},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},{"ruleId":"754","severity":1,"message":"755","line":53,"column":29,"nodeType":"756","messageId":"757","endLine":53,"endColumn":31},{"ruleId":"754","severity":1,"message":"755","line":56,"column":39,"nodeType":"756","messageId":"757","endLine":56,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":56,"column":66,"nodeType":"756","messageId":"757","endLine":56,"endColumn":68},{"ruleId":"754","severity":1,"message":"755","line":118,"column":50,"nodeType":"756","messageId":"757","endLine":118,"endColumn":52},{"ruleId":"760","severity":1,"message":"761","line":5,"column":1,"nodeType":"762","endLine":39,"endColumn":2},{"ruleId":"754","severity":1,"message":"755","line":22,"column":62,"nodeType":"756","messageId":"757","endLine":22,"endColumn":64},{"ruleId":"742","severity":1,"message":"758","line":2,"column":24,"nodeType":"744","messageId":"745","endLine":2,"endColumn":29},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},{"ruleId":"754","severity":1,"message":"755","line":39,"column":39,"nodeType":"756","messageId":"757","endLine":39,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":39,"column":85,"nodeType":"756","messageId":"757","endLine":39,"endColumn":87},{"ruleId":"754","severity":1,"message":"755","line":109,"column":101,"nodeType":"756","messageId":"757","endLine":109,"endColumn":103},{"ruleId":"754","severity":1,"message":"755","line":133,"column":105,"nodeType":"756","messageId":"757","endLine":133,"endColumn":107},{"ruleId":"754","severity":1,"message":"755","line":134,"column":67,"nodeType":"756","messageId":"757","endLine":134,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":137,"column":105,"nodeType":"756","messageId":"757","endLine":137,"endColumn":107},{"ruleId":"754","severity":1,"message":"755","line":138,"column":67,"nodeType":"756","messageId":"757","endLine":138,"endColumn":69},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},{"ruleId":"742","severity":1,"message":"763","line":5,"column":8,"nodeType":"744","messageId":"745","endLine":5,"endColumn":20},{"ruleId":"742","severity":1,"message":"764","line":87,"column":15,"nodeType":"744","messageId":"745","endLine":87,"endColumn":22},{"ruleId":"754","severity":1,"message":"755","line":119,"column":85,"nodeType":"756","messageId":"757","endLine":119,"endColumn":87},{"ruleId":"754","severity":1,"message":"755","line":124,"column":115,"nodeType":"756","messageId":"757","endLine":124,"endColumn":117},{"ruleId":"754","severity":1,"message":"755","line":143,"column":116,"nodeType":"756","messageId":"757","endLine":143,"endColumn":118},{"ruleId":"754","severity":1,"message":"755","line":149,"column":83,"nodeType":"756","messageId":"757","endLine":149,"endColumn":85},{"ruleId":"754","severity":1,"message":"765","line":43,"column":40,"nodeType":"756","messageId":"757","endLine":43,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":47,"column":80,"nodeType":"756","messageId":"757","endLine":47,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":93,"column":22,"nodeType":"756","messageId":"757","endLine":93,"endColumn":24},{"ruleId":"742","severity":1,"message":"766","line":172,"column":15,"nodeType":"744","messageId":"745","endLine":172,"endColumn":22},{"ruleId":"767","severity":1,"message":"768","line":237,"column":53,"nodeType":"769","endLine":237,"endColumn":64},{"ruleId":"754","severity":1,"message":"755","line":241,"column":73,"nodeType":"756","messageId":"757","endLine":241,"endColumn":75},{"ruleId":"754","severity":1,"message":"755","line":253,"column":93,"nodeType":"756","messageId":"757","endLine":253,"endColumn":95},{"ruleId":"754","severity":1,"message":"765","line":44,"column":40,"nodeType":"756","messageId":"757","endLine":44,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":48,"column":80,"nodeType":"756","messageId":"757","endLine":48,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":98,"column":22,"nodeType":"756","messageId":"757","endLine":98,"endColumn":24},{"ruleId":"742","severity":1,"message":"766","line":177,"column":15,"nodeType":"744","messageId":"745","endLine":177,"endColumn":22},{"ruleId":"754","severity":1,"message":"755","line":241,"column":47,"nodeType":"756","messageId":"757","endLine":241,"endColumn":49},{"ruleId":"754","severity":1,"message":"755","line":255,"column":55,"nodeType":"756","messageId":"757","endLine":255,"endColumn":57},{"ruleId":"754","severity":1,"message":"765","line":70,"column":40,"nodeType":"756","messageId":"757","endLine":70,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":74,"column":80,"nodeType":"756","messageId":"757","endLine":74,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":77,"column":109,"nodeType":"756","messageId":"757","endLine":77,"endColumn":111},{"ruleId":"754","severity":1,"message":"755","line":132,"column":45,"nodeType":"756","messageId":"757","endLine":132,"endColumn":47},{"ruleId":"770","severity":1,"message":"771","line":145,"column":20,"nodeType":"772","messageId":"773","endLine":145,"endColumn":22},{"ruleId":"770","severity":1,"message":"771","line":146,"column":37,"nodeType":"772","messageId":"773","endLine":146,"endColumn":39},{"ruleId":"754","severity":1,"message":"755","line":207,"column":22,"nodeType":"756","messageId":"757","endLine":207,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":227,"column":42,"nodeType":"756","messageId":"757","endLine":227,"endColumn":44},{"ruleId":"754","severity":1,"message":"755","line":229,"column":45,"nodeType":"756","messageId":"757","endLine":229,"endColumn":47},{"ruleId":"754","severity":1,"message":"755","line":286,"column":33,"nodeType":"756","messageId":"757","endLine":286,"endColumn":35},{"ruleId":"754","severity":1,"message":"755","line":295,"column":23,"nodeType":"756","messageId":"757","endLine":295,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":310,"column":23,"nodeType":"756","messageId":"757","endLine":310,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":326,"column":23,"nodeType":"756","messageId":"757","endLine":326,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":380,"column":34,"nodeType":"756","messageId":"757","endLine":380,"endColumn":36},{"ruleId":"754","severity":1,"message":"755","line":380,"column":74,"nodeType":"756","messageId":"757","endLine":380,"endColumn":76},{"ruleId":"754","severity":1,"message":"755","line":382,"column":38,"nodeType":"756","messageId":"757","endLine":382,"endColumn":40},{"ruleId":"754","severity":1,"message":"755","line":414,"column":37,"nodeType":"756","messageId":"757","endLine":414,"endColumn":39},{"ruleId":"754","severity":1,"message":"755","line":453,"column":74,"nodeType":"756","messageId":"757","endLine":453,"endColumn":76},{"ruleId":"754","severity":1,"message":"755","line":463,"column":86,"nodeType":"756","messageId":"757","endLine":463,"endColumn":88},{"ruleId":"754","severity":1,"message":"755","line":473,"column":74,"nodeType":"756","messageId":"757","endLine":473,"endColumn":76},{"ruleId":"754","severity":1,"message":"755","line":484,"column":53,"nodeType":"756","messageId":"757","endLine":484,"endColumn":55},{"ruleId":"754","severity":1,"message":"755","line":496,"column":66,"nodeType":"756","messageId":"757","endLine":496,"endColumn":68},{"ruleId":"754","severity":1,"message":"765","line":498,"column":72,"nodeType":"756","messageId":"757","endLine":498,"endColumn":74},{"ruleId":"754","severity":1,"message":"755","line":503,"column":66,"nodeType":"756","messageId":"757","endLine":503,"endColumn":68},{"ruleId":"754","severity":1,"message":"755","line":504,"column":77,"nodeType":"756","messageId":"757","endLine":504,"endColumn":79},{"ruleId":"754","severity":1,"message":"755","line":514,"column":67,"nodeType":"756","messageId":"757","endLine":514,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":515,"column":71,"nodeType":"756","messageId":"757","endLine":515,"endColumn":73},{"ruleId":"754","severity":1,"message":"755","line":525,"column":70,"nodeType":"756","messageId":"757","endLine":525,"endColumn":72},{"ruleId":"754","severity":1,"message":"755","line":531,"column":65,"nodeType":"756","messageId":"757","endLine":531,"endColumn":67},{"ruleId":"754","severity":1,"message":"755","line":543,"column":50,"nodeType":"756","messageId":"757","endLine":543,"endColumn":52},{"ruleId":"754","severity":1,"message":"755","line":704,"column":50,"nodeType":"756","messageId":"757","endLine":704,"endColumn":52},{"ruleId":"754","severity":1,"message":"765","line":42,"column":40,"nodeType":"756","messageId":"757","endLine":42,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":46,"column":80,"nodeType":"756","messageId":"757","endLine":46,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":93,"column":22,"nodeType":"756","messageId":"757","endLine":93,"endColumn":24},{"ruleId":"742","severity":1,"message":"766","line":168,"column":15,"nodeType":"744","messageId":"745","endLine":168,"endColumn":22},{"ruleId":"767","severity":1,"message":"768","line":229,"column":49,"nodeType":"769","endLine":229,"endColumn":60},{"ruleId":"754","severity":1,"message":"755","line":38,"column":28,"nodeType":"756","messageId":"757","endLine":38,"endColumn":30},{"ruleId":"754","severity":1,"message":"765","line":71,"column":84,"nodeType":"756","messageId":"757","endLine":71,"endColumn":86},{"ruleId":"754","severity":1,"message":"765","line":72,"column":86,"nodeType":"756","messageId":"757","endLine":72,"endColumn":88},{"ruleId":"754","severity":1,"message":"755","line":86,"column":45,"nodeType":"756","messageId":"757","endLine":86,"endColumn":47},{"ruleId":"754","severity":1,"message":"755","line":86,"column":83,"nodeType":"756","messageId":"757","endLine":86,"endColumn":85},{"ruleId":"754","severity":1,"message":"765","line":86,"column":115,"nodeType":"756","messageId":"757","endLine":86,"endColumn":117},{"ruleId":"754","severity":1,"message":"755","line":109,"column":22,"nodeType":"756","messageId":"757","endLine":109,"endColumn":24},{"ruleId":"754","severity":1,"message":"765","line":139,"column":40,"nodeType":"756","messageId":"757","endLine":139,"endColumn":42},{"ruleId":"754","severity":1,"message":"765","line":143,"column":61,"nodeType":"756","messageId":"757","endLine":143,"endColumn":63},{"ruleId":"754","severity":1,"message":"755","line":143,"column":103,"nodeType":"756","messageId":"757","endLine":143,"endColumn":105},{"ruleId":"754","severity":1,"message":"755","line":146,"column":32,"nodeType":"756","messageId":"757","endLine":146,"endColumn":34},{"ruleId":"754","severity":1,"message":"755","line":146,"column":74,"nodeType":"756","messageId":"757","endLine":146,"endColumn":76},{"ruleId":"754","severity":1,"message":"755","line":147,"column":48,"nodeType":"756","messageId":"757","endLine":147,"endColumn":50},{"ruleId":"742","severity":1,"message":"774","line":148,"column":17,"nodeType":"744","messageId":"745","endLine":148,"endColumn":22},{"ruleId":"754","severity":1,"message":"755","line":153,"column":85,"nodeType":"756","messageId":"757","endLine":153,"endColumn":87},{"ruleId":"754","severity":1,"message":"755","line":183,"column":29,"nodeType":"756","messageId":"757","endLine":183,"endColumn":31},{"ruleId":"754","severity":1,"message":"755","line":186,"column":36,"nodeType":"756","messageId":"757","endLine":186,"endColumn":38},{"ruleId":"754","severity":1,"message":"755","line":200,"column":30,"nodeType":"756","messageId":"757","endLine":200,"endColumn":32},{"ruleId":"754","severity":1,"message":"755","line":201,"column":56,"nodeType":"756","messageId":"757","endLine":201,"endColumn":58},{"ruleId":"754","severity":1,"message":"755","line":296,"column":76,"nodeType":"756","messageId":"757","endLine":296,"endColumn":78},{"ruleId":"754","severity":1,"message":"755","line":298,"column":76,"nodeType":"756","messageId":"757","endLine":298,"endColumn":78},{"ruleId":"742","severity":1,"message":"775","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":82,"column":75,"nodeType":"756","messageId":"757","endLine":82,"endColumn":77},{"ruleId":"754","severity":1,"message":"755","line":118,"column":68,"nodeType":"756","messageId":"757","endLine":118,"endColumn":70},{"ruleId":"754","severity":1,"message":"755","line":130,"column":63,"nodeType":"756","messageId":"757","endLine":130,"endColumn":65},{"ruleId":"754","severity":1,"message":"765","line":153,"column":39,"nodeType":"756","messageId":"757","endLine":153,"endColumn":41},{"ruleId":"754","severity":1,"message":"765","line":154,"column":33,"nodeType":"756","messageId":"757","endLine":154,"endColumn":35},{"ruleId":"754","severity":1,"message":"755","line":155,"column":39,"nodeType":"756","messageId":"757","endLine":155,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":155,"column":83,"nodeType":"756","messageId":"757","endLine":155,"endColumn":85},{"ruleId":"754","severity":1,"message":"765","line":164,"column":42,"nodeType":"756","messageId":"757","endLine":164,"endColumn":44},{"ruleId":"754","severity":1,"message":"755","line":167,"column":69,"nodeType":"756","messageId":"757","endLine":167,"endColumn":71},{"ruleId":"754","severity":1,"message":"765","line":170,"column":40,"nodeType":"756","messageId":"757","endLine":170,"endColumn":42},{"ruleId":"754","severity":1,"message":"765","line":171,"column":32,"nodeType":"756","messageId":"757","endLine":171,"endColumn":34},{"ruleId":"754","severity":1,"message":"765","line":171,"column":69,"nodeType":"756","messageId":"757","endLine":171,"endColumn":71},{"ruleId":"754","severity":1,"message":"755","line":175,"column":67,"nodeType":"756","messageId":"757","endLine":175,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":304,"column":75,"nodeType":"756","messageId":"757","endLine":304,"endColumn":77},{"ruleId":"754","severity":1,"message":"755","line":304,"column":119,"nodeType":"756","messageId":"757","endLine":304,"endColumn":121},{"ruleId":"770","severity":1,"message":"771","line":309,"column":85,"nodeType":"772","messageId":"773","endLine":309,"endColumn":87},{"ruleId":"754","severity":1,"message":"755","line":310,"column":67,"nodeType":"756","messageId":"757","endLine":310,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":319,"column":77,"nodeType":"756","messageId":"757","endLine":319,"endColumn":79},{"ruleId":"754","severity":1,"message":"755","line":323,"column":74,"nodeType":"756","messageId":"757","endLine":323,"endColumn":76},{"ruleId":"754","severity":1,"message":"755","line":341,"column":101,"nodeType":"756","messageId":"757","endLine":341,"endColumn":103},{"ruleId":"754","severity":1,"message":"765","line":453,"column":120,"nodeType":"756","messageId":"757","endLine":453,"endColumn":122},{"ruleId":"754","severity":1,"message":"755","line":525,"column":78,"nodeType":"756","messageId":"757","endLine":525,"endColumn":80},{"ruleId":"754","severity":1,"message":"765","line":48,"column":40,"nodeType":"756","messageId":"757","endLine":48,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":52,"column":76,"nodeType":"756","messageId":"757","endLine":52,"endColumn":78},{"ruleId":"754","severity":1,"message":"755","line":97,"column":22,"nodeType":"756","messageId":"757","endLine":97,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":152,"column":27,"nodeType":"756","messageId":"757","endLine":152,"endColumn":29},{"ruleId":"742","severity":1,"message":"766","line":189,"column":15,"nodeType":"744","messageId":"745","endLine":189,"endColumn":22},{"ruleId":"754","severity":1,"message":"755","line":196,"column":74,"nodeType":"756","messageId":"757","endLine":196,"endColumn":76},{"ruleId":"754","severity":1,"message":"755","line":206,"column":27,"nodeType":"756","messageId":"757","endLine":206,"endColumn":29},{"ruleId":"754","severity":1,"message":"755","line":259,"column":47,"nodeType":"756","messageId":"757","endLine":259,"endColumn":49},{"ruleId":"767","severity":1,"message":"768","line":267,"column":53,"nodeType":"769","endLine":267,"endColumn":64},{"ruleId":"754","severity":1,"message":"755","line":271,"column":73,"nodeType":"756","messageId":"757","endLine":271,"endColumn":75},{"ruleId":"754","severity":1,"message":"755","line":290,"column":59,"nodeType":"756","messageId":"757","endLine":290,"endColumn":61},{"ruleId":"754","severity":1,"message":"755","line":294,"column":63,"nodeType":"756","messageId":"757","endLine":294,"endColumn":65},{"ruleId":"754","severity":1,"message":"765","line":297,"column":63,"nodeType":"756","messageId":"757","endLine":297,"endColumn":65},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},{"ruleId":"754","severity":1,"message":"755","line":83,"column":29,"nodeType":"756","messageId":"757","endLine":83,"endColumn":31},{"ruleId":"754","severity":1,"message":"755","line":88,"column":38,"nodeType":"756","messageId":"757","endLine":88,"endColumn":40},{"ruleId":"754","severity":1,"message":"755","line":200,"column":105,"nodeType":"756","messageId":"757","endLine":200,"endColumn":107},{"ruleId":"754","severity":1,"message":"755","line":214,"column":109,"nodeType":"756","messageId":"757","endLine":214,"endColumn":111},{"ruleId":"754","severity":1,"message":"755","line":215,"column":71,"nodeType":"756","messageId":"757","endLine":215,"endColumn":73},{"ruleId":"754","severity":1,"message":"755","line":218,"column":109,"nodeType":"756","messageId":"757","endLine":218,"endColumn":111},{"ruleId":"754","severity":1,"message":"755","line":219,"column":71,"nodeType":"756","messageId":"757","endLine":219,"endColumn":73},{"ruleId":"754","severity":1,"message":"755","line":243,"column":108,"nodeType":"756","messageId":"757","endLine":243,"endColumn":110},{"ruleId":"754","severity":1,"message":"755","line":254,"column":78,"nodeType":"756","messageId":"757","endLine":254,"endColumn":80},{"ruleId":"754","severity":1,"message":"755","line":257,"column":89,"nodeType":"756","messageId":"757","endLine":257,"endColumn":91},{"ruleId":"754","severity":1,"message":"755","line":262,"column":79,"nodeType":"756","messageId":"757","endLine":262,"endColumn":81},{"ruleId":"754","severity":1,"message":"755","line":265,"column":89,"nodeType":"756","messageId":"757","endLine":265,"endColumn":91},{"ruleId":"754","severity":1,"message":"755","line":83,"column":22,"nodeType":"756","messageId":"757","endLine":83,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":98,"column":34,"nodeType":"756","messageId":"757","endLine":98,"endColumn":36},{"ruleId":"754","severity":1,"message":"755","line":190,"column":38,"nodeType":"756","messageId":"757","endLine":190,"endColumn":40},{"ruleId":"754","severity":1,"message":"755","line":216,"column":23,"nodeType":"756","messageId":"757","endLine":216,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":230,"column":49,"nodeType":"756","messageId":"757","endLine":230,"endColumn":51},{"ruleId":"754","severity":1,"message":"755","line":300,"column":37,"nodeType":"756","messageId":"757","endLine":300,"endColumn":39},{"ruleId":"754","severity":1,"message":"755","line":301,"column":54,"nodeType":"756","messageId":"757","endLine":301,"endColumn":56},{"ruleId":"754","severity":1,"message":"755","line":320,"column":72,"nodeType":"756","messageId":"757","endLine":320,"endColumn":74},{"ruleId":"754","severity":1,"message":"755","line":335,"column":44,"nodeType":"756","messageId":"757","endLine":335,"endColumn":46},{"ruleId":"754","severity":1,"message":"755","line":337,"column":63,"nodeType":"756","messageId":"757","endLine":337,"endColumn":65},{"ruleId":"754","severity":1,"message":"755","line":341,"column":59,"nodeType":"756","messageId":"757","endLine":341,"endColumn":61},{"ruleId":"754","severity":1,"message":"755","line":351,"column":80,"nodeType":"756","messageId":"757","endLine":351,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":367,"column":54,"nodeType":"756","messageId":"757","endLine":367,"endColumn":56},{"ruleId":"754","severity":1,"message":"755","line":381,"column":35,"nodeType":"756","messageId":"757","endLine":381,"endColumn":37},{"ruleId":"754","severity":1,"message":"755","line":384,"column":71,"nodeType":"756","messageId":"757","endLine":384,"endColumn":73},{"ruleId":"754","severity":1,"message":"755","line":388,"column":75,"nodeType":"756","messageId":"757","endLine":388,"endColumn":77},{"ruleId":"754","severity":1,"message":"755","line":400,"column":43,"nodeType":"756","messageId":"757","endLine":400,"endColumn":45},{"ruleId":"754","severity":1,"message":"755","line":426,"column":35,"nodeType":"756","messageId":"757","endLine":426,"endColumn":37},{"ruleId":"754","severity":1,"message":"755","line":445,"column":51,"nodeType":"756","messageId":"757","endLine":445,"endColumn":53},{"ruleId":"754","severity":1,"message":"755","line":460,"column":51,"nodeType":"756","messageId":"757","endLine":460,"endColumn":53},{"ruleId":"754","severity":1,"message":"755","line":479,"column":63,"nodeType":"756","messageId":"757","endLine":479,"endColumn":65},{"ruleId":"754","severity":1,"message":"755","line":479,"column":108,"nodeType":"756","messageId":"757","endLine":479,"endColumn":110},{"ruleId":"754","severity":1,"message":"755","line":480,"column":85,"nodeType":"756","messageId":"757","endLine":480,"endColumn":87},{"ruleId":"754","severity":1,"message":"755","line":481,"column":85,"nodeType":"756","messageId":"757","endLine":481,"endColumn":87},{"ruleId":"754","severity":1,"message":"755","line":486,"column":81,"nodeType":"756","messageId":"757","endLine":486,"endColumn":83},{"ruleId":"754","severity":1,"message":"755","line":495,"column":81,"nodeType":"756","messageId":"757","endLine":495,"endColumn":83},{"ruleId":"754","severity":1,"message":"765","line":501,"column":103,"nodeType":"756","messageId":"757","endLine":501,"endColumn":105},{"ruleId":"754","severity":1,"message":"755","line":503,"column":107,"nodeType":"756","messageId":"757","endLine":503,"endColumn":109},{"ruleId":"754","severity":1,"message":"755","line":505,"column":75,"nodeType":"756","messageId":"757","endLine":505,"endColumn":77},{"ruleId":"754","severity":1,"message":"755","line":506,"column":82,"nodeType":"756","messageId":"757","endLine":506,"endColumn":84},{"ruleId":"754","severity":1,"message":"755","line":513,"column":102,"nodeType":"756","messageId":"757","endLine":513,"endColumn":104},{"ruleId":"754","severity":1,"message":"765","line":513,"column":128,"nodeType":"756","messageId":"757","endLine":513,"endColumn":130},{"ruleId":"754","severity":1,"message":"755","line":516,"column":102,"nodeType":"756","messageId":"757","endLine":516,"endColumn":104},{"ruleId":"754","severity":1,"message":"755","line":516,"column":128,"nodeType":"756","messageId":"757","endLine":516,"endColumn":130},{"ruleId":"754","severity":1,"message":"765","line":517,"column":107,"nodeType":"756","messageId":"757","endLine":517,"endColumn":109},{"ruleId":"754","severity":1,"message":"755","line":520,"column":102,"nodeType":"756","messageId":"757","endLine":520,"endColumn":104},{"ruleId":"754","severity":1,"message":"755","line":520,"column":128,"nodeType":"756","messageId":"757","endLine":520,"endColumn":130},{"ruleId":"754","severity":1,"message":"755","line":520,"column":161,"nodeType":"756","messageId":"757","endLine":520,"endColumn":163},{"ruleId":"754","severity":1,"message":"765","line":541,"column":78,"nodeType":"756","messageId":"757","endLine":541,"endColumn":80},{"ruleId":"754","severity":1,"message":"755","line":542,"column":63,"nodeType":"756","messageId":"757","endLine":542,"endColumn":65},{"ruleId":"754","severity":1,"message":"755","line":544,"column":89,"nodeType":"756","messageId":"757","endLine":544,"endColumn":91},{"ruleId":"754","severity":1,"message":"755","line":553,"column":67,"nodeType":"756","messageId":"757","endLine":553,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":588,"column":67,"nodeType":"756","messageId":"757","endLine":588,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":58,"column":39,"nodeType":"756","messageId":"757","endLine":58,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":58,"column":66,"nodeType":"756","messageId":"757","endLine":58,"endColumn":68},{"ruleId":"754","severity":1,"message":"755","line":101,"column":50,"nodeType":"756","messageId":"757","endLine":101,"endColumn":52},{"ruleId":"754","severity":1,"message":"755","line":163,"column":100,"nodeType":"756","messageId":"757","endLine":163,"endColumn":102},{"ruleId":"776","severity":1,"message":"777","line":175,"column":76,"nodeType":"778","messageId":"779","endLine":175,"endColumn":78},{"ruleId":"776","severity":1,"message":"777","line":175,"column":111,"nodeType":"778","messageId":"779","endLine":175,"endColumn":113},{"ruleId":"754","severity":1,"message":"755","line":203,"column":77,"nodeType":"756","messageId":"757","endLine":203,"endColumn":79},{"ruleId":"754","severity":1,"message":"755","line":206,"column":87,"nodeType":"756","messageId":"757","endLine":206,"endColumn":89},{"ruleId":"754","severity":1,"message":"755","line":24,"column":15,"nodeType":"756","messageId":"757","endLine":24,"endColumn":17},{"ruleId":"754","severity":1,"message":"755","line":31,"column":18,"nodeType":"756","messageId":"757","endLine":31,"endColumn":20},{"ruleId":"754","severity":1,"message":"755","line":35,"column":32,"nodeType":"756","messageId":"757","endLine":35,"endColumn":34},{"ruleId":"754","severity":1,"message":"755","line":56,"column":51,"nodeType":"756","messageId":"757","endLine":56,"endColumn":53},{"ruleId":"754","severity":1,"message":"755","line":69,"column":51,"nodeType":"756","messageId":"757","endLine":69,"endColumn":53},{"ruleId":"754","severity":1,"message":"755","line":84,"column":19,"nodeType":"756","messageId":"757","endLine":84,"endColumn":21},{"ruleId":"754","severity":1,"message":"755","line":85,"column":22,"nodeType":"756","messageId":"757","endLine":85,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":32,"column":31,"nodeType":"756","messageId":"757","endLine":32,"endColumn":33},{"ruleId":"754","severity":1,"message":"755","line":57,"column":48,"nodeType":"756","messageId":"757","endLine":57,"endColumn":50},{"ruleId":"754","severity":1,"message":"755","line":42,"column":38,"nodeType":"756","messageId":"757","endLine":42,"endColumn":40},{"ruleId":"754","severity":1,"message":"755","line":42,"column":65,"nodeType":"756","messageId":"757","endLine":42,"endColumn":67},{"ruleId":"754","severity":1,"message":"755","line":64,"column":49,"nodeType":"756","messageId":"757","endLine":64,"endColumn":51},{"ruleId":"770","severity":1,"message":"771","line":112,"column":25,"nodeType":"772","messageId":"773","endLine":112,"endColumn":27},{"ruleId":"754","severity":1,"message":"765","line":113,"column":33,"nodeType":"756","messageId":"757","endLine":113,"endColumn":35},{"ruleId":"754","severity":1,"message":"755","line":113,"column":54,"nodeType":"756","messageId":"757","endLine":113,"endColumn":56},{"ruleId":"754","severity":1,"message":"755","line":113,"column":94,"nodeType":"756","messageId":"757","endLine":113,"endColumn":96},{"ruleId":"738","replacedBy":"780"},{"ruleId":"740","replacedBy":"781"},{"ruleId":"742","severity":1,"message":"782","line":4,"column":16,"nodeType":"744","messageId":"745","endLine":4,"endColumn":26},{"ruleId":"754","severity":1,"message":"755","line":31,"column":34,"nodeType":"756","messageId":"757","endLine":31,"endColumn":36},{"ruleId":"754","severity":1,"message":"755","line":35,"column":27,"nodeType":"756","messageId":"757","endLine":35,"endColumn":29},{"ruleId":"754","severity":1,"message":"755","line":35,"column":73,"nodeType":"756","messageId":"757","endLine":35,"endColumn":75},{"ruleId":"754","severity":1,"message":"755","line":35,"column":113,"nodeType":"756","messageId":"757","endLine":35,"endColumn":115},{"ruleId":"754","severity":1,"message":"755","line":89,"column":49,"nodeType":"756","messageId":"757","endLine":89,"endColumn":51},{"ruleId":"754","severity":1,"message":"755","line":123,"column":108,"nodeType":"756","messageId":"757","endLine":123,"endColumn":110},{"ruleId":"754","severity":1,"message":"755","line":135,"column":88,"nodeType":"756","messageId":"757","endLine":135,"endColumn":90},{"ruleId":"754","severity":1,"message":"755","line":142,"column":89,"nodeType":"756","messageId":"757","endLine":142,"endColumn":91},{"ruleId":"754","severity":1,"message":"755","line":30,"column":80,"nodeType":"756","messageId":"757","endLine":30,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":30,"column":116,"nodeType":"756","messageId":"757","endLine":30,"endColumn":118},{"ruleId":"754","severity":1,"message":"755","line":46,"column":54,"nodeType":"756","messageId":"757","endLine":46,"endColumn":56},{"ruleId":"754","severity":1,"message":"755","line":57,"column":58,"nodeType":"756","messageId":"757","endLine":57,"endColumn":60},{"ruleId":"754","severity":1,"message":"755","line":66,"column":90,"nodeType":"756","messageId":"757","endLine":66,"endColumn":92},{"ruleId":"754","severity":1,"message":"755","line":93,"column":46,"nodeType":"756","messageId":"757","endLine":93,"endColumn":48},{"ruleId":"754","severity":1,"message":"755","line":97,"column":92,"nodeType":"756","messageId":"757","endLine":97,"endColumn":94},{"ruleId":"754","severity":1,"message":"755","line":104,"column":50,"nodeType":"756","messageId":"757","endLine":104,"endColumn":52},{"ruleId":"754","severity":1,"message":"755","line":104,"column":93,"nodeType":"756","messageId":"757","endLine":104,"endColumn":95},{"ruleId":"754","severity":1,"message":"755","line":105,"column":105,"nodeType":"756","messageId":"757","endLine":105,"endColumn":107},{"ruleId":"754","severity":1,"message":"755","line":105,"column":127,"nodeType":"756","messageId":"757","endLine":105,"endColumn":129},{"ruleId":"754","severity":1,"message":"755","line":140,"column":22,"nodeType":"756","messageId":"757","endLine":140,"endColumn":24},{"ruleId":"754","severity":1,"message":"765","line":191,"column":28,"nodeType":"756","messageId":"757","endLine":191,"endColumn":30},{"ruleId":"754","severity":1,"message":"755","line":194,"column":22,"nodeType":"756","messageId":"757","endLine":194,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":210,"column":27,"nodeType":"756","messageId":"757","endLine":210,"endColumn":29},{"ruleId":"754","severity":1,"message":"755","line":231,"column":71,"nodeType":"756","messageId":"757","endLine":231,"endColumn":73},{"ruleId":"754","severity":1,"message":"755","line":303,"column":19,"nodeType":"756","messageId":"757","endLine":303,"endColumn":21},{"ruleId":"776","severity":1,"message":"777","line":372,"column":79,"nodeType":"778","messageId":"779","endLine":372,"endColumn":81},{"ruleId":"776","severity":1,"message":"777","line":372,"column":116,"nodeType":"778","messageId":"779","endLine":372,"endColumn":118},{"ruleId":"742","severity":1,"message":"758","line":6,"column":24,"nodeType":"744","messageId":"745","endLine":6,"endColumn":29},{"ruleId":"742","severity":1,"message":"775","line":6,"column":31,"nodeType":"744","messageId":"745","endLine":6,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":44,"column":47,"nodeType":"756","messageId":"757","endLine":44,"endColumn":49},{"ruleId":"754","severity":1,"message":"765","line":51,"column":87,"nodeType":"756","messageId":"757","endLine":51,"endColumn":89},{"ruleId":"754","severity":1,"message":"765","line":52,"column":99,"nodeType":"756","messageId":"757","endLine":52,"endColumn":101},{"ruleId":"754","severity":1,"message":"755","line":84,"column":22,"nodeType":"756","messageId":"757","endLine":84,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":130,"column":66,"nodeType":"756","messageId":"757","endLine":130,"endColumn":68},{"ruleId":"770","severity":1,"message":"771","line":182,"column":36,"nodeType":"772","messageId":"773","endLine":182,"endColumn":38},{"ruleId":"754","severity":1,"message":"765","line":188,"column":43,"nodeType":"756","messageId":"757","endLine":188,"endColumn":45},{"ruleId":"754","severity":1,"message":"755","line":208,"column":45,"nodeType":"756","messageId":"757","endLine":208,"endColumn":47},{"ruleId":"754","severity":1,"message":"755","line":231,"column":26,"nodeType":"756","messageId":"757","endLine":231,"endColumn":28},{"ruleId":"754","severity":1,"message":"755","line":248,"column":56,"nodeType":"756","messageId":"757","endLine":248,"endColumn":58},{"ruleId":"754","severity":1,"message":"755","line":257,"column":56,"nodeType":"756","messageId":"757","endLine":257,"endColumn":58},{"ruleId":"754","severity":1,"message":"755","line":332,"column":59,"nodeType":"756","messageId":"757","endLine":332,"endColumn":61},{"ruleId":"754","severity":1,"message":"755","line":352,"column":59,"nodeType":"756","messageId":"757","endLine":352,"endColumn":61},{"ruleId":"754","severity":1,"message":"755","line":375,"column":63,"nodeType":"756","messageId":"757","endLine":375,"endColumn":65},{"ruleId":"754","severity":1,"message":"755","line":375,"column":96,"nodeType":"756","messageId":"757","endLine":375,"endColumn":98},{"ruleId":"754","severity":1,"message":"765","line":380,"column":66,"nodeType":"756","messageId":"757","endLine":380,"endColumn":68},{"ruleId":"742","severity":1,"message":"758","line":2,"column":24,"nodeType":"744","messageId":"745","endLine":2,"endColumn":29},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},{"ruleId":"754","severity":1,"message":"755","line":45,"column":36,"nodeType":"756","messageId":"757","endLine":45,"endColumn":38},{"ruleId":"754","severity":1,"message":"755","line":49,"column":39,"nodeType":"756","messageId":"757","endLine":49,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":49,"column":85,"nodeType":"756","messageId":"757","endLine":49,"endColumn":87},{"ruleId":"742","severity":1,"message":"782","line":8,"column":23,"nodeType":"744","messageId":"745","endLine":8,"endColumn":33},{"ruleId":"754","severity":1,"message":"765","line":40,"column":40,"nodeType":"756","messageId":"757","endLine":40,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":44,"column":80,"nodeType":"756","messageId":"757","endLine":44,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":91,"column":22,"nodeType":"756","messageId":"757","endLine":91,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":109,"column":23,"nodeType":"756","messageId":"757","endLine":109,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":126,"column":23,"nodeType":"756","messageId":"757","endLine":126,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":189,"column":84,"nodeType":"756","messageId":"757","endLine":189,"endColumn":86},{"ruleId":"754","severity":1,"message":"755","line":196,"column":78,"nodeType":"756","messageId":"757","endLine":196,"endColumn":80},{"ruleId":"754","severity":1,"message":"755","line":46,"column":37,"nodeType":"756","messageId":"757","endLine":46,"endColumn":39},{"ruleId":"754","severity":1,"message":"755","line":47,"column":27,"nodeType":"756","messageId":"757","endLine":47,"endColumn":29},{"ruleId":"754","severity":1,"message":"755","line":47,"column":79,"nodeType":"756","messageId":"757","endLine":47,"endColumn":81},{"ruleId":"754","severity":1,"message":"755","line":51,"column":34,"nodeType":"756","messageId":"757","endLine":51,"endColumn":36},{"ruleId":"754","severity":1,"message":"755","line":51,"column":68,"nodeType":"756","messageId":"757","endLine":51,"endColumn":70},{"ruleId":"754","severity":1,"message":"755","line":52,"column":32,"nodeType":"756","messageId":"757","endLine":52,"endColumn":34},{"ruleId":"776","severity":1,"message":"777","line":25,"column":74,"nodeType":"778","messageId":"779","endLine":25,"endColumn":76},{"ruleId":"776","severity":1,"message":"777","line":25,"column":111,"nodeType":"778","messageId":"779","endLine":25,"endColumn":113},{"ruleId":"776","severity":1,"message":"777","line":26,"column":54,"nodeType":"778","messageId":"779","endLine":26,"endColumn":56},{"ruleId":"776","severity":1,"message":"777","line":26,"column":98,"nodeType":"778","messageId":"779","endLine":26,"endColumn":100},{"ruleId":"754","severity":1,"message":"755","line":49,"column":83,"nodeType":"756","messageId":"757","endLine":49,"endColumn":85},{"ruleId":"754","severity":1,"message":"755","line":49,"column":135,"nodeType":"756","messageId":"757","endLine":49,"endColumn":137},{"ruleId":"754","severity":1,"message":"755","line":53,"column":34,"nodeType":"756","messageId":"757","endLine":53,"endColumn":36},{"ruleId":"754","severity":1,"message":"755","line":53,"column":69,"nodeType":"756","messageId":"757","endLine":53,"endColumn":71},{"ruleId":"754","severity":1,"message":"755","line":53,"column":108,"nodeType":"756","messageId":"757","endLine":53,"endColumn":110},{"ruleId":"742","severity":1,"message":"782","line":7,"column":23,"nodeType":"744","messageId":"745","endLine":7,"endColumn":33},{"ruleId":"754","severity":1,"message":"765","line":36,"column":40,"nodeType":"756","messageId":"757","endLine":36,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":40,"column":80,"nodeType":"756","messageId":"757","endLine":40,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":85,"column":22,"nodeType":"756","messageId":"757","endLine":85,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":104,"column":23,"nodeType":"756","messageId":"757","endLine":104,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":154,"column":86,"nodeType":"756","messageId":"757","endLine":154,"endColumn":88},{"ruleId":"754","severity":1,"message":"755","line":44,"column":39,"nodeType":"756","messageId":"757","endLine":44,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":44,"column":85,"nodeType":"756","messageId":"757","endLine":44,"endColumn":87},{"ruleId":"754","severity":1,"message":"755","line":75,"column":75,"nodeType":"756","messageId":"757","endLine":75,"endColumn":77},{"ruleId":"742","severity":1,"message":"763","line":4,"column":8,"nodeType":"744","messageId":"745","endLine":4,"endColumn":20},{"ruleId":"754","severity":1,"message":"755","line":21,"column":37,"nodeType":"756","messageId":"757","endLine":21,"endColumn":39},{"ruleId":"754","severity":1,"message":"755","line":25,"column":34,"nodeType":"756","messageId":"757","endLine":25,"endColumn":36},{"ruleId":"754","severity":1,"message":"755","line":25,"column":67,"nodeType":"756","messageId":"757","endLine":25,"endColumn":69},{"ruleId":"754","severity":1,"message":"755","line":89,"column":101,"nodeType":"756","messageId":"757","endLine":89,"endColumn":103},{"ruleId":"754","severity":1,"message":"755","line":96,"column":101,"nodeType":"756","messageId":"757","endLine":96,"endColumn":103},{"ruleId":"754","severity":1,"message":"765","line":34,"column":40,"nodeType":"756","messageId":"757","endLine":34,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":38,"column":80,"nodeType":"756","messageId":"757","endLine":38,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":83,"column":22,"nodeType":"756","messageId":"757","endLine":83,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":100,"column":23,"nodeType":"756","messageId":"757","endLine":100,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":149,"column":86,"nodeType":"756","messageId":"757","endLine":149,"endColumn":88},{"ruleId":"754","severity":1,"message":"755","line":201,"column":80,"nodeType":"756","messageId":"757","endLine":201,"endColumn":82},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},{"ruleId":"754","severity":1,"message":"755","line":45,"column":39,"nodeType":"756","messageId":"757","endLine":45,"endColumn":41},{"ruleId":"754","severity":1,"message":"755","line":77,"column":80,"nodeType":"756","messageId":"757","endLine":77,"endColumn":82},{"ruleId":"754","severity":1,"message":"755","line":103,"column":109,"nodeType":"756","messageId":"757","endLine":103,"endColumn":111},{"ruleId":"754","severity":1,"message":"755","line":104,"column":71,"nodeType":"756","messageId":"757","endLine":104,"endColumn":73},{"ruleId":"754","severity":1,"message":"755","line":107,"column":109,"nodeType":"756","messageId":"757","endLine":107,"endColumn":111},{"ruleId":"754","severity":1,"message":"755","line":108,"column":71,"nodeType":"756","messageId":"757","endLine":108,"endColumn":73},{"ruleId":"754","severity":1,"message":"755","line":48,"column":49,"nodeType":"756","messageId":"757","endLine":48,"endColumn":51},{"ruleId":"754","severity":1,"message":"755","line":49,"column":94,"nodeType":"756","messageId":"757","endLine":49,"endColumn":96},{"ruleId":"754","severity":1,"message":"755","line":53,"column":56,"nodeType":"756","messageId":"757","endLine":53,"endColumn":58},{"ruleId":"754","severity":1,"message":"755","line":53,"column":107,"nodeType":"756","messageId":"757","endLine":53,"endColumn":109},{"ruleId":"754","severity":1,"message":"755","line":88,"column":54,"nodeType":"756","messageId":"757","endLine":88,"endColumn":56},{"ruleId":"754","severity":1,"message":"755","line":123,"column":66,"nodeType":"756","messageId":"757","endLine":123,"endColumn":68},{"ruleId":"754","severity":1,"message":"765","line":125,"column":62,"nodeType":"756","messageId":"757","endLine":125,"endColumn":64},{"ruleId":"754","severity":1,"message":"765","line":126,"column":58,"nodeType":"756","messageId":"757","endLine":126,"endColumn":60},{"ruleId":"754","severity":1,"message":"755","line":7,"column":30,"nodeType":"756","messageId":"757","endLine":7,"endColumn":32},{"ruleId":"754","severity":1,"message":"765","line":31,"column":26,"nodeType":"756","messageId":"757","endLine":31,"endColumn":28},{"ruleId":"754","severity":1,"message":"755","line":6,"column":27,"nodeType":"756","messageId":"757","endLine":6,"endColumn":29},{"ruleId":"776","severity":1,"message":"783","line":18,"column":20,"nodeType":"756","messageId":"779","endLine":18,"endColumn":21},{"ruleId":"776","severity":1,"message":"783","line":18,"column":67,"nodeType":"756","messageId":"779","endLine":18,"endColumn":68},{"ruleId":"776","severity":1,"message":"784","line":18,"column":67,"nodeType":"756","messageId":"779","endLine":18,"endColumn":68},{"ruleId":"776","severity":1,"message":"784","line":18,"column":72,"nodeType":"756","messageId":"779","endLine":18,"endColumn":74},{"ruleId":"770","severity":1,"message":"771","line":40,"column":51,"nodeType":"772","messageId":"773","endLine":40,"endColumn":53},{"ruleId":"754","severity":1,"message":"765","line":41,"column":54,"nodeType":"756","messageId":"757","endLine":41,"endColumn":56},{"ruleId":"754","severity":1,"message":"755","line":57,"column":30,"nodeType":"756","messageId":"757","endLine":57,"endColumn":32},{"ruleId":"785","severity":1,"message":"786","line":58,"column":45,"nodeType":"756","messageId":"787","endLine":58,"endColumn":46},{"ruleId":"785","severity":1,"message":"786","line":58,"column":59,"nodeType":"756","messageId":"787","endLine":58,"endColumn":60},{"ruleId":"754","severity":1,"message":"755","line":60,"column":30,"nodeType":"756","messageId":"757","endLine":60,"endColumn":32},{"ruleId":"754","severity":1,"message":"755","line":60,"column":53,"nodeType":"756","messageId":"757","endLine":60,"endColumn":55},{"ruleId":"754","severity":1,"message":"755","line":46,"column":63,"nodeType":"756","messageId":"757","endLine":46,"endColumn":65},{"ruleId":"754","severity":1,"message":"755","line":7,"column":48,"nodeType":"756","messageId":"757","endLine":7,"endColumn":50},{"ruleId":"754","severity":1,"message":"755","line":10,"column":51,"nodeType":"756","messageId":"757","endLine":10,"endColumn":53},{"ruleId":"776","severity":1,"message":"777","line":77,"column":67,"nodeType":"778","messageId":"779","endLine":77,"endColumn":69},{"ruleId":"776","severity":1,"message":"777","line":77,"column":104,"nodeType":"778","messageId":"779","endLine":77,"endColumn":106},{"ruleId":"742","severity":1,"message":"788","line":4,"column":10,"nodeType":"744","messageId":"745","endLine":4,"endColumn":24},{"ruleId":"742","severity":1,"message":"782","line":5,"column":16,"nodeType":"744","messageId":"745","endLine":5,"endColumn":26},{"ruleId":"789","severity":1,"message":"790","line":28,"column":27,"nodeType":"791","endLine":28,"endColumn":135},{"ruleId":"742","severity":1,"message":"782","line":10,"column":23,"nodeType":"744","messageId":"745","endLine":10,"endColumn":33},{"ruleId":"754","severity":1,"message":"755","line":82,"column":22,"nodeType":"756","messageId":"757","endLine":82,"endColumn":24},{"ruleId":"754","severity":1,"message":"755","line":123,"column":40,"nodeType":"756","messageId":"757","endLine":123,"endColumn":42},{"ruleId":"754","severity":1,"message":"755","line":134,"column":23,"nodeType":"756","messageId":"757","endLine":134,"endColumn":25},{"ruleId":"754","severity":1,"message":"755","line":174,"column":35,"nodeType":"756","messageId":"757","endLine":174,"endColumn":37},{"ruleId":"754","severity":1,"message":"755","line":174,"column":62,"nodeType":"756","messageId":"757","endLine":174,"endColumn":64},{"ruleId":"754","severity":1,"message":"755","line":191,"column":72,"nodeType":"756","messageId":"757","endLine":191,"endColumn":74},{"ruleId":"754","severity":1,"message":"755","line":209,"column":78,"nodeType":"756","messageId":"757","endLine":209,"endColumn":80},{"ruleId":"754","severity":1,"message":"755","line":254,"column":100,"nodeType":"756","messageId":"757","endLine":254,"endColumn":102},{"ruleId":"754","severity":1,"message":"755","line":261,"column":108,"nodeType":"756","messageId":"757","endLine":261,"endColumn":110},{"ruleId":"754","severity":1,"message":"765","line":270,"column":92,"nodeType":"756","messageId":"757","endLine":270,"endColumn":94},{"ruleId":"742","severity":1,"message":"759","line":2,"column":31,"nodeType":"744","messageId":"745","endLine":2,"endColumn":43},"no-native-reassign",["792"],"no-negated-in-lhs",["793"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'AuthenticationServise' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["792"],["793"],"'useEffect' is defined but never used.","'toast' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'CustomSelect' is defined but never used.","'precent' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'dataAll' is assigned a value but never used.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'error' is assigned a value but never used.","'FieldArray' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["792"],["793"],"'withRouter' is defined but never used.","Unexpected mix of '^' and '&'.","Unexpected mix of '&' and '>>'.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'ToastContainer' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","no-global-assign","no-unsafe-negation"]